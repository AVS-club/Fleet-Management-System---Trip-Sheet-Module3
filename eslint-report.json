[{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\public\\sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\scripts\\addTestAnomalies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\scripts\\migrateNumberFormatting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\scripts\\seedVehicleTripsFixed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\scripts\\testNumberFormatting.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\scripts\\testNumberFormatting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\api\\partsHealth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ChallanInfoModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\FleetIQScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\FeedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\FeedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\HeroFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\KPICard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\MediaCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\HeroFeed\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\ActivityLogIntegration.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":134,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":134,"endColumn":36},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","line":153,"column":8,"nodeType":"ArrayExpression","endLine":153,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [props]","fix":{"range":[4668,4670],"text":"[props]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":162,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":162,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React from 'react'\r\nimport { VehicleActivityLog } from './VehicleActivityLog'\r\nimport { UserActivityLog } from './UserActivityLog'\r\nimport { logVehicleActivity, logUserActivity, getClientInfo } from '../../utils/activityLogger'\r\nimport { VehicleAction, UserAction } from '../../types/logs'\r\n\r\n/**\r\n * Integration component showing how to use the activity log system\r\n * with existing fleet management components\r\n */\r\nexport function ActivityLogIntegration() {\r\n  // Example: Log vehicle deletion when a vehicle is deleted\r\n  const handleVehicleDelete = async (vehicleId: string, vehicleRegistration: string, deletedBy: string) => {\r\n    try {\r\n      const clientInfo = getClientInfo()\r\n      \r\n      await logVehicleActivity(\r\n        vehicleId,\r\n        VehicleAction.DELETED,\r\n        deletedBy,\r\n        {\r\n          notes: `Vehicle ${vehicleRegistration} deleted`,\r\n          ...clientInfo,\r\n          metadata: {\r\n            vehicle_registration: vehicleRegistration,\r\n            deletion_reason: 'User requested',\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        }\r\n      )\r\n      \r\n      console.log('Vehicle deletion logged successfully')\r\n    } catch (error) {\r\n      console.error('Failed to log vehicle deletion:', error)\r\n    }\r\n  }\r\n\r\n  // Example: Log user login activity\r\n  const handleUserLogin = async (userId: string, loginMethod: string = 'email') => {\r\n    try {\r\n      const clientInfo = getClientInfo()\r\n      \r\n      await logUserActivity(\r\n        userId,\r\n        UserAction.LOGIN,\r\n        'auth',\r\n        'login',\r\n        {\r\n          ...clientInfo,\r\n          metadata: {\r\n            login_method: loginMethod,\r\n            session_start: new Date().toISOString()\r\n          }\r\n        }\r\n      )\r\n      \r\n      console.log('User login logged successfully')\r\n    } catch (error) {\r\n      console.error('Failed to log user login:', error)\r\n    }\r\n  }\r\n\r\n  // Example: Log data export activity\r\n  const handleDataExport = async (userId: string, exportType: string, recordCount: number) => {\r\n    try {\r\n      const clientInfo = getClientInfo()\r\n      \r\n      await logUserActivity(\r\n        userId,\r\n        UserAction.EXPORT,\r\n        'data',\r\n        exportType,\r\n        {\r\n          ...clientInfo,\r\n          metadata: {\r\n            export_type: exportType,\r\n            record_count: recordCount,\r\n            export_format: 'csv',\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        }\r\n      )\r\n      \r\n      console.log('Data export logged successfully')\r\n    } catch (error) {\r\n      console.error('Failed to log data export:', error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n        <h3 className=\"text-sm font-medium text-blue-900 mb-2\">Integration Examples</h3>\r\n        <p className=\"text-sm text-blue-800 mb-4\">\r\n          This component demonstrates how to integrate the activity log system with your existing components.\r\n        </p>\r\n        \r\n        <div className=\"space-y-2\">\r\n          <button\r\n            onClick={() => handleVehicleDelete('vehicle-123', 'MH12AB1234', 'John Doe')}\r\n            className=\"px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700\"\r\n          >\r\n            Log Vehicle Deletion\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => handleUserLogin('user-123', 'email')}\r\n            className=\"px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 ml-2\"\r\n          >\r\n            Log User Login\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => handleDataExport('user-123', 'vehicle_data', 150)}\r\n            className=\"px-3 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700 ml-2\"\r\n          >\r\n            Log Data Export\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Activity Log Components */}\r\n      <VehicleActivityLog limit={10} />\r\n      <UserActivityLog limit={10} />\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Higher-order component to automatically log activities\r\n */\r\nexport function withActivityLogging<T extends object>(\r\n  WrappedComponent: React.ComponentType<T>,\r\n  logConfig: {\r\n    onMount?: (props: T) => void\r\n    onUnmount?: (props: T) => void\r\n    onAction?: (action: string, props: T) => void\r\n  }\r\n) {\r\n  return function ActivityLoggedComponent(props: T) {\r\n    React.useEffect(() => {\r\n      if (logConfig.onMount) {\r\n        logConfig.onMount(props)\r\n      }\r\n      \r\n      return () => {\r\n        if (logConfig.onUnmount) {\r\n          logConfig.onUnmount(props)\r\n        }\r\n      }\r\n    }, [])\r\n\r\n    return <WrappedComponent {...props} />\r\n  }\r\n}\r\n\r\n/**\r\n * Hook for automatic activity logging\r\n */\r\nexport function useActivityLogging(userId: string) {\r\n  const logActivity = React.useCallback(async (\r\n    action: UserAction | string,\r\n    resource?: string,\r\n    resourceId?: string,\r\n    metadata?: Record<string, any>\r\n  ) => {\r\n    try {\r\n      await logUserActivity(userId, action, resource, resourceId, {\r\n        metadata: {\r\n          ...metadata,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.error('Failed to log activity:', error)\r\n    }\r\n  }, [userId])\r\n\r\n  return { logActivity }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\LogExport.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":114,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":114,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":132,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":132,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\LogFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\LogTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\UserActivityLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\activity-logs\\VehicleActivityLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\AlertThresholdsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\AuditTrailDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchAuditTrail'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [searchAuditTrail, searchFilters]","fix":{"range":[1202,1217],"text":"[searchAuditTrail, searchFilters]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { AuditTrailLogger, AuditTrailEntry, AuditSearchFilters, AuditTrailStats } from '../../utils/auditTrailLogger';\r\nimport { \r\n  User, AlertTriangle, Info, CheckCircle, XCircle, Filter, \r\n  Download, BarChart3, Activity, Shield, Eye, RefreshCw, \r\n  FileText, Settings, TrendingUp, AlertCircle\r\n} from 'lucide-react';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface AuditTrailDashboardProps {\r\n  className?: string;\r\n}\r\n\r\nconst AuditTrailDashboard: React.FC<AuditTrailDashboardProps> = ({ className = '' }) => {\r\n  const [auditStats, setAuditStats] = useState<AuditTrailStats | null>(null);\r\n  const [auditEntries, setAuditEntries] = useState<AuditTrailEntry[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchFilters, setSearchFilters] = useState<AuditSearchFilters>({\r\n    limit: 50,\r\n    offset: 0\r\n  });\r\n  const [totalEntries, setTotalEntries] = useState(0);\r\n  const [selectedEntry, setSelectedEntry] = useState<AuditTrailEntry | null>(null);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadAuditData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    searchAuditTrail();\r\n  }, [searchFilters]);\r\n\r\n  const loadAuditData = async () => {\r\n    try {\r\n      const stats = await AuditTrailLogger.getAuditTrailStats();\r\n      setAuditStats(stats);\r\n    } catch (error) {\r\n      console.error('Error loading audit stats:', error);\r\n      toast.error('Failed to load audit trail statistics');\r\n    }\r\n  };\r\n\r\n  const searchAuditTrail = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const { entries, total } = await AuditTrailLogger.searchAuditTrail(searchFilters);\r\n      setAuditEntries(entries);\r\n      setTotalEntries(total);\r\n    } catch (error) {\r\n      console.error('Error searching audit trail:', error);\r\n      toast.error('Failed to search audit trail');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (field: keyof AuditSearchFilters, value: any) => {\r\n    setSearchFilters(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n      offset: 0 // Reset to first page when filters change\r\n    }));\r\n  };\r\n\r\n  const handlePageChange = (newOffset: number) => {\r\n    setSearchFilters(prev => ({\r\n      ...prev,\r\n      offset: newOffset\r\n    }));\r\n  };\r\n\r\n  const getOperationIcon = (operationType: string) => {\r\n    switch (operationType) {\r\n      case 'data_correction': return <Settings className=\"h-4 w-4\" />;\r\n      case 'validation_check': return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'edge_case_detection': return <AlertTriangle className=\"h-4 w-4\" />;\r\n      case 'baseline_management': return <TrendingUp className=\"h-4 w-4\" />;\r\n      case 'sequence_monitoring': return <BarChart3 className=\"h-4 w-4\" />;\r\n      case 'return_trip_validation': return <Activity className=\"h-4 w-4\" />;\r\n      default: return <FileText className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'critical': return 'text-red-700 bg-red-100 border-red-200';\r\n      case 'error': return 'text-red-600 bg-red-50 border-red-200';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n      case 'info': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getSeverityIcon = (severity: string) => {\r\n    switch (severity) {\r\n      case 'critical': return <XCircle className=\"h-4 w-4\" />;\r\n      case 'error': return <AlertCircle className=\"h-4 w-4\" />;\r\n      case 'warning': return <AlertTriangle className=\"h-4 w-4\" />;\r\n      case 'info': return <Info className=\"h-4 w-4\" />;\r\n      default: return <Info className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  const formatOperationType = (operationType: string) => {\r\n    return operationType\r\n      .split('_')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  const exportAuditTrail = async () => {\r\n    try {\r\n      const { entries } = await AuditTrailLogger.searchAuditTrail({\r\n        ...searchFilters,\r\n        limit: 10000 // Large limit for export\r\n      });\r\n      \r\n      const csvContent = generateCSV(entries);\r\n      downloadCSV(csvContent, `audit_trail_${new Date().toISOString().split('T')[0]}.csv`);\r\n      toast.success('Audit trail exported successfully');\r\n    } catch (error) {\r\n      toast.error('Failed to export audit trail');\r\n    }\r\n  };\r\n\r\n  const generateCSV = (entries: AuditTrailEntry[]) => {\r\n    const headers = [\r\n      'Date', 'Operation Type', 'Entity Type', 'Entity ID', 'Action', \r\n      'Performed By', 'Severity', 'Confidence Score', 'Business Context'\r\n    ];\r\n    \r\n    const rows = entries.map(entry => [\r\n      entry.performed_at ? formatDate(entry.performed_at) : '',\r\n      entry.operation_type,\r\n      entry.entity_type,\r\n      entry.entity_id,\r\n      entry.action_performed,\r\n      entry.performer_name || 'System',\r\n      entry.severity_level || 'info',\r\n      entry.confidence_score?.toString() || '',\r\n      entry.business_context || ''\r\n    ]);\r\n    \r\n    return [headers, ...rows].map(row => \r\n      row.map(cell => `\"${(cell || '').toString().replace(/\"/g, '\"\"')}\"`).join(',')\r\n    ).join('\\n');\r\n  };\r\n\r\n  const downloadCSV = (csvContent: string, fileName: string) => {\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  if (loading && !auditEntries.length) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow p-6 ${className}`}>\r\n        <div className=\"flex items-center justify-center py-8\">\r\n          <RefreshCw className=\"h-6 w-6 animate-spin text-blue-600 mr-2\" />\r\n          <span>Loading audit trail...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"border-b p-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">Audit Trail</h2>\r\n            <p className=\"text-sm text-gray-600 mt-1\">\r\n              Comprehensive tracking of all data integrity operations and system changes\r\n            </p>\r\n          </div>\r\n          <div className=\"flex space-x-3\">\r\n            <button\r\n              onClick={() => setShowFilters(!showFilters)}\r\n              className={`flex items-center px-4 py-2 rounded ${showFilters ? 'bg-blue-600 text-white' : 'text-gray-700 bg-gray-100'} hover:bg-blue-700`}\r\n            >\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Filters\r\n            </button>\r\n            <button\r\n              onClick={exportAuditTrail}\r\n              className=\"flex items-center px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\r\n            >\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Export\r\n            </button>\r\n            <button\r\n              onClick={() => { loadAuditData(); searchAuditTrail(); }}\r\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n            >\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Overview */}\r\n      {auditStats && (\r\n        <div className=\"p-6 border-b\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">System Overview</h3>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-gray-900\">{auditStats.total_operations}</div>\r\n              <div className=\"text-sm text-gray-600\">Total Operations</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{auditStats.operations_today}</div>\r\n              <div className=\"text-sm text-gray-600\">Today</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{auditStats.operations_this_week}</div>\r\n              <div className=\"text-sm text-gray-600\">This Week</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{auditStats.error_rate.toFixed(1)}%</div>\r\n              <div className=\"text-sm text-gray-600\">Error Rate</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">{auditStats.avg_quality_score.toFixed(0)}</div>\r\n              <div className=\"text-sm text-gray-600\">Avg Quality</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-indigo-600\">{auditStats.avg_confidence_score.toFixed(0)}</div>\r\n              <div className=\"text-sm text-gray-600\">Avg Confidence</div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Operation Type Breakdown */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4\">\r\n            {Object.entries(auditStats.operations_by_type).map(([type, count]) => (\r\n              <div key={type} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\r\n                <div className=\"flex items-center\">\r\n                  {getOperationIcon(type)}\r\n                  <span className=\"ml-2 font-medium\">{formatOperationType(type)}</span>\r\n                </div>\r\n                <span className=\"text-lg font-bold text-gray-900\">{count}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Severity Breakdown */}\r\n          <div className=\"grid grid-cols-4 gap-4\">\r\n            {['critical', 'error', 'warning', 'info'].map(severity => (\r\n              <div key={severity} className={`flex items-center justify-between p-3 rounded border ${getSeverityColor(severity)}`}>\r\n                <div className=\"flex items-center\">\r\n                  {getSeverityIcon(severity)}\r\n                  <span className=\"ml-2 font-medium capitalize\">{severity}</span>\r\n                </div>\r\n                <span className=\"text-lg font-bold\">{auditStats.operations_by_severity[severity] || 0}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Filters */}\r\n      {showFilters && (\r\n        <div className=\"p-6 border-b bg-gray-50\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Operation Type</label>\r\n              <select\r\n                value={searchFilters.operation_types?.[0] || ''}\r\n                onChange={(e) => handleFilterChange('operation_types', e.target.value ? [e.target.value] : undefined)}\r\n                className=\"w-full border rounded px-3 py-2\"\r\n              >\r\n                <option value=\"\">All Operations</option>\r\n                <option value=\"data_correction\">Data Correction</option>\r\n                <option value=\"validation_check\">Validation Check</option>\r\n                <option value=\"edge_case_detection\">Edge Case Detection</option>\r\n                <option value=\"baseline_management\">Baseline Management</option>\r\n                <option value=\"sequence_monitoring\">Sequence Monitoring</option>\r\n                <option value=\"return_trip_validation\">Return Trip Validation</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Severity</label>\r\n              <select\r\n                value={searchFilters.severity_levels?.[0] || ''}\r\n                onChange={(e) => handleFilterChange('severity_levels', e.target.value ? [e.target.value] : undefined)}\r\n                className=\"w-full border rounded px-3 py-2\"\r\n              >\r\n                <option value=\"\">All Severities</option>\r\n                <option value=\"critical\">Critical</option>\r\n                <option value=\"error\">Error</option>\r\n                <option value=\"warning\">Warning</option>\r\n                <option value=\"info\">Info</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Entity Type</label>\r\n              <select\r\n                value={searchFilters.entity_types?.[0] || ''}\r\n                onChange={(e) => handleFilterChange('entity_types', e.target.value ? [e.target.value] : undefined)}\r\n                className=\"w-full border rounded px-3 py-2\"\r\n              >\r\n                <option value=\"\">All Entities</option>\r\n                <option value=\"trip\">Trip</option>\r\n                <option value=\"vehicle\">Vehicle</option>\r\n                <option value=\"driver\">Driver</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Search Text</label>\r\n              <input\r\n                type=\"text\"\r\n                value={searchFilters.search_text || ''}\r\n                onChange={(e) => handleFilterChange('search_text', e.target.value || undefined)}\r\n                placeholder=\"Search descriptions...\"\r\n                className=\"w-full border rounded px-3 py-2\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Audit Entries */}\r\n      <div className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-medium text-gray-900\">\r\n            Audit Entries ({totalEntries} total)\r\n          </h3>\r\n          <div className=\"text-sm text-gray-500\">\r\n            Showing {searchFilters.offset! + 1}-{Math.min(searchFilters.offset! + (searchFilters.limit || 50), totalEntries)} of {totalEntries}\r\n          </div>\r\n        </div>\r\n\r\n        {auditEntries.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n            <p className=\"text-gray-600\">No audit entries found</p>\r\n            <p className=\"text-sm text-gray-500 mt-1\">Try adjusting your filters or search criteria</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-3\">\r\n            {auditEntries.map((entry) => (\r\n              <div key={entry.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-700\">\r\n                      {getOperationIcon(entry.operation_type)}\r\n                      <span className=\"ml-2\">{formatOperationType(entry.operation_type)}</span>\r\n                    </span>\r\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(entry.severity_level || 'info')}`}>\r\n                      {getSeverityIcon(entry.severity_level || 'info')}\r\n                      <span className=\"ml-1\">{(entry.severity_level || 'info').toUpperCase()}</span>\r\n                    </span>\r\n                    {entry.confidence_score && (\r\n                      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700\">\r\n                        {entry.confidence_score}% confidence\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-500\">\r\n                    {entry.performed_at ? formatDate(entry.performed_at) : ''}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <div className=\"flex items-center justify-between mb-1\">\r\n                    <h4 className=\"font-medium text-gray-900\">\r\n                      {entry.entity_description || `${entry.entity_type} ${entry.entity_id}`}\r\n                    </h4>\r\n                    <div className=\"flex items-center text-sm text-gray-600\">\r\n                      <User className=\"h-3 w-3 mr-1\" />\r\n                      {entry.performer_name || 'System'}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n                    <span>Action: {entry.action_performed}</span>\r\n                    <span>Entity: {entry.entity_type}</span>\r\n                    <span>ID: {entry.entity_id}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {entry.business_context && (\r\n                  <div className=\"mb-3 p-2 bg-blue-50 rounded text-sm\">\r\n                    <span className=\"font-medium text-blue-800\">Context: </span>\r\n                    <span className=\"text-blue-700\">{entry.business_context}</span>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex space-x-4 text-xs text-gray-500\">\r\n                    <span>Category: {entry.operation_category}</span>\r\n                    {entry.data_quality_score && <span>Quality: {entry.data_quality_score}</span>}\r\n                    {entry.operation_duration_ms && <span>Duration: {entry.operation_duration_ms}ms</span>}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setSelectedEntry(selectedEntry?.id === entry.id ? null : entry)}\r\n                    className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                  >\r\n                    <Eye className=\"h-4 w-4 inline mr-1\" />\r\n                    {selectedEntry?.id === entry.id ? 'Hide Details' : 'View Details'}\r\n                  </button>\r\n                </div>\r\n\r\n                {selectedEntry?.id === entry.id && (\r\n                  <div className=\"mt-4 pt-4 border-t bg-gray-50 -mx-4 px-4 -mb-4 pb-4 rounded-b-lg\">\r\n                    {entry.changes_made && (\r\n                      <div className=\"mb-3\">\r\n                        <h5 className=\"font-medium text-gray-900 mb-2\">Changes Made:</h5>\r\n                        <pre className=\"text-xs bg-white p-2 rounded border overflow-x-auto\">\r\n                          {JSON.stringify(entry.changes_made, null, 2)}\r\n                        </pre>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {entry.validation_results && (\r\n                      <div>\r\n                        <h5 className=\"font-medium text-gray-900 mb-2\">Validation Results:</h5>\r\n                        <pre className=\"text-xs bg-white p-2 rounded border overflow-x-auto\">\r\n                          {JSON.stringify(entry.validation_results, null, 2)}\r\n                        </pre>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Pagination */}\r\n        {totalEntries > (searchFilters.limit || 50) && (\r\n          <div className=\"flex items-center justify-between mt-6\">\r\n            <button\r\n              onClick={() => handlePageChange(Math.max(0, searchFilters.offset! - (searchFilters.limit || 50)))}\r\n              disabled={searchFilters.offset === 0}\r\n              className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded disabled:opacity-50 hover:bg-gray-200\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <span className=\"text-sm text-gray-600\">\r\n              Page {Math.floor(searchFilters.offset! / (searchFilters.limit || 50)) + 1} of{' '}\r\n              {Math.ceil(totalEntries / (searchFilters.limit || 50))}\r\n            </span>\r\n            <button\r\n              onClick={() => handlePageChange(searchFilters.offset! + (searchFilters.limit || 50))}\r\n              disabled={searchFilters.offset! + (searchFilters.limit || 50) >= totalEntries}\r\n              className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded disabled:opacity-50 hover:bg-gray-200\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuditTrailDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\ConfirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\DataIntegrityDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\DestinationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\DriverProfileModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\EdgeCaseDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\ExportOptionsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\FuelBaselineDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\MaterialTypeManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\ReturnTripValidationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\SequenceMonitorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\TripsSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\TripsTable.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'driversById' and 'vehiclesById'. Either exclude them or remove the dependency array.","line":385,"column":5,"nodeType":"ArrayExpression","endLine":385,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [vehicleOptions, driverOptions]","fix":{"range":[10782,10840],"text":"[vehicleOptions, driverOptions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useRef, useEffect } from 'react';\r\nimport { Trip, Vehicle, Driver } from '@/types';\r\nimport { ChevronDown, ChevronUp, Trash2, IndianRupee } from 'lucide-react';\r\nimport Button from '../ui/Button';\r\nimport Input from '../ui/Input';\r\nimport Select from '../ui/Select';\r\nimport { format } from 'date-fns';\r\nimport { NumberFormatter } from '@/utils/numberFormatter';\r\n\r\ninterface Column {\r\n  id: string;\r\n  label: string;\r\n  accessor: (\r\n    trip: Trip,\r\n    vehiclesById: Record<string, Vehicle>,\r\n    driversById: Record<string, Driver>\r\n  ) => string | number;\r\n  sortable?: boolean;\r\n  editable?: boolean;\r\n  width?: string;\r\n  type?: 'text' | 'number' | 'date' | 'select';\r\n  options?: { value: string; label: string }[];\r\n  description?: string;\r\n}\r\n\r\ninterface TripsTableProps {\r\n  trips: Trip[];\r\n  vehicles: Vehicle[];\r\n  drivers: Driver[];\r\n  onUpdateTrip: (tripId: string, updates: Partial<Trip>) => void;\r\n  onDeleteTrip: (tripId: string) => Promise<void>;\r\n}\r\n\r\nconst TripsTable: React.FC<TripsTableProps> = ({\r\n  trips,\r\n  vehicles,\r\n  drivers,\r\n  onUpdateTrip,\r\n  onDeleteTrip\r\n}) => {\r\n  const vehiclesById = useMemo(() => {\r\n    const map: Record<string, Vehicle> = {};\r\n    (vehicles || []).forEach(v => {\r\n      map[v.id] = v;\r\n    });\r\n    return map;\r\n  }, [vehicles]);\r\n\r\n  const driversById = useMemo(() => {\r\n    const map: Record<string, Driver> = {};\r\n    (drivers || []).forEach(d => {\r\n      map[d.id] = d;\r\n    });\r\n    return map;\r\n  }, [drivers]);\r\n\r\n  const vehicleOptions = useMemo(\r\n    () =>\r\n      Object.values(vehiclesById).map(v => ({\r\n        value: v.id,\r\n        label: v.registration_number\r\n      })),\r\n    [vehiclesById]\r\n  );\r\n\r\n  const driverOptions = useMemo(\r\n    () =>\r\n      Object.values(driversById).map(d => ({\r\n        value: d.id,\r\n        label: d.name\r\n      })),\r\n    [driversById]\r\n  );\r\n\r\n  const columns: Column[] = useMemo(\r\n    () => [\r\n      {\r\n        id: 'trip_serial_number',\r\n        label: 'Trip ID',\r\n        accessor: trip => trip.trip_serial_number || '-',\r\n        sortable: true,\r\n        width: '120px',\r\n        description: 'Unique identifier for the trip'\r\n      },\r\n      {\r\n        id: 'vehicle',\r\n        label: 'Vehicle',\r\n        accessor: (trip, vehiclesById) =>\r\n          vehiclesById[trip.vehicle_id]?.registration_number || 'Unknown',\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'select',\r\n        options: vehicleOptions,\r\n        width: '120px',\r\n        description: 'Vehicle registration number'\r\n      },\r\n      {\r\n        id: 'driver',\r\n        label: 'Driver',\r\n        accessor: (trip, _vehiclesById, driversById) =>\r\n          driversById[trip.driver_id]?.name || 'Unknown',\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'select',\r\n        options: driverOptions,\r\n        width: '150px',\r\n        description: 'Driver name'\r\n      },\r\n      {\r\n        id: 'start_date',\r\n        label: 'Start Date',\r\n        accessor: trip => format(new Date(trip.trip_start_date), 'dd/MM/yyyy'),\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'date',\r\n        width: '100px',\r\n        description: 'Trip start date'\r\n      },\r\n      {\r\n        id: 'end_date',\r\n        label: 'End Date',\r\n        accessor: trip => format(new Date(trip.trip_end_date), 'dd/MM/yyyy'),\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'date',\r\n        width: '100px',\r\n        description: 'Trip end date'\r\n      },\r\n      {\r\n        id: 'start_km',\r\n        label: 'Start KM',\r\n        accessor: trip => trip.start_km || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Starting odometer reading'\r\n      },\r\n      {\r\n        id: 'end_km',\r\n        label: 'End KM',\r\n        accessor: trip => trip.end_km || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Ending odometer reading'\r\n      },\r\n      {\r\n        id: 'distance',\r\n        label: 'Distance',\r\n        accessor: trip => (trip.end_km || 0) - (trip.start_km || 0),\r\n        sortable: true,\r\n        width: '90px',\r\n        description: 'Total distance covered'\r\n      },\r\n      {\r\n        id: 'gross_weight',\r\n        label: 'Weight (kg)',\r\n        accessor: trip => trip.gross_weight || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Gross weight of cargo'\r\n      },\r\n      {\r\n        id: 'fuel_quantity',\r\n        label: 'Fuel (L)',\r\n        accessor: trip => trip.fuel_quantity || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '80px',\r\n        description: 'Fuel quantity in liters'\r\n      },\r\n      {\r\n        id: 'fuel_rate',\r\n        label: 'Fuel Rate',\r\n        accessor: trip => trip.fuel_rate_per_liter || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Fuel rate per liter'\r\n      },\r\n      {\r\n        id: 'total_fuel_cost',\r\n        label: 'Fuel Cost',\r\n        accessor: trip => trip.total_fuel_cost || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Total fuel cost'\r\n      },\r\n      {\r\n        id: 'mileage',\r\n        label: 'Mileage',\r\n        accessor: trip => trip.calculated_kmpl ? NumberFormatter.display(trip.calculated_kmpl, 2) : '-',\r\n        sortable: true,\r\n        width: '80px',\r\n        description: 'Fuel efficiency in km/L'\r\n      },\r\n      {\r\n        id: 'road_expenses',\r\n        label: 'Road Exp',\r\n        accessor: trip => trip.total_road_expenses || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Road expenses'\r\n      },\r\n      {\r\n        id: 'unloading_expense',\r\n        label: 'Unloading',\r\n        accessor: trip => trip.unloading_expense || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Unloading expense'\r\n      },\r\n      {\r\n        id: 'driver_expense',\r\n        label: 'Driver Exp',\r\n        accessor: trip => trip.driver_expense || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Driver expense'\r\n      },\r\n      {\r\n        id: 'rto_expense',\r\n        label: 'RTO Exp',\r\n        accessor: trip => trip.road_rto_expense || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '80px',\r\n        description: 'RTO expense'\r\n      },\r\n      {\r\n        id: 'breakdown_expense',\r\n        label: 'Breakdown',\r\n        accessor: trip => trip.breakdown_expense || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Breakdown expense'\r\n      },\r\n      {\r\n        id: 'misc_expense',\r\n        label: 'Misc Exp',\r\n        accessor: trip => trip.miscellaneous_expense || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '80px',\r\n        description: 'Miscellaneous expense'\r\n      },\r\n      {\r\n        id: 'total_expenses',\r\n        label: 'Total Exp',\r\n        accessor: trip => {\r\n          const fuel = trip.total_fuel_cost || 0;\r\n          const road = trip.total_road_expenses || 0;\r\n          const unloading = trip.unloading_expense || 0;\r\n          const driver = trip.driver_expense || 0;\r\n          const rto = trip.road_rto_expense || 0;\r\n          const breakdown = trip.breakdown_expense || 0;\r\n          const misc = trip.miscellaneous_expense || 0;\r\n          const total = fuel + road + unloading + driver + rto + breakdown + misc;\r\n          return NumberFormatter.roundUp(total, 2);\r\n        },\r\n        sortable: true,\r\n        width: '90px',\r\n        description: 'Total expenses'\r\n      },\r\n      {\r\n        id: 'freight_rate',\r\n        label: 'Freight Rate',\r\n        accessor: trip => trip.freight_rate || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '100px',\r\n        description: 'Freight rate'\r\n      },\r\n      {\r\n        id: 'billing_type',\r\n        label: 'Billing',\r\n        accessor: trip => trip.billing_type || '-',\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'select',\r\n        options: [\r\n          { value: 'per_km', label: 'Per KM' },\r\n          { value: 'per_ton', label: 'Per Ton' },\r\n          { value: 'manual', label: 'Manual' }\r\n        ],\r\n        width: '80px',\r\n        description: 'Billing type'\r\n      },\r\n      {\r\n        id: 'income_amount',\r\n        label: 'Income',\r\n        accessor: trip => trip.income_amount || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Income amount'\r\n      },\r\n      {\r\n        id: 'net_profit',\r\n        label: 'Net Profit',\r\n        accessor: trip => trip.net_profit || 0,\r\n        sortable: true,\r\n        width: '90px',\r\n        description: 'Net profit or loss'\r\n      },\r\n      {\r\n        id: 'profit_status',\r\n        label: 'Status',\r\n        accessor: trip => trip.profit_status || '-',\r\n        sortable: true,\r\n        width: '80px',\r\n        description: 'Profit status'\r\n      },\r\n      {\r\n        id: 'refueling_done',\r\n        label: 'Refuel',\r\n        accessor: trip => trip.refueling_done ? 'Yes' : 'No',\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'select',\r\n        options: [\r\n          { value: 'true', label: 'Yes' },\r\n          { value: 'false', label: 'No' }\r\n        ],\r\n        width: '70px',\r\n        description: 'Refueling done'\r\n      },\r\n      {\r\n        id: 'is_return_trip',\r\n        label: 'Return',\r\n        accessor: trip => trip.is_return_trip ? 'Yes' : 'No',\r\n        sortable: true,\r\n        width: '70px',\r\n        description: 'Return trip'\r\n      },\r\n      {\r\n        id: 'route_deviation',\r\n        label: 'Deviation',\r\n        accessor: trip => trip.route_deviation || 0,\r\n        sortable: true,\r\n        width: '90px',\r\n        description: 'Route deviation'\r\n      },\r\n      {\r\n        id: 'advance_amount',\r\n        label: 'Advance',\r\n        accessor: trip => trip.advance_amount || 0,\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'number',\r\n        width: '90px',\r\n        description: 'Advance amount'\r\n      },\r\n      {\r\n        id: 'remarks',\r\n        label: 'Remarks',\r\n        accessor: trip => trip.remarks || '-',\r\n        sortable: true,\r\n        editable: true,\r\n        type: 'text',\r\n        width: '150px',\r\n        description: 'Trip remarks'\r\n      }\r\n    ],\r\n    [vehicleOptions, driverOptions, vehiclesById, driversById]\r\n  );\r\n\r\n  const [sortConfig, setSortConfig] = useState<{\r\n    key: string;\r\n    direction: 'asc' | 'desc';\r\n  } | null>(null);\r\n\r\n  const [editingCell, setEditingCell] = useState<{\r\n    tripId: string;\r\n    columnId: string;\r\n  } | null>(null);\r\n\r\n  // Pagination state\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const rowsPerPage = 10;\r\n  \r\n  // Add ref for scrollable container\r\n  const tableContainerRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Handle scroll detection for indicator\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (!tableContainerRef.current) return;\r\n      \r\n      const { scrollLeft, scrollWidth, clientWidth } = tableContainerRef.current;\r\n      \r\n      // Check if scrolled at all\r\n      if (scrollLeft > 0) {\r\n        tableContainerRef.current.classList.add('scrolled-right');\r\n      } else {\r\n        tableContainerRef.current.classList.remove('scrolled-right');\r\n      }\r\n    };\r\n    \r\n    const tableContainer = tableContainerRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener('scroll', handleScroll);\r\n    }\r\n    \r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener('scroll', handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sortedTrips = useMemo(() => {\r\n    if (!sortConfig) return trips;\r\n\r\n    return [...trips].sort((a, b) => {\r\n      const column = columns.find(col => col.id === sortConfig.key);\r\n      if (!column) return 0;\r\n\r\n      const aValue = column.accessor(a, vehiclesById, driversById);\r\n      const bValue = column.accessor(b, vehiclesById, driversById);\r\n\r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        return sortConfig.direction === 'asc'\r\n          ? aValue.localeCompare(bValue)\r\n          : bValue.localeCompare(aValue);\r\n      }\r\n\r\n      return sortConfig.direction === 'asc'\r\n        ? Number(aValue) - Number(bValue)\r\n        : Number(bValue) - Number(aValue);\r\n    });\r\n  }, [trips, sortConfig, columns, vehiclesById, driversById]);\r\n\r\n  const paginatedTrips = useMemo(() => {\r\n    const start = (currentPage - 1) * rowsPerPage;\r\n    return sortedTrips.slice(start, start + rowsPerPage);\r\n  }, [sortedTrips, currentPage]);\r\n\r\n  const totalPages = Math.ceil(sortedTrips.length / rowsPerPage) || 1;\r\n\r\n  const handleSort = (columnId: string) => {\r\n    setSortConfig(current => {\r\n      if (!current || current.key !== columnId) {\r\n        return { key: columnId, direction: 'asc' };\r\n      }\r\n      if (current.direction === 'asc') {\r\n        return { key: columnId, direction: 'desc' };\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  const handleCellEdit = (tripId: string, columnId: string, value: any) => {\r\n    const updates: Partial<Trip> = {};\r\n    \r\n    switch (columnId) {\r\n      case 'vehicle':\r\n        updates.vehicle_id = value;\r\n        break;\r\n      case 'driver':\r\n        updates.driver_id = value;\r\n        break;\r\n      case 'start_date':\r\n        updates.trip_start_date = value;\r\n        break;\r\n      case 'end_date':\r\n        updates.trip_end_date = value;\r\n        break;\r\n      case 'start_km':\r\n        updates.start_km = Number(value);\r\n        break;\r\n      case 'end_km':\r\n        updates.end_km = Number(value);\r\n        break;\r\n    }\r\n\r\n    onUpdateTrip(tripId, updates);\r\n    setEditingCell(null);\r\n  };\r\n\r\n  const handleDeleteTrip = async (tripId: string) => {\r\n    if (window.confirm('Are you sure you want to permanently delete this trip? This action cannot be undone.')) {\r\n      await onDeleteTrip(tripId);\r\n    }\r\n  };\r\n\r\n  // Function to get profit/loss cell style\r\n  const getProfitLossStyle = (value: number) => {\r\n    if (value > 0) return 'text-success-600 font-medium';\r\n    if (value < 0) return 'text-error-600 font-medium';\r\n    return 'text-gray-500';\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n        <div \r\n          className=\"overflow-x-auto scroll-indicator\" \r\n          ref={tableContainerRef}\r\n          style={{\r\n            scrollbarWidth: 'thin',\r\n            scrollbarColor: '#cbd5e0 #f7fafc'\r\n          }}\r\n        >\r\n          <table className=\"min-w-full divide-y divide-gray-200\" style={{ minWidth: '2000px' }}>\r\n            <thead className=\"bg-gray-50 sticky top-0 z-10\">\r\n              <tr>\r\n                {columns.map(column => (\r\n                  <th\r\n                    key={column.id}\r\n                    className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                    onClick={() => column.sortable && handleSort(column.id)}\r\n                    style={{ \r\n                      cursor: column.sortable ? 'pointer' : 'default',\r\n                      width: column.width,\r\n                      minWidth: column.width\r\n                    }}\r\n                  >\r\n                    <div className=\"flex items-center space-x-1\">\r\n                      <span className=\"truncate\">{column.label}</span>\r\n                      {column.sortable && sortConfig?.key === column.id && (\r\n                        sortConfig.direction === 'asc' ? (\r\n                          <ChevronUp className=\"h-3 w-3 flex-shrink-0\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"h-3 w-3 flex-shrink-0\" />\r\n                        )\r\n                      )}\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n                <th className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-20\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {sortedTrips.length > 0 ? (\r\n                paginatedTrips.map(trip => (\r\n                  <tr key={trip.id} className=\"hover:bg-gray-50\">\r\n                    {columns.map(column => (\r\n                      <td\r\n                        key={`${trip.id}-${column.id}`}\r\n                        className=\"px-3 py-2 whitespace-nowrap text-xs\"\r\n                        onClick={() => column.editable && setEditingCell({\r\n                          tripId: trip.id,\r\n                          columnId: column.id\r\n                        })}\r\n                        style={{ width: column.width, minWidth: column.width }}\r\n                      >\r\n                        {editingCell?.tripId === trip.id && \r\n                         editingCell?.columnId === column.id ? (\r\n                          column.type === 'select' ? (\r\n                            <Select\r\n                              options={column.options || []}\r\n                              value={column.id === 'vehicle' ? trip.vehicle_id : trip.driver_id}\r\n                              onChange={e => handleCellEdit(trip.id, column.id, e.target.value)}\r\n                              autoFocus\r\n                            />\r\n                          ) : (\r\n                            <Input\r\n                              type={column.type || 'text'}\r\n                              value={column.accessor(trip, vehiclesById, driversById).toString()}\r\n                              onChange={e => handleCellEdit(trip.id, column.id, e.target.value)}\r\n                              autoFocus\r\n                              onBlur={() => setEditingCell(null)}\r\n                            />\r\n                          )\r\n                        ) : column.id === 'profit_loss' ? (\r\n                          <div className=\"flex items-center\">\r\n                            <IndianRupee className=\"h-4 w-4 mr-1 text-gray-400\" />\r\n                            <span className={getProfitLossStyle(trip.net_profit || 0)}>\r\n                              {trip.net_profit ? trip.net_profit.toLocaleString() : '0'}\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                          <span className={column.editable ? 'cursor-pointer' : ''}>\r\n                            {column.accessor(trip, vehiclesById, driversById)}\r\n                          </span>\r\n                        )}\r\n                      </td>\r\n                    ))}\r\n                    <td className=\"px-3 py-2 whitespace-nowrap text-center w-20\">\r\n                      <button\r\n                        onClick={() => handleDeleteTrip(trip.id)}\r\n                        className=\"text-error-600 hover:text-error-900\"\r\n                        title=\"Delete Trip\"\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={columns.length + 1} className=\"px-3 py-10 text-center text-gray-500\">\r\n                    No trips match your filter criteria\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"flex items-center justify-between p-4 border-t\">\r\n          <span className=\"text-sm text-gray-700\">\r\n            Page {currentPage} of {totalPages}\r\n          </span>\r\n          <div className=\"space-x-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={() => setCurrentPage(p => Math.max(p - 1, 1))}\r\n              disabled={currentPage === 1}\r\n            >\r\n              Previous\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))}\r\n              disabled={currentPage === totalPages}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TripsTable;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\VehicleActivityLogTable.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [vehicleId, limit, refreshTrigger, fetchLogs]","fix":{"range":[2749,2783],"text":"[vehicleId, limit, refreshTrigger, fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { getVehicles } from '../../utils/storage';\r\nimport { getAllVehicleActivityLogs, VehicleActivityLog } from '../../utils/vehicleActivity';\r\nimport { Clock, UserCircle, Truck, Filter, Search, RefreshCw } from 'lucide-react';\r\nimport Select from '../ui/Select';\r\nimport Input from '../ui/Input';\r\nimport Button from '../ui/Button';\r\nimport { format, isValid } from 'date-fns';\r\n\r\ninterface VehicleActivityLogTableProps {\r\n  limit?: number;\r\n  vehicleId?: string;\r\n  refreshTrigger?: number;\r\n}\r\n\r\ninterface VehicleActivityLogWithVehicle extends VehicleActivityLog {\r\n  vehicles: {\r\n    registration_number: string;\r\n  };\r\n}\r\n\r\nconst VehicleActivityLogTable: React.FC<VehicleActivityLogTableProps> = ({ \r\n  limit,\r\n  vehicleId,\r\n  refreshTrigger = 0\r\n}) => {\r\n  const [logs, setLogs] = useState<VehicleActivityLogWithVehicle[]>([]);\r\n  const [vehicles, setVehicles] = useState<{ id: string; registration_number: string }[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [filters, setFilters] = useState({\r\n    actionType: '',\r\n    vehicleFilter: vehicleId || '',\r\n    search: ''\r\n  });\r\n\r\n  const fetchLogs = async () => {\r\n    setLoading(true);\r\n    try {\r\n      let fetchedLogs;\r\n      if (vehicleId) {\r\n        // If vehicleId is provided, only fetch logs for that vehicle\r\n        const vehicleLogs = await getAllVehicleActivityLogs();\r\n        fetchedLogs = vehicleLogs.filter(log => log.vehicle_id === vehicleId) as VehicleActivityLogWithVehicle[];\r\n        \r\n        // Add vehicle registration info\r\n        const vehicle = await getVehicles();\r\n        const vehicleMap = new Map(vehicle.map(v => [v.id, v]));\r\n        \r\n        fetchedLogs = fetchedLogs.map(log => ({\r\n          ...log,\r\n          vehicles: {\r\n            registration_number: vehicleMap.get(log.vehicle_id)?.registration_number || 'Unknown'\r\n          }\r\n        }));\r\n      } else {\r\n        // Otherwise fetch all logs with vehicle info\r\n        fetchedLogs = await getAllVehicleActivityLogs(limit) as VehicleActivityLogWithVehicle[];\r\n      }\r\n      \r\n      setLogs(fetchedLogs);\r\n    } catch (error) {\r\n      console.error('Error fetching vehicle activity logs:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchVehicles = async () => {\r\n    try {\r\n      const vehiclesData = await getVehicles();\r\n      setVehicles(\r\n        vehiclesData.map(vehicle => ({\r\n          id: vehicle.id,\r\n          registration_number: vehicle.registration_number\r\n        }))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching vehicles:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLogs();\r\n    if (!vehicleId) {\r\n      fetchVehicles();\r\n    }\r\n  }, [vehicleId, limit, refreshTrigger]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchLogs();\r\n  };\r\n\r\n  // Filter logs based on current filters\r\n  const filteredLogs = logs.filter(log => {\r\n    if (filters.actionType && log.action_type !== filters.actionType) {\r\n      return false;\r\n    }\r\n    \r\n    if (filters.vehicleFilter && log.vehicle_id !== filters.vehicleFilter) {\r\n      return false;\r\n    }\r\n    \r\n    if (filters.search) {\r\n      const searchTerm = filters.search.toLowerCase();\r\n      return (\r\n        log.action_by?.toLowerCase().includes(searchTerm) ||\r\n        log.notes?.toLowerCase().includes(searchTerm) ||\r\n        log.action_type.toLowerCase().includes(searchTerm) ||\r\n        log.vehicles?.registration_number.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n    \r\n    return true;\r\n  });\r\n\r\n  const formatDate = (dateString?: string) => {\r\n    if (!dateString) return 'N/A';\r\n    \r\n    try {\r\n      const date = new Date(dateString);\r\n      if (!isValid(date)) return 'Invalid Date';\r\n      \r\n      return format(date, 'dd MMM yyyy, HH:mm');\r\n    } catch (error) {\r\n      return 'Invalid Date';\r\n    }\r\n  };\r\n\r\n  const getActionTypeColor = (actionType: string) => {\r\n    switch (actionType) {\r\n      case 'deleted':\r\n      case 'permanently_deleted':\r\n        return 'bg-error-100 text-error-800';\r\n      case 'archived':\r\n        return 'bg-warning-100 text-warning-800';\r\n      case 'assigned_driver':\r\n        return 'bg-success-100 text-success-800';\r\n      case 'unassigned_driver':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'exported':\r\n        return 'bg-indigo-100 text-indigo-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const formatActionType = (actionType: string) => {\r\n    return actionType\r\n      .split('_')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n      <div className=\"p-4 border-b border-gray-200\">\r\n        <h3 className=\"text-lg font-medium text-gray-900\">Vehicle Activity Log</h3>\r\n        <p className=\"mt-1 text-sm text-gray-500\">\r\n          Track all changes to vehicles including deletions, archiving, and driver assignments\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"p-4 border-b border-gray-200 space-y-4\">\r\n        <div className=\"flex flex-wrap gap-3\">\r\n          {!vehicleId && (\r\n            <div className=\"w-60\">\r\n              <Select\r\n                label=\"Vehicle\"\r\n                options={[\r\n                  { value: '', label: 'All Vehicles' },\r\n                  ...vehicles.map(v => ({ \r\n                    value: v.id, \r\n                    label: v.registration_number \r\n                  }))\r\n                ]}\r\n                value={filters.vehicleFilter}\r\n                onChange={e => setFilters({ ...filters, vehicleFilter: e.target.value })}\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"w-60\">\r\n            <Select\r\n              label=\"Action Type\"\r\n              options={[\r\n                { value: '', label: 'All Actions' },\r\n                { value: 'deleted', label: 'Deleted' },\r\n                { value: 'archived', label: 'Archived' },\r\n                { value: 'assigned_driver', label: 'Driver Assigned' },\r\n                { value: 'unassigned_driver', label: 'Driver Unassigned' },\r\n                { value: 'updated', label: 'Updated' },\r\n                { value: 'exported', label: 'Exported' },\r\n                { value: 'permanently_deleted', label: 'Permanently Deleted' }\r\n              ]}\r\n              value={filters.actionType}\r\n              onChange={e => setFilters({ ...filters, actionType: e.target.value })}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex-1 min-w-[200px]\">\r\n            <Input\r\n              label=\"Search\"\r\n              placeholder=\"Search by user or notes...\"\r\n              icon={<Search className=\"h-4 w-4\" />}\r\n              value={filters.search}\r\n              onChange={e => setFilters({ ...filters, search: e.target.value })}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex items-end\">\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={handleRefresh}\r\n              icon={<RefreshCw className=\"h-4 w-4\" />}\r\n              isLoading={loading}\r\n            >\r\n              Refresh\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"overflow-x-auto scroll-indicator\">\r\n        <table className=\"min-w-full divide-y divide-gray-200\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              {!vehicleId && (\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Vehicle\r\n                </th>\r\n              )}\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Action\r\n              </th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                User\r\n              </th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Timestamp\r\n              </th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Notes\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-white divide-y divide-gray-200\">\r\n            {loading ? (\r\n              <tr>\r\n                <td colSpan={vehicleId ? 4 : 5} className=\"px-6 py-4 whitespace-nowrap\">\r\n                  <div className=\"flex justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary-600\"></div>\r\n                    <span className=\"ml-2\">Loading...</span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ) : filteredLogs.length === 0 ? (\r\n              <tr>\r\n                <td colSpan={vehicleId ? 4 : 5} className=\"px-6 py-4 whitespace-nowrap text-center text-gray-500\">\r\n                  No activity logs found\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              filteredLogs.map(log => (\r\n                <tr key={log.id} className=\"hover:bg-gray-50\">\r\n                  {!vehicleId && (\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        <Truck className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n                        <span className=\"text-sm font-medium text-gray-900\">\r\n                          {log.vehicles?.registration_number || 'Unknown'}\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={`px-2 py-1 inline-flex text-xs leading-5 font-medium rounded-full ${getActionTypeColor(log.action_type)}`}>\r\n                      {formatActionType(log.action_type)}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"flex items-center\">\r\n                      <UserCircle className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n                      <span className=\"text-sm text-gray-500\">{log.action_by}</span>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"flex items-center\">\r\n                      <Clock className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n                      <span className=\"text-sm text-gray-500\">{formatDate(log.timestamp)}</span>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-normal\">\r\n                    <p className=\"text-sm text-gray-500 max-w-sm\">{log.notes || '-'}</p>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n      {limit && filteredLogs.length >= limit && (\r\n        <div className=\"p-4 text-center\">\r\n          <p className=\"text-sm text-gray-500\">\r\n            Showing {limit} most recent logs. There may be more records available.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VehicleActivityLogTable;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\VehicleProfileModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\WarehouseForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\reminders\\AddTemplateForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\reminders\\ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\reminders\\ContactList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\reminders\\ReminderManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\admin\\reminders\\TemplateTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ai\\DriverAIInsights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\alerts\\AlertActionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\alerts\\AlertDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\alerts\\AlertSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\alerts\\AlertTypeTag.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\CostAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\DriverPerformance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\FuelEfficiencyChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\PredictiveMaintenance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\RealTimeAnalytics.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'drivers'. Either exclude it or remove the dependency array.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [trips, vehicles, selectedTimeframe]","fix":{"range":[6215,6260],"text":"[trips, vehicles, selectedTimeframe]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { \r\n  TrendingUp, \r\n  TrendingDown, \r\n  Activity, \r\n  AlertTriangle, \r\n  CheckCircle,\r\n  Clock,\r\n  Fuel,\r\n  MapPin,\r\n  Users,\r\n  Truck\r\n} from 'lucide-react';\r\nimport { Trip, Vehicle, Driver } from '@/types';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { getTrips, getVehicles } from '../../utils/storage';\r\nimport { getDrivers } from '../../utils/api/drivers';\r\n\r\ninterface RealTimeMetrics {\r\n  activeTrips: number;\r\n  vehiclesInUse: number;\r\n  driversOnDuty: number;\r\n  totalDistanceToday: number;\r\n  fuelConsumedToday: number;\r\n  averageMileage: number;\r\n  alertsCount: number;\r\n  maintenanceDue: number;\r\n}\r\n\r\ninterface TrendData {\r\n  period: string;\r\n  value: number;\r\n  change: number;\r\n  changeType: 'increase' | 'decrease' | 'stable';\r\n}\r\n\r\ninterface PredictiveInsight {\r\n  type: 'maintenance' | 'fuel' | 'route' | 'driver' | 'vehicle';\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  impact: 'low' | 'medium' | 'high';\r\n  recommendation: string;\r\n  timeframe: string;\r\n}\r\n\r\ninterface DuplicateRouteSummary {\r\n  route: string;\r\n  count: number;\r\n}\r\n\r\nconst RealTimeAnalytics: React.FC = () => {\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'1h' | '6h' | '24h' | '7d'>('24h');\r\n\r\n  // Helper functions - moved before their usage to avoid hoisting issues\r\n  const getTimeframeMs = (timeframe: string): number => {\r\n    switch (timeframe) {\r\n      case '1h': return 60 * 60 * 1000;\r\n      case '6h': return 6 * 60 * 60 * 1000;\r\n      case '24h': return 24 * 60 * 60 * 1000;\r\n      case '7d': return 7 * 24 * 60 * 60 * 1000;\r\n      default: return 24 * 60 * 60 * 1000;\r\n    }\r\n  };\r\n\r\n  const getTimeframePeriods = (timeframe: string) => {\r\n    const now = new Date();\r\n    switch (timeframe) {\r\n      case '1h':\r\n        return [\r\n          { label: 'Now', offset: 0, duration: 10 * 60 * 1000 },\r\n          { label: '10m ago', offset: 10 * 60 * 1000, duration: 10 * 60 * 1000 },\r\n          { label: '20m ago', offset: 20 * 60 * 1000, duration: 10 * 60 * 1000 },\r\n          { label: '30m ago', offset: 30 * 60 * 1000, duration: 10 * 60 * 1000 },\r\n          { label: '40m ago', offset: 40 * 60 * 1000, duration: 10 * 60 * 1000 },\r\n          { label: '50m ago', offset: 50 * 60 * 1000, duration: 10 * 60 * 1000 }\r\n        ];\r\n      case '6h':\r\n        return [\r\n          { label: 'Now', offset: 0, duration: 60 * 60 * 1000 },\r\n          { label: '1h ago', offset: 60 * 60 * 1000, duration: 60 * 60 * 1000 },\r\n          { label: '2h ago', offset: 2 * 60 * 60 * 1000, duration: 60 * 60 * 1000 },\r\n          { label: '3h ago', offset: 3 * 60 * 60 * 1000, duration: 60 * 60 * 1000 },\r\n          { label: '4h ago', offset: 4 * 60 * 60 * 1000, duration: 60 * 60 * 1000 },\r\n          { label: '5h ago', offset: 5 * 60 * 60 * 1000, duration: 60 * 60 * 1000 }\r\n        ];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  // Update time every minute\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 60000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  // Fetch data with React Query\r\n  const { data: trips = [], isLoading: tripsLoading } = useQuery({\r\n    queryKey: ['trips'],\r\n    queryFn: getTrips,\r\n    refetchInterval: 30000, // Refetch every 30 seconds\r\n  });\r\n\r\n  const { data: vehicles = [], isLoading: vehiclesLoading } = useQuery({\r\n    queryKey: ['vehicles'],\r\n    queryFn: getVehicles,\r\n    refetchInterval: 60000, // Refetch every minute\r\n  });\r\n\r\n  const { data: drivers = [], isLoading: driversLoading } = useQuery({\r\n    queryKey: ['drivers'],\r\n    queryFn: getDrivers,\r\n    refetchInterval: 60000, // Refetch every minute\r\n  });\r\n\r\n  const loading = tripsLoading || vehiclesLoading || driversLoading;\r\n\r\n  // Calculate real-time metrics\r\n  const realTimeMetrics = useMemo((): RealTimeMetrics => {\r\n    const now = new Date();\r\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n    const timeframeStart = new Date(now.getTime() - getTimeframeMs(selectedTimeframe));\r\n\r\n    // Active trips (currently in progress)\r\n    const activeTrips = trips.filter(trip => {\r\n      const startDate = new Date(trip.trip_start_date);\r\n      const endDate = new Date(trip.trip_end_date);\r\n      return startDate <= now && endDate >= now;\r\n    }).length;\r\n\r\n    // Vehicles in use\r\n    const vehiclesInUse = new Set(\r\n      trips\r\n        .filter(trip => {\r\n          const startDate = new Date(trip.trip_start_date);\r\n          const endDate = new Date(trip.trip_end_date);\r\n          return startDate <= now && endDate >= now;\r\n        })\r\n        .map(trip => trip.vehicle_id)\r\n    ).size;\r\n\r\n    // Drivers on duty\r\n    const driversOnDuty = new Set(\r\n      trips\r\n        .filter(trip => {\r\n          const startDate = new Date(trip.trip_start_date);\r\n          const endDate = new Date(trip.trip_end_date);\r\n          return startDate <= now && endDate >= now;\r\n        })\r\n        .map(trip => trip.driver_id)\r\n    ).size;\r\n\r\n    // Today's metrics\r\n    const todayTrips = trips.filter(trip => {\r\n      const tripDate = new Date(trip.trip_start_date);\r\n      return tripDate >= today;\r\n    });\r\n\r\n    const totalDistanceToday = todayTrips.reduce((sum, trip) => \r\n      sum + (trip.end_km - trip.start_km), 0\r\n    );\r\n\r\n    const fuelConsumedToday = todayTrips.reduce((sum, trip) => \r\n      sum + (trip.fuel_quantity || 0), 0\r\n    );\r\n\r\n    const tripsWithMileage = todayTrips.filter(trip => trip.calculated_kmpl && trip.calculated_kmpl > 0);\r\n    const averageMileage = tripsWithMileage.length > 0\r\n      ? tripsWithMileage.reduce((sum, trip) => sum + (trip.calculated_kmpl || 0), 0) / tripsWithMileage.length\r\n      : 0;\r\n\r\n    // Alerts and maintenance (simplified)\r\n    const alertsCount = 0; // Would be calculated from actual alerts\r\n    const maintenanceDue = vehicles.filter(v => v.status === 'maintenance').length;\r\n\r\n    return {\r\n      activeTrips,\r\n      vehiclesInUse,\r\n      driversOnDuty,\r\n      totalDistanceToday,\r\n      fuelConsumedToday,\r\n      averageMileage,\r\n      alertsCount,\r\n      maintenanceDue\r\n    };\r\n  }, [trips, vehicles, drivers, selectedTimeframe]);\r\n\r\n  // Calculate trends\r\n  const trends = useMemo((): TrendData[] => {\r\n    const now = new Date();\r\n    const periods = getTimeframePeriods(selectedTimeframe);\r\n    \r\n    return periods.map(period => {\r\n      const periodStart = new Date(now.getTime() - period.offset);\r\n      const periodEnd = new Date(now.getTime() - (period.offset - period.duration));\r\n      \r\n      const periodTrips = trips.filter(trip => {\r\n        const tripDate = new Date(trip.trip_start_date);\r\n        return tripDate >= periodStart && tripDate < periodEnd;\r\n      });\r\n\r\n      const distance = periodTrips.reduce((sum, trip) => sum + (trip.end_km - trip.start_km), 0);\r\n      \r\n      return {\r\n        period: period.label,\r\n        value: distance,\r\n        change: 0, // Would calculate actual change\r\n        changeType: 'stable' as const\r\n      };\r\n    });\r\n  }, [trips, selectedTimeframe]);\r\n\r\n  // Generate predictive insights\r\n  const predictiveInsights = useMemo((): PredictiveInsight[] => {\r\n    const insights: PredictiveInsight[] = [];\r\n\r\n    // Maintenance insights\r\n    const vehiclesNeedingMaintenance = vehicles.filter(v => {\r\n      // Simplified logic - would use actual maintenance data\r\n      return v.current_odometer > 100000;\r\n    });\r\n\r\n    if (vehiclesNeedingMaintenance.length > 0) {\r\n      insights.push({\r\n        type: 'maintenance',\r\n        title: 'Maintenance Due Soon',\r\n        description: `${vehiclesNeedingMaintenance.length} vehicles approaching maintenance intervals`,\r\n        confidence: 85,\r\n        impact: 'medium',\r\n        recommendation: 'Schedule preventive maintenance to avoid breakdowns',\r\n        timeframe: 'Next 2 weeks'\r\n      });\r\n    }\r\n\r\n    // Fuel efficiency insights\r\n    const lowEfficiencyTrips = trips.filter(trip => \r\n      trip.calculated_kmpl && trip.calculated_kmpl < 3.0\r\n    );\r\n\r\n    if (lowEfficiencyTrips.length > 5) {\r\n      insights.push({\r\n        type: 'fuel',\r\n        title: 'Fuel Efficiency Alert',\r\n        description: 'Multiple trips showing below-average fuel efficiency',\r\n        confidence: 75,\r\n        impact: 'high',\r\n        recommendation: 'Review driving patterns and vehicle maintenance',\r\n        timeframe: 'Immediate attention'\r\n      });\r\n    }\r\n\r\n    // Route optimization insights\r\n    const duplicateRoutes = findDuplicateRoutes(trips);\r\n    if (duplicateRoutes.length > 0) {\r\n      insights.push({\r\n        type: 'route',\r\n        title: 'Route Optimization Opportunity',\r\n        description: 'Multiple vehicles traveling similar routes',\r\n        confidence: 90,\r\n        impact: 'medium',\r\n        recommendation: 'Consider route consolidation to reduce costs',\r\n        timeframe: 'Next planning cycle'\r\n      });\r\n    }\r\n\r\n    return insights;\r\n  }, [trips, vehicles]);\r\n\r\n  function findDuplicateRoutes(trips: Trip[]): DuplicateRouteSummary[] {\r\n    const routeMap = new Map<string, DuplicateRouteSummary>();\r\n    trips.forEach(trip => {\r\n      const key = `${trip.destination}-${trip.warehouse_id}`;\r\n      const existing = routeMap.get(key);\r\n      if (existing) {\r\n        existing.count += 1;\r\n      } else {\r\n        routeMap.set(key, { route: key, count: 1 });\r\n      }\r\n    });\r\n    return Array.from(routeMap.values()).filter(route => route.count > 1);\r\n  }\r\n\r\n  const getInsightIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'maintenance': return <Truck className=\"h-5 w-5\" />;\r\n      case 'fuel': return <Fuel className=\"h-5 w-5\" />;\r\n      case 'route': return <MapPin className=\"h-5 w-5\" />;\r\n      case 'driver': return <Users className=\"h-5 w-5\" />;\r\n      case 'vehicle': return <Truck className=\"h-5 w-5\" />;\r\n      default: return <Activity className=\"h-5 w-5\" />;\r\n    }\r\n  };\r\n\r\n  const getInsightColor = (impact: string) => {\r\n    switch (impact) {\r\n      case 'high': return 'text-red-600 bg-red-50 border-red-200';\r\n      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n      case 'low': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n            Real-Time Analytics\r\n          </h2>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Live fleet monitoring and insights\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n            Last updated: {currentTime.toLocaleTimeString()}\r\n          </div>\r\n          <div className=\"flex space-x-2\">\r\n            {(['1h', '6h', '24h', '7d'] as const).map((timeframe) => (\r\n              <button\r\n                key={timeframe}\r\n                onClick={() => setSelectedTimeframe(timeframe)}\r\n                className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\r\n                  selectedTimeframe === timeframe\r\n                    ? 'bg-primary-100 text-primary-800'\r\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                {timeframe}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Real-time Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Trips</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                {realTimeMetrics.activeTrips}\r\n              </p>\r\n            </div>\r\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900/20 rounded-full\">\r\n              <Activity className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\r\n            </div>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n            Currently in progress\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Vehicles in Use</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                {realTimeMetrics.vehiclesInUse}\r\n              </p>\r\n            </div>\r\n            <div className=\"p-3 bg-green-100 dark:bg-green-900/20 rounded-full\">\r\n              <Truck className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\r\n            </div>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n            {((realTimeMetrics.vehiclesInUse / vehicles.length) * 100).toFixed(1)}% utilization\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Drivers on Duty</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                {realTimeMetrics.driversOnDuty}\r\n              </p>\r\n            </div>\r\n            <div className=\"p-3 bg-purple-100 dark:bg-purple-900/20 rounded-full\">\r\n              <Users className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\r\n            </div>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n            Active drivers\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Distance Today</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                {realTimeMetrics.totalDistanceToday.toLocaleString()}\r\n              </p>\r\n            </div>\r\n            <div className=\"p-3 bg-orange-100 dark:bg-orange-900/20 rounded-full\">\r\n              <MapPin className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\r\n            </div>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n            Kilometers traveled\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Predictive Insights */}\r\n      {predictiveInsights.length > 0 && (\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n              Predictive Insights\r\n            </h3>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              AI-powered recommendations based on current data patterns\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"p-6 space-y-4\">\r\n            {predictiveInsights.map((insight, index) => (\r\n              <div\r\n                key={index}\r\n                className={`p-4 rounded-lg border ${getInsightColor(insight.impact)}`}\r\n              >\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-start space-x-3\">\r\n                    <div className=\"flex-shrink-0\">\r\n                      {getInsightIcon(insight.type)}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium\">{insight.title}</h4>\r\n                      <p className=\"text-sm mt-1 opacity-90\">{insight.description}</p>\r\n                      <p className=\"text-sm mt-2 font-medium\">\r\n                        <strong>Recommendation:</strong> {insight.recommendation}\r\n                      </p>\r\n                      <p className=\"text-xs mt-1 opacity-75\">\r\n                        Timeframe: {insight.timeframe}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex flex-col items-end space-y-1\">\r\n                    <span className=\"text-xs font-medium\">\r\n                      {insight.confidence}% confidence\r\n                    </span>\r\n                    <span className=\"text-xs px-2 py-1 rounded-full bg-white/50\">\r\n                      {insight.impact} impact\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Trends Chart Placeholder */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">\r\n          Activity Trends ({selectedTimeframe})\r\n        </h3>\r\n        <div className=\"h-64 flex items-center justify-center text-gray-500 dark:text-gray-400\">\r\n          <div className=\"text-center\">\r\n            <TrendingUp className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\r\n            <p>Trend visualization would be implemented here</p>\r\n            <p className=\"text-sm\">Using a charting library like Recharts or Chart.js</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RealTimeAnalytics;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\RouteAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\analytics\\VehicleHealthScore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\auth\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\auth\\RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\auth\\SmartRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\DashboardSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\DashboardTip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\EnhancedMileageChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getAnomalyMessage' function makes the dependencies of useMemo Hook (at line 274) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'getAnomalyMessage' in its own useCallback() Hook.","line":225,"column":9,"nodeType":"VariableDeclarator","endLine":238,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';\r\nimport { Filter, Calendar, TrendingUp, AlertTriangle, Download, ChevronDown, ExternalLink } from 'lucide-react';\r\nimport { Trip, Vehicle } from '@/types';\r\nimport { format, subDays, isAfter, isBefore, parseISO, startOfDay, endOfDay } from 'date-fns';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { supabase } from '@/utils/supabaseClient';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\ninterface EnhancedMileageChartProps {\r\n  trips: Trip[];\r\n  vehicles: Vehicle[];\r\n}\r\n\r\ninterface Anomaly {\r\n  trip_id: string;\r\n  trip_serial_number: string;\r\n  vehicle_registration: string;\r\n  date: string;\r\n  mileage: number;\r\n  distance: number;\r\n  fuel: number;\r\n  issues: Array<{\r\n    type: string;\r\n    severity: 'critical' | 'high' | 'medium';\r\n    message: string;\r\n  }>;\r\n}\r\n\r\n// Client-side enhanced anomaly detection with more sensitive criteria\r\nconst detectClientSideAnomalies = (trips: Trip[], vehicles: Vehicle[]) => {\r\n  const anomalies: any[] = [];\r\n  \r\n  trips.forEach(trip => {\r\n    const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n    if (!vehicle || !trip.calculated_kmpl) return;\r\n    \r\n    const distance = trip.end_km - trip.start_km;\r\n    const fuel = trip.fuel_quantity || 0;\r\n    const kmpl = trip.calculated_kmpl;\r\n    \r\n    // More sensitive criteria for demonstration - lowered thresholds\r\n    if (kmpl > 15) { // Lowered from 25 to 15 for more sensitive detection\r\n      anomalies.push({\r\n        anomaly_type: 'suspicious_efficiency',\r\n        severity: 'medium',\r\n        trip_ids: [trip.id],\r\n        trip_serials: [trip.trip_serial_number || 'N/A'],\r\n        anomaly_details: {\r\n          vehicle_registration: vehicle.registration_number,\r\n          mileage: kmpl,\r\n          distance: distance,\r\n          fuel: fuel\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (kmpl < 8 && fuel > 0) { // Lowered from 5 to 8 for more sensitive detection\r\n      anomalies.push({\r\n        anomaly_type: 'poor_efficiency',\r\n        severity: 'high',\r\n        trip_ids: [trip.id],\r\n        trip_serials: [trip.trip_serial_number || 'N/A'],\r\n        anomaly_details: {\r\n          vehicle_registration: vehicle.registration_number,\r\n          mileage: kmpl,\r\n          distance: distance,\r\n          fuel: fuel\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (distance > 500) { // Lowered from 1000 to 500 for more sensitive detection\r\n      anomalies.push({\r\n        anomaly_type: 'excessive_distance',\r\n        severity: 'high',\r\n        trip_ids: [trip.id],\r\n        trip_serials: [trip.trip_serial_number || 'N/A'],\r\n        anomaly_details: {\r\n          vehicle_registration: vehicle.registration_number,\r\n          mileage: kmpl,\r\n          distance: distance,\r\n          fuel: fuel\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (fuel > 100) { // Lowered from 200 to 100 for more sensitive detection\r\n      anomalies.push({\r\n        anomaly_type: 'excessive_fuel',\r\n        severity: 'medium',\r\n        trip_ids: [trip.id],\r\n        trip_serials: [trip.trip_serial_number || 'N/A'],\r\n        anomaly_details: {\r\n          vehicle_registration: vehicle.registration_number,\r\n          mileage: kmpl,\r\n          distance: distance,\r\n          fuel: fuel\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add more sensitive criteria for demonstration\r\n    if (kmpl > 20) { // Very high efficiency\r\n      anomalies.push({\r\n        anomaly_type: 'suspicious_efficiency',\r\n        severity: 'critical',\r\n        trip_ids: [trip.id],\r\n        trip_serials: [trip.trip_serial_number || 'N/A'],\r\n        anomaly_details: {\r\n          vehicle_registration: vehicle.registration_number,\r\n          mileage: kmpl,\r\n          distance: distance,\r\n          fuel: fuel\r\n        }\r\n      });\r\n    }\r\n  });\r\n  \r\n  return anomalies;\r\n};\r\n\r\nconst EnhancedMileageChart: React.FC<EnhancedMileageChartProps> = ({ trips, vehicles }) => {\r\n  const navigate = useNavigate();\r\n  const [selectedVehicles, setSelectedVehicles] = useState<string[]>(['all']);\r\n  const [dateRange, setDateRange] = useState<string>('30days');\r\n  const [customDateStart, setCustomDateStart] = useState<string>('');\r\n  const [customDateEnd, setCustomDateEnd] = useState<string>('');\r\n  const [showVehicleDropdown, setShowVehicleDropdown] = useState(false);\r\n  const [showDateDropdown, setShowDateDropdown] = useState(false);\r\n  const [showAverageDropdown, setShowAverageDropdown] = useState(false);\r\n  const [averageType, setAverageType] = useState<'overall' | 'perVehicle' | 'rolling7'>('overall');\r\n\r\n  // Get unique vehicles from the vehicles prop\r\n  const vehicleOptions = useMemo(() => {\r\n    return ['all', ...vehicles.map(v => v.registration_number)];\r\n  }, [vehicles]);\r\n\r\n  // Calculate date range\r\n  const { startDate, endDate } = useMemo(() => {\r\n    const now = new Date();\r\n    let start = new Date();\r\n    let end = now;\r\n\r\n    switch (dateRange) {\r\n      case '7days':\r\n        start = subDays(now, 7);\r\n        break;\r\n      case '14days':\r\n        start = subDays(now, 14);\r\n        break;\r\n      case '30days':\r\n        start = subDays(now, 30);\r\n        break;\r\n      case '60days':\r\n        start = subDays(now, 60);\r\n        break;\r\n      case '90days':\r\n        start = subDays(now, 90);\r\n        break;\r\n      case 'custom':\r\n        if (customDateStart && customDateEnd) {\r\n          start = startOfDay(parseISO(customDateStart));\r\n          end = endOfDay(parseISO(customDateEnd));\r\n        }\r\n        break;\r\n    }\r\n\r\n    return { startDate: start, endDate: end };\r\n  }, [dateRange, customDateStart, customDateEnd]);\r\n\r\n  // Filter trips based on selections\r\n  const filteredTrips = useMemo(() => {\r\n    return trips.filter(trip => {\r\n      // Filter by vehicle\r\n      if (!selectedVehicles.includes('all')) {\r\n        const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n        if (!vehicle || !selectedVehicles.includes(vehicle.registration_number)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Filter by date\r\n      const tripDate = parseISO(trip.trip_end_date);\r\n      if (isBefore(tripDate, startDate) || isAfter(tripDate, endDate)) {\r\n        return false;\r\n      }\r\n\r\n      // Only include trips with calculated mileage\r\n      return trip.calculated_kmpl !== undefined && trip.calculated_kmpl !== null;\r\n    });\r\n  }, [trips, vehicles, selectedVehicles, startDate, endDate]);\r\n\r\n  // Fetch anomalies from database with more sensitive criteria\r\n  const { data: anomaliesData } = useQuery({\r\n    queryKey: ['mileage-anomalies', selectedVehicles, startDate, endDate],\r\n    queryFn: async () => {\r\n      const vehicleId = selectedVehicles.includes('all') \r\n        ? null \r\n        : vehicles.find(v => selectedVehicles.includes(v.registration_number))?.id;\r\n\r\n      // First try the database function\r\n      const { data: dbAnomalies, error: dbError } = await supabase.rpc('analyze_value_anomalies', {\r\n        p_vehicle_id: vehicleId,\r\n        p_date_from: format(startDate, 'yyyy-MM-dd'),\r\n        p_date_to: format(endDate, 'yyyy-MM-dd'),\r\n        p_include_edge_cases: true\r\n      });\r\n\r\n      if (dbError) {\r\n        console.error('Error fetching anomalies from DB:', dbError);\r\n      }\r\n\r\n      // Also run client-side enhanced anomaly detection for more sensitive criteria\r\n      const clientAnomalies = detectClientSideAnomalies(filteredTrips, vehicles);\r\n      \r\n      // Combine and deduplicate anomalies\r\n      const allAnomalies = [...(dbAnomalies || []), ...clientAnomalies];\r\n      return allAnomalies;\r\n    },\r\n    enabled: trips.length > 0 && filteredTrips.length > 0\r\n  });\r\n\r\n  // Helper function to get anomaly message\r\n  const getAnomalyMessage = (type: string): string => {\r\n    const messages: Record<string, string> = {\r\n      'suspicious_efficiency': 'Unusually high mileage (>40 km/L)',\r\n      'poor_efficiency': 'Very low mileage (<2 km/L)',\r\n      'excessive_distance': 'Very long trip (>2000 km)',\r\n      'excessive_fuel': 'High fuel consumption (>300 L)',\r\n      'negative_distance': 'Invalid odometer readings',\r\n      'impossible_speed': 'Unrealistic speed detected',\r\n      'excessive_duration': 'Trip duration too long (>48 hours)',\r\n      'high_fuel_expense': 'Fuel expense exceeds threshold',\r\n      'high_driver_expense': 'Driver expense exceeds threshold'\r\n    };\r\n    return messages[type] || 'Data quality issue detected';\r\n  };\r\n\r\n  // Process anomalies from database response\r\n  const anomalies = useMemo(() => {\r\n    if (!anomaliesData) return [];\r\n\r\n    const processed: Anomaly[] = [];\r\n\r\n    anomaliesData.forEach((anomalyGroup: any) => {\r\n      const { anomaly_type, severity, trip_ids, trip_serials, anomaly_details } = anomalyGroup;\r\n\r\n      // Map each trip in this anomaly group\r\n      trip_ids?.forEach((tripId: string, index: number) => {\r\n        const trip = filteredTrips.find(t => t.id === tripId);\r\n        if (!trip) return;\r\n\r\n        const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n        \r\n        processed.push({\r\n          trip_id: tripId,\r\n          trip_serial_number: trip_serials?.[index] || trip.trip_serial_number || 'N/A',\r\n          vehicle_registration: vehicle?.registration_number || 'Unknown',\r\n          date: format(parseISO(trip.trip_end_date), 'dd MMM yyyy'),\r\n          mileage: trip.calculated_kmpl || 0,\r\n          distance: trip.end_km - trip.start_km,\r\n          fuel: trip.fuel_quantity || 0,\r\n          issues: [{\r\n            type: anomaly_type,\r\n            severity: severity as 'critical' | 'high' | 'medium',\r\n            message: getAnomalyMessage(anomaly_type)\r\n          }]\r\n        });\r\n      });\r\n    });\r\n\r\n    return processed;\r\n  }, [anomaliesData, filteredTrips, vehicles, getAnomalyMessage]);\r\n\r\n  // Calculate average mileage\r\n  const averageMileage = useMemo(() => {\r\n    if (filteredTrips.length === 0) return 0;\r\n\r\n    if (averageType === 'overall') {\r\n      const sum = filteredTrips.reduce((acc, trip) => acc + (trip.calculated_kmpl || 0), 0);\r\n      return (sum / filteredTrips.length).toFixed(2);\r\n    } else if (averageType === 'perVehicle') {\r\n      const vehicleAverages: Record<string, { sum: number; count: number }> = {};\r\n      \r\n      filteredTrips.forEach(trip => {\r\n        const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n        if (!vehicle) return;\r\n        \r\n        const key = vehicle.registration_number;\r\n        if (!vehicleAverages[key]) {\r\n          vehicleAverages[key] = { sum: 0, count: 0 };\r\n        }\r\n        vehicleAverages[key].sum += trip.calculated_kmpl || 0;\r\n        vehicleAverages[key].count += 1;\r\n      });\r\n      \r\n      return vehicleAverages;\r\n    } else if (averageType === 'rolling7') {\r\n      const last7Days = filteredTrips.slice(-7);\r\n      if (last7Days.length === 0) return '0.00';\r\n      const sum = last7Days.reduce((acc, trip) => acc + (trip.calculated_kmpl || 0), 0);\r\n      return (sum / last7Days.length).toFixed(2);\r\n    }\r\n\r\n    return 0;\r\n  }, [filteredTrips, averageType, vehicles]);\r\n\r\n  // Prepare chart data with anomaly indicators\r\n  const chartData = useMemo(() => {\r\n    const dateMap = new Map<string, Record<string, any>>();\r\n\r\n    filteredTrips.forEach(trip => {\r\n      const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n      if (!vehicle) return;\r\n\r\n      const dateKey = format(parseISO(trip.trip_end_date), 'dd/MM');\r\n      const vehicleKey = vehicle.registration_number;\r\n\r\n      if (!dateMap.has(dateKey)) {\r\n        dateMap.set(dateKey, { date: dateKey });\r\n      }\r\n\r\n      const dateEntry = dateMap.get(dateKey)!;\r\n      \r\n      // Check if this trip has anomalies\r\n      const tripAnomalies = anomalies.filter(a => a.trip_id === trip.id);\r\n      const hasAnomaly = tripAnomalies.length > 0;\r\n      const anomalySeverity = hasAnomaly ? tripAnomalies[0].issues[0]?.severity : null;\r\n      \r\n      // Calculate average if multiple trips on same day\r\n      if (dateEntry[vehicleKey]) {\r\n        dateEntry[vehicleKey] = (dateEntry[vehicleKey] + (trip.calculated_kmpl || 0)) / 2;\r\n      } else {\r\n        dateEntry[vehicleKey] = trip.calculated_kmpl || 0;\r\n      }\r\n      \r\n      // Add anomaly metadata\r\n      dateEntry[`${vehicleKey}_anomaly`] = hasAnomaly;\r\n      dateEntry[`${vehicleKey}_severity`] = anomalySeverity;\r\n      dateEntry[`${vehicleKey}_tripId`] = trip.id;\r\n    });\r\n\r\n    return Array.from(dateMap.values())\r\n      .sort((a, b) => {\r\n        const [dayA, monthA] = a.date.split('/').map(Number);\r\n        const [dayB, monthB] = b.date.split('/').map(Number);\r\n        return monthA !== monthB ? monthA - monthB : dayA - dayB;\r\n      });\r\n  }, [filteredTrips, vehicles, anomalies]);\r\n\r\n  // Get unique vehicle registrations for chart lines\r\n  const chartVehicles = useMemo(() => {\r\n    const vehicleSet = new Set<string>();\r\n    filteredTrips.forEach(trip => {\r\n      const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n      if (vehicle) vehicleSet.add(vehicle.registration_number);\r\n    });\r\n    return Array.from(vehicleSet);\r\n  }, [filteredTrips, vehicles]);\r\n\r\n  const toggleVehicle = (vehicle: string) => {\r\n    if (vehicle === 'all') {\r\n      setSelectedVehicles(['all']);\r\n    } else {\r\n      setSelectedVehicles(prev => {\r\n        const filtered = prev.filter(v => v !== 'all');\r\n        if (filtered.includes(vehicle)) {\r\n          const updated = filtered.filter(v => v !== vehicle);\r\n          return updated.length === 0 ? ['all'] : updated;\r\n        } else {\r\n          return [...filtered, vehicle];\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const exportAnomalies = () => {\r\n    const csv = [\r\n      ['Trip ID', 'Vehicle', 'Date', 'Mileage (km/L)', 'Distance (km)', 'Fuel (L)', 'Issues', 'Severity'],\r\n      ...anomalies.map(a => [\r\n        a.trip_serial_number,\r\n        a.vehicle_registration,\r\n        a.date,\r\n        a.mileage.toFixed(2),\r\n        a.distance.toFixed(0),\r\n        a.fuel.toFixed(1),\r\n        a.issues.map(i => i.message).join('; '),\r\n        a.issues[0]?.severity || 'medium'\r\n      ])\r\n    ].map(row => row.join(',')).join('\\n');\r\n\r\n    const blob = new Blob([csv], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `mileage_anomalies_${format(new Date(), 'yyyy-MM-dd')}.csv`;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleAnomalyClick = (tripId: string) => {\r\n    navigate(`/trips`, { state: { highlightTripId: tripId } });\r\n  };\r\n\r\n  // Custom dot component for anomaly indicators\r\n  const CustomDot = (props: any) => {\r\n    const { cx, cy, payload, dataKey } = props;\r\n    const hasAnomaly = payload[`${dataKey}_anomaly`];\r\n    const severity = payload[`${dataKey}_severity`];\r\n    const tripId = payload[`${dataKey}_tripId`];\r\n    \r\n    if (!hasAnomaly) {\r\n      return (\r\n        <circle\r\n          cx={cx}\r\n          cy={cy}\r\n          r={3}\r\n          fill={colors[chartVehicles.indexOf(dataKey) % colors.length]}\r\n          stroke=\"white\"\r\n          strokeWidth={2}\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => tripId && navigate(`/trips`, { state: { highlightTripId: tripId } })}\r\n        />\r\n      );\r\n    }\r\n    \r\n    // Anomaly indicator with different colors based on severity\r\n    const anomalyColor = severity === 'critical' ? '#ef4444' : \r\n                        severity === 'high' ? '#f59e0b' : '#3b82f6';\r\n    \r\n    return (\r\n      <g>\r\n        {/* Outer ring for anomaly */}\r\n        <circle\r\n          cx={cx}\r\n          cy={cy}\r\n          r={6}\r\n          fill=\"none\"\r\n          stroke={anomalyColor}\r\n          strokeWidth={3}\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => tripId && navigate(`/trips`, { state: { highlightTripId: tripId } })}\r\n        />\r\n        {/* Inner dot */}\r\n        <circle\r\n          cx={cx}\r\n          cy={cy}\r\n          r={3}\r\n          fill={anomalyColor}\r\n          stroke=\"white\"\r\n          strokeWidth={2}\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => tripId && navigate(`/trips`, { state: { highlightTripId: tripId } })}\r\n        />\r\n        {/* Alert icon for critical anomalies */}\r\n        {severity === 'critical' && (\r\n          <text\r\n            x={cx}\r\n            y={cy - 12}\r\n            textAnchor=\"middle\"\r\n            fontSize=\"10\"\r\n            fill={anomalyColor}\r\n            fontWeight=\"bold\"\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={() => tripId && navigate(`/trips`, { state: { highlightTripId: tripId } })}\r\n          >\r\n            ⚠\r\n          </text>\r\n        )}\r\n      </g>\r\n    );\r\n  };\r\n\r\n  const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700\">\r\n      {/* Header with Filters */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex items-center justify-between mb-4 flex-wrap gap-4\">\r\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n            Mileage Trends\r\n          </h2>\r\n\r\n          {/* Average Display with Dropdown */}\r\n          <div className=\"relative\">\r\n            <button\r\n              onClick={() => setShowAverageDropdown(!showAverageDropdown)}\r\n              className=\"flex items-center gap-2 px-4 py-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors\"\r\n            >\r\n              <TrendingUp className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\r\n              <div className=\"text-left\">\r\n                <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                  {averageType === 'overall' ? 'Overall Average' :\r\n                    averageType === 'perVehicle' ? 'Per Vehicle' :\r\n                      'Rolling 7-Day'}\r\n                </div>\r\n                <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\r\n                  {typeof averageMileage === 'object' ?\r\n                    'View Details' :\r\n                    `${averageMileage} km/L`\r\n                  }\r\n                </div>\r\n              </div>\r\n              <ChevronDown className=\"w-4 h-4\" />\r\n            </button>\r\n\r\n            {showAverageDropdown && (\r\n              <div className=\"absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-lg z-10\">\r\n                <div className=\"p-2\">\r\n                  <button\r\n                    onClick={() => {\r\n                      setAverageType('overall');\r\n                      setShowAverageDropdown(false);\r\n                    }}\r\n                    className=\"w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-sm\"\r\n                  >\r\n                    Overall Average\r\n                  </button>\r\n                  <button\r\n                    onClick={() => {\r\n                      setAverageType('rolling7');\r\n                      setShowAverageDropdown(false);\r\n                    }}\r\n                    className=\"w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-sm\"\r\n                  >\r\n                    Rolling 7-Day Average\r\n                  </button>\r\n                  <button\r\n                    onClick={() => {\r\n                      setAverageType('perVehicle');\r\n                      setShowAverageDropdown(false);\r\n                    }}\r\n                    className=\"w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-sm\"\r\n                  >\r\n                    Per Vehicle Average\r\n                  </button>\r\n                </div>\r\n\r\n                {typeof averageMileage === 'object' && (\r\n                  <div className=\"border-t dark:border-gray-700 p-3\">\r\n                    <h4 className=\"text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2\">Per Vehicle:</h4>\r\n                    {Object.entries(averageMileage).map(([vehicle, data]) => (\r\n                      <div key={vehicle} className=\"flex justify-between text-sm py-1\">\r\n                        <span className=\"text-gray-700 dark:text-gray-300\">{vehicle}</span>\r\n                        <span className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                          {(data.sum / data.count).toFixed(2)} km/L\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter Bar */}\r\n        <div className=\"flex flex-wrap gap-3\">\r\n          {/* Vehicle Filter */}\r\n          <div className=\"relative\">\r\n            <button\r\n              onClick={() => setShowVehicleDropdown(!showVehicleDropdown)}\r\n              className=\"flex items-center gap-2 px-4 py-2 border dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              <Filter className=\"w-4 h-4\" />\r\n              <span className=\"text-sm font-medium\">\r\n                {selectedVehicles.includes('all')\r\n                  ? 'All Vehicles'\r\n                  : `${selectedVehicles.length} Selected`}\r\n              </span>\r\n              <ChevronDown className=\"w-4 h-4\" />\r\n            </button>\r\n\r\n            {showVehicleDropdown && (\r\n              <div className=\"absolute top-full mt-2 w-64 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto\">\r\n                {vehicleOptions.map(vehicle => (\r\n                  <label\r\n                    key={vehicle}\r\n                    className=\"flex items-center px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\"\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedVehicles.includes(vehicle)}\r\n                      onChange={() => toggleVehicle(vehicle)}\r\n                      className=\"mr-3\"\r\n                    />\r\n                    <span className=\"text-sm\">\r\n                      {vehicle === 'all' ? 'All Vehicles' : vehicle}\r\n                    </span>\r\n                  </label>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Date Range Filter */}\r\n          <div className=\"relative\">\r\n            <button\r\n              onClick={() => setShowDateDropdown(!showDateDropdown)}\r\n              className=\"flex items-center gap-2 px-4 py-2 border dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              <Calendar className=\"w-4 h-4\" />\r\n              <span className=\"text-sm font-medium\">\r\n                {dateRange === 'custom' ? 'Custom Range' :\r\n                  dateRange.replace('days', ' Days')}\r\n              </span>\r\n              <ChevronDown className=\"w-4 h-4\" />\r\n            </button>\r\n\r\n            {showDateDropdown && (\r\n              <div className=\"absolute top-full mt-2 w-64 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-lg z-10\">\r\n                <div className=\"p-2\">\r\n                  <div className=\"text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 px-2\">Quick Options</div>\r\n                  {['7days', '14days', '30days', '60days', '90days'].map(option => (\r\n                    <button\r\n                      key={option}\r\n                      onClick={() => {\r\n                        setDateRange(option);\r\n                        setShowDateDropdown(false);\r\n                      }}\r\n                      className=\"w-full text-left px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-sm\"\r\n                    >\r\n                      Last {option.replace('days', ' Days')}\r\n                    </button>\r\n                  ))}\r\n\r\n                  <div className=\"border-t dark:border-gray-700 mt-2 pt-2\">\r\n                    <div className=\"text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 px-2\">Custom Range</div>\r\n                    <div className=\"px-2 space-y-2\">\r\n                      <input\r\n                        type=\"date\"\r\n                        value={customDateStart}\r\n                        onChange={(e) => setCustomDateStart(e.target.value)}\r\n                        className=\"w-full px-2 py-1 border dark:border-gray-600 dark:bg-gray-700 rounded text-sm\"\r\n                        placeholder=\"Start Date\"\r\n                      />\r\n                      <input\r\n                        type=\"date\"\r\n                        value={customDateEnd}\r\n                        onChange={(e) => setCustomDateEnd(e.target.value)}\r\n                        className=\"w-full px-2 py-1 border dark:border-gray-600 dark:bg-gray-700 rounded text-sm\"\r\n                        placeholder=\"End Date\"\r\n                      />\r\n                      <button\r\n                        onClick={() => {\r\n                          if (customDateStart && customDateEnd) {\r\n                            setDateRange('custom');\r\n                            setShowDateDropdown(false);\r\n                          }\r\n                        }}\r\n                        disabled={!customDateStart || !customDateEnd}\r\n                        className=\"w-full px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                      >\r\n                        Apply\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Enhanced Chart */}\r\n      <div className=\"mb-6\" style={{ height: '450px' }}>\r\n        {chartData.length > 0 ? (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart\r\n              data={chartData}\r\n              margin={{ top: 20, right: 30, left: 0, bottom: 20 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\r\n              <XAxis\r\n                dataKey=\"date\"\r\n                tick={{ fontSize: 12 }}\r\n                tickLine={false}\r\n                axisLine={{ stroke: '#d1d5db' }}\r\n                angle={-45}\r\n                textAnchor=\"end\"\r\n                height={60}\r\n              />\r\n              <YAxis\r\n                tickLine={false}\r\n                axisLine={{ stroke: '#d1d5db' }}\r\n                tick={{ fontSize: 12 }}\r\n                domain={['auto', 'auto']}\r\n                label={{\r\n                  value: 'Mileage (km/L)',\r\n                  angle: -90,\r\n                  position: 'insideLeft',\r\n                  style: { fontSize: 12, fontWeight: 600 }\r\n                }}\r\n              />\r\n              <Tooltip\r\n                contentStyle={{\r\n                  backgroundColor: 'white',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #e5e7eb',\r\n                  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\r\n                }}\r\n                formatter={(value: number) => `${value.toFixed(2)} km/L`}\r\n              />\r\n              <Legend\r\n                wrapperStyle={{ paddingTop: '20px' }}\r\n                iconType=\"line\"\r\n              />\r\n              {chartVehicles.map((vehicle, index) => (\r\n                <Line\r\n                  key={vehicle}\r\n                  type=\"monotone\"\r\n                  dataKey={vehicle}\r\n                  stroke={colors[index % colors.length]}\r\n                  strokeWidth={2}\r\n                  dot={<CustomDot />}\r\n                  activeDot={{ r: 5 }}\r\n                  name={vehicle}\r\n                  connectNulls\r\n                />\r\n              ))}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        ) : (\r\n          <div className=\"flex items-center justify-center h-full text-gray-500 dark:text-gray-400\">\r\n            <div className=\"text-center\">\r\n              <TrendingUp className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\r\n              <p>No data available for the selected period</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Anomaly Legend */}\r\n      {anomalies.length > 0 && (\r\n        <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n          <h4 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">Chart Legend:</h4>\r\n          <div className=\"flex flex-wrap gap-4 text-xs\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-3 h-3 rounded-full bg-red-500 border-2 border-white\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Critical Anomaly</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-3 h-3 rounded-full bg-orange-500 border-2 border-white\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">High Priority</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-3 h-3 rounded-full bg-blue-500 border-2 border-white\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Medium Priority</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Click any point to view trip details</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Anomalies Section */}\r\n      {anomalies.length > 0 && (\r\n        <div className=\"border-t dark:border-gray-700 pt-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <AlertTriangle className=\"w-5 h-5 text-orange-500\" />\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                Anomalies Detected ({anomalies.length})\r\n              </h3>\r\n            </div>\r\n            <button\r\n              onClick={exportAnomalies}\r\n              className=\"flex items-center gap-2 px-3 py-2 text-sm border dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\r\n            >\r\n              <Download className=\"w-4 h-4\" />\r\n              Export CSV\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\r\n            Click on any entry to review and verify the trip data\r\n          </div>\r\n\r\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n            {anomalies.map((anomaly, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"p-4 border dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 cursor-pointer transition-colors\"\r\n                onClick={() => handleAnomalyClick(anomaly.trip_id)}\r\n              >\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-3 mb-2 flex-wrap\">\r\n                      <span className=\"font-mono text-sm font-semibold text-blue-600 dark:text-blue-400\">\r\n                        {anomaly.trip_serial_number}\r\n                      </span>\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">{anomaly.vehicle_registration}</span>\r\n                      <span className=\"text-xs text-gray-500 dark:text-gray-500\">{anomaly.date}</span>\r\n                      <ExternalLink className=\"w-3 h-3 text-gray-400\" />\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 mb-2 flex-wrap\">\r\n                      <span className=\"text-sm\">\r\n                        <span className=\"font-medium\">Mileage:</span> {anomaly.mileage.toFixed(2)} km/L\r\n                      </span>\r\n                      <span className=\"text-gray-400\">|</span>\r\n                      <span className=\"text-sm\">\r\n                        <span className=\"font-medium\">Distance:</span> {anomaly.distance.toFixed(0)} km\r\n                      </span>\r\n                      <span className=\"text-gray-400\">|</span>\r\n                      <span className=\"text-sm\">\r\n                        <span className=\"font-medium\">Fuel:</span> {anomaly.fuel.toFixed(1)} L\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex flex-wrap gap-2\">\r\n                      {anomaly.issues.map((issue, idx) => (\r\n                        <span\r\n                          key={idx}\r\n                          className={`px-2 py-1 text-xs rounded-full ${issue.severity === 'critical' ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400' :\r\n                              issue.severity === 'high' ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-400' :\r\n                                'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400'\r\n                            }`}\r\n                        >\r\n                          {issue.message}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"ml-4\">\r\n                    <span className={`px-3 py-1 text-xs font-semibold rounded-full ${anomaly.issues.some(i => i.severity === 'critical')\r\n                        ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\r\n                        : anomaly.issues.some(i => i.severity === 'high')\r\n                          ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-400'\r\n                          : 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400'\r\n                      }`}>\r\n                      {anomaly.issues.some(i => i.severity === 'critical') ? 'Critical' :\r\n                        anomaly.issues.some(i => i.severity === 'high') ? 'High' : 'Medium'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {anomalies.length === 0 && filteredTrips.length > 0 && (\r\n        <div className=\"border-t dark:border-gray-700 pt-6\">\r\n          <div className=\"text-center text-gray-500 dark:text-gray-400 mb-4\">\r\n            <AlertTriangle className=\"w-12 h-12 mx-auto mb-2 opacity-30\" />\r\n            <p>No anomalies detected in the current data range</p>\r\n            <p className=\"text-sm mt-1\">Your fleet data looks good! ✓</p>\r\n          </div>\r\n          \r\n          {/* Demo section to show how anomalies would appear */}\r\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800\">\r\n            <h4 className=\"text-sm font-semibold text-blue-800 dark:text-blue-200 mb-2\">\r\n              💡 Anomaly Detection Demo\r\n            </h4>\r\n            <p className=\"text-xs text-blue-700 dark:text-blue-300 mb-3\">\r\n              The system will automatically detect and highlight trips with unusual patterns:\r\n            </p>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-xs\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 rounded-full bg-red-500 border-2 border-white\"></div>\r\n                <span className=\"text-blue-700 dark:text-blue-300\">Critical: Very high efficiency (&gt;20 km/L)</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 rounded-full bg-orange-500 border-2 border-white\"></div>\r\n                <span className=\"text-blue-700 dark:text-blue-300\">High: Poor efficiency (&lt;8 km/L)</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 rounded-full bg-blue-500 border-2 border-white\"></div>\r\n                <span className=\"text-blue-700 dark:text-blue-300\">Medium: Suspicious efficiency (&gt;15 km/L)</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"w-3 h-3 rounded-full bg-orange-500 border-2 border-white\"></div>\r\n                <span className=\"text-blue-700 dark:text-blue-300\">High: Excessive distance (&gt;500 km)</span>\r\n              </div>\r\n            </div>\r\n            <p className=\"text-xs text-blue-600 dark:text-blue-400 mt-3\">\r\n              Click any data point on the chart to navigate to trip details for correction.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedMileageChart;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\MileageChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\RecentTripsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\dashboard\\VehicleStatsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\demo\\EnhancedSelectionDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\documents\\DocumentCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverDocumentDownloadModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverDocumentManagerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'watch'. Either include it or remove the dependency array.","line":271,"column":6,"nodeType":"ArrayExpression","endLine":271,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [setValue, watch]","fix":{"range":[8981,9011],"text":"[setValue, watch]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":271,"column":7,"nodeType":"CallExpression","endLine":271,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\r\nimport { Driver, Vehicle } from \"@/types\";\r\nimport Input from \"../ui/Input\";\r\nimport Select from \"../ui/Select\";\r\nimport MultiSelect from \"../ui/MultiSelect\";\r\nimport DocumentUploader from \"../shared/DocumentUploader\";\r\nimport Button from \"../ui/Button\";\r\nimport Textarea from \"../ui/Textarea\";\r\nimport {\r\n  User,\r\n  Phone,\r\n  Mail,\r\n  Calendar,\r\n  FileText,\r\n  Upload,\r\n  Trash2,\r\n  Plus,\r\n  Users,\r\n  FileCheck,\r\n  Database,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  AlertCircle,\r\n  Shield,\r\n} from \"lucide-react\";\r\nimport { getVehicles } from \"../../utils/storage\";\r\nimport CollapsibleSection from \"../ui/CollapsibleSection\";\r\nimport { toast } from \"react-toastify\";\r\nimport { supabase } from \"../../utils/supabaseClient\";\r\nimport { format, differenceInYears, differenceInMonths } from \"date-fns\";\r\nimport { \r\n  validateIndianLicense, \r\n  validateIndianMobile, \r\n  validateAadhar,\r\n  parseLicenseNumber,\r\n  formatIndianMobile,\r\n  formatAadhar,\r\n  LICENSE_TYPES,\r\n  canDriveVehicleType,\r\n  VEHICLE_AUTHORIZATION\r\n} from \"../../utils/indianValidation\";\r\nimport { checkDriverLicenseExpiry, getExpiryStatusColor } from \"../../utils/documentExpiry\";\r\n\r\ninterface DriverFormProps {\r\n  initialData: Partial<Driver>;\r\n  onSubmit: (data: Omit<Driver, \"id\">) => void;\r\n  isSubmitting?: boolean;\r\n}\r\n\r\nconst DriverForm: React.FC<DriverFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  isSubmitting = false,\r\n}) => {\r\n  const [photoPreview, setPhotoPreview] = useState<string | null>(\r\n    initialData?.driver_photo_url || null\r\n  );\r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [fieldsDisabled, setFieldsDisabled] = useState(true);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [fetchStatus, setFetchStatus] = useState<\r\n    \"idle\" | \"fetching\" | \"success\" | \"error\"\r\n  >(\"idle\");\r\n  const [uploadedDocuments, setUploadedDocuments] = useState<Record<string, string[]>>({});\r\n  const [experienceDisplay, setExperienceDisplay] = useState<string>('0 years, 0 months');\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<Driver>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      license_number: \"\",\r\n      dob: \"\",\r\n      father_or_husband_name: \"\",\r\n      contact_number: \"\",\r\n      email: \"\",\r\n      status: \"active\",\r\n      ...initialData,\r\n      other_documents: initialData.other_documents\r\n        ? initialData.other_documents // ⚠️ Confirm field refactor here\r\n        : [], // ⚠️ Confirm field refactor here\r\n      medical_doc_file: initialData.medical_doc_url ? [] : initialData.medical_doc_file,\r\n      police_doc_file: initialData.police_doc_url ? [] : initialData.police_doc_file,\r\n      aadhar_doc_file: initialData.aadhar_doc_url ? [] : initialData.aadhar_doc_file,\r\n      license_doc_file: initialData.license_doc_url ? [] : initialData.license_doc_file,\r\n    },\r\n  });\r\n\r\n  // Enable fields if initialData is present (for edit mode)\r\n  useEffect(() => {\r\n    if (initialData?.id) {\r\n      setFieldsDisabled(false);\r\n      \r\n      // Calculate experience display for existing data\r\n      if (initialData.join_date) {\r\n        const joinDate = new Date(initialData.join_date);\r\n        const today = new Date();\r\n        const totalMonths = differenceInMonths(today, joinDate);\r\n        const years = Math.floor(totalMonths / 12);\r\n        const months = totalMonths % 12;\r\n        setExperienceDisplay(`${years} year${years !== 1 ? 's' : ''}, ${months} month${months !== 1 ? 's' : ''}`);\r\n      }\r\n    }\r\n  }, [initialData]);\r\n  // Field array for other documents\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: \"other_documents\",\r\n  });\r\n\r\n  // Fetch vehicles for the dropdown\r\n  useEffect(() => {\r\n    const fetchVehicles = async () => {\r\n      try {\r\n        const vehiclesData = await getVehicles();\r\n        // Filter out archived vehicles\r\n        const activeVehicles = vehiclesData.filter(\r\n          (v) => v.status !== \"archived\"\r\n        );\r\n        setVehicles(activeVehicles);\r\n      } catch (error) {\r\n        console.error(\"Error fetching vehicles:\", error);\r\n        toast.error(\"Failed to load vehicles\");\r\n      }\r\n    };\r\n\r\n    fetchVehicles();\r\n  }, []);\r\n\r\n  const handlePhotoChange = (file: File | null) => {\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPhotoPreview(reader.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      setPhotoPreview(initialData?.driver_photo_url || null);\r\n    }\r\n  };\r\n\r\n  // --- Fetch Driver Details Handler ---\r\n  const handleFetchDetails = async () => {\r\n    const licenseNumber = watch(\"license_number\");\r\n    const dob = watch(\"dob\");\r\n\r\n    if (!licenseNumber || !dob) {\r\n      toast.error(\"Please enter license number and date of birth.\");\r\n      return;\r\n    }\r\n\r\n    setIsFetching(true);\r\n    setFetchStatus(\"fetching\");\r\n    setFieldsDisabled(true);\r\n\r\n    try {\r\n      const dob_formatted = dob.split(\"-\").reverse().join(\"-\");\r\n\r\n      const { data: result, error } = await supabase.functions.invoke(\r\n        \"fetch-driver-details\",\r\n        {\r\n          body: {\r\n            licence_number: licenseNumber,\r\n            dob: dob_formatted,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (error || !result?.success) {\r\n        throw new Error(\r\n          result?.message || error?.message || \"Failed to fetch details\"\r\n        );\r\n      }\r\n\r\n      const driver = result.response || result.data?.response || {};\r\n\r\n      // Convert base64 image to data URL if present\r\n      let photoUrl = undefined; // ⚠️ Confirm field refactor here\r\n      if (driver.image) {\r\n        photoUrl = `data:image/jpeg;base64,${driver.image}`;\r\n        setPhotoPreview(photoUrl);\r\n      }\r\n\r\n      // Map API response to form fields\r\n      const mapped: Driver = {\r\n        id: initialData?.id || undefined,\r\n        name: driver.holder_name || \"\",\r\n        father_or_husband_name: driver.father_or_husband_name || \"\",\r\n        gender:\r\n          (driver.gender &&\r\n            (driver.gender.toUpperCase() === \"MALE\"\r\n              ? \"MALE\"\r\n              : driver.gender.toUpperCase() === \"FEMALE\"\r\n              ? \"FEMALE\"\r\n          : \"OTHER\")) || // ⚠️ Confirm field refactor here\r\n          \"MALE\",\r\n        dob: (driver?.dob && driver?.dob.split(\"-\").reverse().join(\"-\")) || dob,\r\n        blood_group:\r\n          (driver?.blood_group && driver.blood_group.toUpperCase()) || \"\",\r\n        address: driver?.permanent_address || driver?.temporary_address || \"\",\r\n        contact_number: driver?.contact_number || \"\",\r\n        email: driver?.email || \"\", // ⚠️ Confirm field refactor here\r\n        license_number: driver?.license_number || licenseNumber,\r\n        vehicle_class:\r\n          (driver?.vehicle_class &&\r\n            driver?.vehicle_class.map((v: any) => v?.cov)) ||\r\n          [],\r\n        valid_from:\r\n          (driver?.valid_from &&\r\n            driver?.valid_from.split(\"-\").reverse().join(\"-\")) ||\r\n          \"\",\r\n        license_expiry_date:\r\n          (driver?.valid_upto &&\r\n            driver?.valid_upto.split(\"-\").reverse().join(\"-\")) ||\r\n          \"\",\r\n        license_issue_date:\r\n          (driver?.issue_date &&\r\n            driver?.issue_date.split(\"-\").reverse().join(\"-\")) ||\r\n          \"\",\r\n        rto_code: driver.rto_code || \"\",\r\n        rto: driver.rto || \"\",\r\n        state: driver.state || \"\",\r\n        join_date: initialData.join_date || format(new Date(), 'yyyy-MM-dd'),\r\n        experience_years: 0,\r\n        primary_vehicle_id: \"\",\r\n        status: \"active\",\r\n        driver_photo_url: photoUrl,\r\n      };\r\n\r\n      reset(mapped);\r\n      setFieldsDisabled(false);\r\n      setFetchStatus(\"success\");\r\n      toast.success(\r\n        \"Driver details fetched. Please verify and complete the form.\"\r\n      );\r\n    } catch (err: any) {\r\n      toast.error(err.message || \"Failed to fetch driver details.\");\r\n      setFieldsDisabled(false);\r\n      setFetchStatus(\"error\");\r\n    } finally {\r\n      setIsFetching(false);\r\n    }\r\n  };\r\n\r\n  // Auto-calculate experience based on join_date\r\n  useEffect(() => {\r\n    if (watch('join_date')) {\r\n      const joinDate = new Date(watch('join_date'));\r\n      const today = new Date();\r\n      const totalMonths = differenceInMonths(today, joinDate);\r\n      const years = Math.floor(totalMonths / 12);\r\n      const months = totalMonths % 12;\r\n      \r\n      // Store the decimal representation for database\r\n      const decimalYears = parseFloat((totalMonths / 12).toFixed(2));\r\n      setValue('experience_years', decimalYears);\r\n      \r\n      // Set display string\r\n      setExperienceDisplay(`${years} year${years !== 1 ? 's' : ''}, ${months} month${months !== 1 ? 's' : ''}`);\r\n    } else {\r\n      setValue('experience_years', 0);\r\n      setExperienceDisplay('0 years, 0 months');\r\n    }\r\n  }, [watch('join_date'), setValue]);\r\n\r\n  // Handle document upload completion\r\n  const handleDocumentUpload = (docType: string, filePaths: string[]) => {\r\n    setUploadedDocuments(prev => ({\r\n      ...prev,\r\n      [docType]: filePaths\r\n    }));\r\n    \r\n    // Update form field with the uploaded file paths\r\n    const fieldName = `${docType}_doc_url` as keyof Driver;\r\n    setValue(fieldName, filePaths as any);\r\n  };\r\n\r\n  const onFormSubmit = (data: Driver) => {\r\n    // Include uploaded document URLs in the submission\r\n    const formData = {\r\n      ...data,\r\n      license_doc_url: uploadedDocuments.license || [],\r\n      aadhar_doc_url: uploadedDocuments.aadhar || [],\r\n      police_doc_url: uploadedDocuments.police || [],\r\n      medical_doc_url: uploadedDocuments.medical || [],\r\n    };\r\n\r\n    onSubmit(formData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onFormSubmit)} className=\"space-y-4\">\r\n      {/* Top-level Fetch Block */}\r\n      <div className=\"bg-gray-50 p-3 sm:p-4 rounded-lg border border-gray-200 mb-6\">\r\n        <p className=\"text-sm text-gray-600 mb-3\">\r\n          Fetch Driver Info from Government Portal\r\n        </p>\r\n        <div className=\"flex flex-col md:flex-row items-center gap-3 sm:gap-4\">\r\n          <div className=\"w-full md:w-2/5 mb-2 md:mb-0\">\r\n            <Input\r\n              label=\"License Number\"\r\n              placeholder=\"MH12 20080001234\"\r\n              icon={<FileText className=\"h-4 w-4\" />}\r\n              error={errors.license_number?.message}\r\n              required\r\n              disabled={isFetching || isSubmitting}\r\n              {...register(\"license_number\", {\r\n                required: \"License number is required\",\r\n                validate: (value) => {\r\n                  if (!validateIndianLicense(value)) {\r\n                    return \"Please enter a valid Indian driving license number (e.g., MH12 20080001234)\";\r\n                  }\r\n                  return true;\r\n                }\r\n              })}\r\n            />\r\n          </div>\r\n          <div className=\"w-full md:w-2/5 mb-2 md:mb-0\">\r\n            <Input\r\n              label=\"Date of Birth\"\r\n              type=\"date\"\r\n              icon={<Calendar className=\"h-4 w-4\" />}\r\n              placeholder=\"DD-MM-YYYY\"\r\n              disabled={isFetching || isSubmitting}\r\n              {...register(\"dob\")}\r\n            />\r\n          </div>\r\n          <div className=\"w-full md:w-1/5 pt-0 md:pt-2\">\r\n            <Button\r\n              type=\"button\"\r\n              disabled={isFetching || isSubmitting}\r\n              isLoading={isFetching}\r\n              className=\"w-full\"\r\n              onClick={handleFetchDetails}\r\n            >\r\n              {isFetching ? \"Fetching...\" : \"Fetch Details\"}\r\n            </Button>\r\n            {fetchStatus === \"success\" && (\r\n              <div className=\"text-center mt-1\">\r\n                <span className=\"text-xs text-success-600 flex items-center justify-center\">\r\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                  Details found!\r\n                </span>\r\n              </div>\r\n            )}\r\n            {fetchStatus === \"error\" && (\r\n              <div className=\"text-center mt-1\">\r\n                <span className=\"text-xs text-error-600 flex items-center justify-center\">\r\n                  <AlertTriangle className=\"h-3 w-3 mr-1\" />\r\n                  Not found\r\n                </span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Driver Photo */}\r\n      <div className=\"flex justify-center mb-4\">\r\n        <div className=\"relative\">\r\n          <div className=\"h-24 w-24 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center border-2 border-gray-200\">\r\n            {photoPreview ? (\r\n              <img\r\n                src={photoPreview}\r\n                alt=\"Driver\"\r\n                className=\"h-full w-full object-cover\"\r\n              />\r\n            ) : (\r\n              <User className=\"h-12 w-12 text-gray-400\" />\r\n            )}\r\n          </div>\r\n          <Controller\r\n            control={control}\r\n            name=\"photo\"\r\n            render={({ field: { onChange, ...field } }) => (\r\n              <div className=\"absolute bottom-0 right-0\">\r\n                <label\r\n                  htmlFor=\"photo-upload\"\r\n                  className=\"cursor-pointer bg-primary-600 text-white p-1.5 rounded-full hover:bg-primary-700 transition-colors\"\r\n                >\r\n                  <Upload className=\"h-3.5 w-3.5 inline align-baseline\" />\r\n                  <input\r\n                    id=\"photo-upload\"\r\n                    type=\"file\"\r\n                    className=\"hidden\"\r\n                    accept=\"image/*\"\r\n                    onChange={(e) => {\r\n                      const file = e.target.files?.[0] || null;\r\n                      onChange(file);\r\n                      handlePhotoChange(file);\r\n                    }}\r\n                    disabled={fieldsDisabled || isSubmitting}\r\n                    {...field}\r\n                  />\r\n                </label>\r\n              </div>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Personal Information */}\r\n      <CollapsibleSection\r\n        title=\"Personal Information\"\r\n        icon={<User className=\"h-5 w-5\" />}\r\n        iconColor=\"text-blue-600\"\r\n        defaultExpanded={true}\r\n      >\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4\">\r\n          <Input\r\n            label=\"Full Name\"\r\n            icon={<User className=\"h-4 w-4\" />}\r\n            error={errors.name?.message}\r\n            required\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"name\", { required: \"Full name is required\" })}\r\n          />\r\n\r\n          <Input\r\n            label=\"Father/Husband Name\"\r\n            icon={<Users className=\"h-4 w-4\" />}\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"father_or_husband_name\")}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"gender\"\r\n            render={({ field }) => (\r\n              <Select\r\n                label=\"Gender\"\r\n                options={[\r\n                  { value: \"MALE\", label: \"Male\" },\r\n                  { value: \"FEMALE\", label: \"Female\" },\r\n                  { value: \"OTHER\", label: \"Other\" },\r\n                ]}\r\n                disabled={fieldsDisabled || isSubmitting}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"blood_group\"\r\n            render={({ field }) => (\r\n              <Select\r\n                label=\"Blood Group\"\r\n                options={[\r\n                  { value: \"\", label: \"Select Blood Group\" },\r\n                  { value: \"A+\", label: \"A+\" },\r\n                  { value: \"A-\", label: \"A-\" },\r\n                  { value: \"B+\", label: \"B+\" },\r\n                  { value: \"B-\", label: \"B-\" },\r\n                  { value: \"AB+\", label: \"AB+\" },\r\n                  { value: \"AB-\", label: \"AB-\" },\r\n                  { value: \"O+\", label: \"O+\" },\r\n                  { value: \"O-\", label: \"O-\" },\r\n                ]}\r\n                disabled={fieldsDisabled || isSubmitting}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n        <div className=\"mt-3 sm:mt-4\">\r\n          <Controller\r\n            control={control}\r\n            name=\"address\"\r\n            render={({ field }) => (\r\n              <Textarea\r\n                label=\"Address\"\r\n                placeholder=\"Enter full address\"\r\n                error={errors.address?.message}\r\n                required\r\n                disabled={fieldsDisabled || isSubmitting}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* Contact & License Details */}\r\n      <CollapsibleSection\r\n        title=\"Contact & License Details\"\r\n        icon={<FileCheck className=\"h-5 w-5\" />}\r\n        iconColor=\"text-green-600\"\r\n        defaultExpanded={true}\r\n      >\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4\">\r\n          <Input\r\n            label=\"Contact Number\"\r\n            icon={<Phone className=\"h-4 w-4\" />}\r\n            placeholder=\"e.g., 9876543210\"\r\n            error={errors.contact_number?.message}\r\n            required\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"contact_number\", {\r\n              required: \"Contact number is required\",\r\n              validate: (value) => {\r\n                if (!validateIndianMobile(value)) {\r\n                  return \"Please enter a valid 10-digit Indian mobile number\";\r\n                }\r\n                return true;\r\n              },\r\n              onChange: (e) => {\r\n                // Auto-format the mobile number\r\n                const formatted = formatIndianMobile(e.target.value);\r\n                e.target.value = formatted;\r\n              }\r\n            })}\r\n          />\r\n\r\n          <Input\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            icon={<Mail className=\"h-4 w-4\" />}\r\n            error={errors.email?.message}\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"email\")}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"vehicle_class\"\r\n            render={({ field }) => (\r\n              <MultiSelect\r\n                label=\"Vehicle Class / License Types\"\r\n                options={[\r\n                  { value: \"MCWG\", label: \"MCWG - Motorcycle Without Gear\" },\r\n                  { value: \"MCW/G\", label: \"MCW/G - Motorcycle With Gear\" },\r\n                  { value: \"LMV\", label: \"LMV - Light Motor Vehicle\" },\r\n                  { value: \"HMV\", label: \"HMV - Heavy Motor Vehicle\" },\r\n                  { value: \"HGMV\", label: \"HGMV - Heavy Goods Motor Vehicle\" },\r\n                  { value: \"HTV\", label: \"HTV - Heavy Transport Vehicle\" },\r\n                  { value: \"HPMV\", label: \"HPMV - Heavy Passenger Motor Vehicle\" },\r\n                  { value: \"PSV\", label: \"PSV - Public Service Vehicle\" },\r\n                  { value: \"TRANS\", label: \"TRANS - Transport Vehicle\" },\r\n                ]}\r\n                value={field.value || []}\r\n                onChange={field.onChange}\r\n                disabled={fieldsDisabled || isSubmitting}\r\n                required\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4 mt-3 sm:mt-4\">\r\n          <Input\r\n            label=\"License Issue Date\"\r\n            type=\"date\"\r\n            icon={<Calendar className=\"h-4 w-4\" />}\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"license_issue_date\")}\r\n          />\r\n\r\n          <Input\r\n            label=\"Valid From\"\r\n            type=\"date\"\r\n            icon={<Calendar className=\"h-4 w-4\" />}\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"valid_from\")}\r\n          />\r\n\r\n          <Input\r\n            label=\"Valid Upto\"\r\n            type=\"date\"\r\n            icon={<Calendar className=\"h-4 w-4\" />}\r\n            error={errors.license_expiry_date?.message}\r\n            required\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"license_expiry_date\", {\r\n              required: \"License expiry date is required\",\r\n            })}\r\n          />\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* RTO Information */}\r\n      <CollapsibleSection\r\n        title=\"RTO Information\"\r\n        icon={<FileText className=\"h-5 w-5\" />}\r\n        iconColor=\"text-orange-600\"\r\n        defaultExpanded={false}\r\n      >\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4\">\r\n          <Input\r\n            label=\"RTO Code\"\r\n            placeholder=\"e.g., CG06\"\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"rto_code\")}\r\n          />\r\n\r\n          <Input\r\n            label=\"RTO Name\"\r\n            placeholder=\"e.g., MAHASAMUND\"\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"rto\")}\r\n          />\r\n\r\n          <Input\r\n            label=\"State\"\r\n            placeholder=\"Chhattisgarh\"\r\n            disabled={fieldsDisabled || isSubmitting}\r\n            {...register(\"state\")}\r\n          />\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* Employment Details */}\r\n      <CollapsibleSection\r\n        title=\"Employment Details\"\r\n        icon={<Users className=\"h-5 w-5\" />}\r\n        iconColor=\"text-purple-600\"\r\n        defaultExpanded={true}\r\n      >\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4\">\r\n          <Input\r\n            label=\"Join Date\"\r\n            type=\"date\"\r\n            icon={<Calendar className=\"h-4 w-4\" />}\r\n            error={errors.join_date?.message}\r\n            required\r\n            disabled={isSubmitting}\r\n            {...register(\"join_date\", { required: \"Join date is required\" })}\r\n          />\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Experience\r\n            </label>\r\n            <div className=\"px-3 py-2 border border-gray-300 rounded-md bg-gray-50\">\r\n              <span className=\"text-sm text-gray-700\">{experienceDisplay}</span>\r\n            </div>\r\n            <input\r\n              type=\"hidden\"\r\n              {...register(\"experience_years\", {\r\n                valueAsNumber: true,\r\n                min: { value: 0, message: \"Experience must be positive\" },\r\n              })}\r\n            />\r\n          </div>\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"primary_vehicle_id\"\r\n            render={({ field }) => {\r\n              // Group vehicles by type\r\n              const vehiclesByType = vehicles.reduce((acc, vehicle) => {\r\n                const type = vehicle.type || 'other';\r\n                if (!acc[type]) acc[type] = [];\r\n                acc[type].push(vehicle);\r\n                return acc;\r\n              }, {} as Record<string, typeof vehicles>);\r\n              \r\n              // Create options with category headers\r\n              const vehicleOptions = [\r\n                { value: \"\", label: \"Select Vehicle\" },\r\n                ...Object.entries(vehiclesByType).flatMap(([type, vehicleList]) => [\r\n                  { value: `__header_${type}`, label: `--- ${type.charAt(0).toUpperCase() + type.slice(1)} ---`, disabled: true },\r\n                  ...vehicleList.map((vehicle) => ({\r\n                    value: vehicle.id,\r\n                    label: `${vehicle.registration_number} - ${vehicle.make} ${vehicle.model}`,\r\n                  })),\r\n                ])\r\n              ];\r\n              \r\n              return (\r\n                <Select\r\n                  label=\"Assigned Vehicle (by Category)\"\r\n                  options={vehicleOptions}\r\n                  disabled={isSubmitting}\r\n                  {...field}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mt-3 sm:mt-4\">\r\n          <Controller\r\n            control={control}\r\n            name=\"status\"\r\n            rules={{ required: \"Status is required\" }}\r\n            render={({ field }) => (\r\n              <Select\r\n                label=\"Status\"\r\n                options={[\r\n                  { value: \"active\", label: \"Active\" },\r\n                  { value: \"inactive\", label: \"Inactive\" },\r\n                  { value: \"onLeave\", label: \"On Leave\" },\r\n                  { value: \"suspended\", label: \"Suspended\" },\r\n                  { value: \"blacklisted\", label: \"Blacklisted\" },\r\n                ]}\r\n                error={errors.status?.message}\r\n                required\r\n                disabled={isSubmitting}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* Documents */}\r\n      <CollapsibleSection\r\n        title=\"Documents\"\r\n        icon={<FileText className=\"h-5 w-5\" />}\r\n        iconColor=\"text-red-600\"\r\n        defaultExpanded={false}\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n          <DocumentUploader\r\n            label=\"License Document\"\r\n            bucketType=\"driver\"\r\n            entityId={initialData?.id || 'temp'}\r\n            docType=\"license\"\r\n            accept=\".jpg,.jpeg,.png,.pdf\"\r\n            multiple={true}\r\n            onUploadComplete={(paths) => handleDocumentUpload('license', paths)}\r\n            initialFilePaths={initialData?.license_doc_url || []}\r\n            required\r\n            helperText=\"Upload license document (PDF/Image)\"\r\n          />\r\n          <DocumentUploader\r\n            label=\"Aadhar / ID Proof\"\r\n            bucketType=\"driver\"\r\n            entityId={initialData?.id || 'temp'}\r\n            docType=\"aadhar\"\r\n            accept=\".jpg,.jpeg,.png,.pdf\"\r\n            multiple={true}\r\n            onUploadComplete={(paths) => handleDocumentUpload('aadhar', paths)}\r\n            initialFilePaths={initialData?.aadhar_doc_url || []}\r\n            helperText=\"Upload Aadhar card or ID proof (PDF/Image)\"\r\n          />\r\n          <DocumentUploader\r\n            label=\"Police Verification\"\r\n            bucketType=\"driver\"\r\n            entityId={initialData?.id || 'temp'}\r\n            docType=\"police\"\r\n            accept=\".jpg,.jpeg,.png,.pdf\"\r\n            multiple={true}\r\n            onUploadComplete={(paths) => handleDocumentUpload('police', paths)}\r\n            initialFilePaths={initialData?.police_doc_url || []}\r\n            helperText=\"Upload police verification (PDF/Image)\"\r\n          />\r\n          <DocumentUploader\r\n            label=\"Medical Certificate\"\r\n            bucketType=\"driver\"\r\n            entityId={initialData?.id || 'temp'}\r\n            docType=\"medical\"\r\n            accept=\".jpg,.jpeg,.png,.pdf\"\r\n            multiple={true}\r\n            onUploadComplete={(paths) => handleDocumentUpload('medical', paths)}\r\n            initialFilePaths={initialData?.medical_doc_url || []}\r\n            helperText=\"Upload medical certificate (PDF/Image)\"\r\n          />\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* Notes */}\r\n      <CollapsibleSection\r\n        title=\"Notes\"\r\n        icon={<Database className=\"h-5 w-5\" />}\r\n        iconColor=\"text-gray-600\"\r\n        defaultExpanded={false}\r\n      >\r\n        <div className=\"space-y-3 sm:space-y-4\">\r\n          <div className=\"form-group\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Remarks / Internal Notes\r\n            </label>\r\n            <textarea\r\n              className=\"w-full px-2 sm:px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n              rows={4}\r\n              placeholder=\"Add any additional notes or remarks about this driver (for internal use only)\"\r\n              disabled={isSubmitting}\r\n              {...register(\"notes\")}\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n      </CollapsibleSection>\r\n\r\n      {/* Submit Button */}\r\n      <div className=\"flex justify-end pt-3 sm:pt-4\">\r\n        <Button type=\"submit\" isLoading={isSubmitting}>\r\n          {initialData?.id ? \"Update Driver\" : \"Add Driver\"}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DriverForm;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverInsightsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverSummaryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\DriverWhatsAppShareModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\drivers\\WhatsAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\examples\\OrganizationUsageExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\AppNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\DashboardHeader.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadData]","fix":{"range":[1300,1302],"text":"[loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { differenceInDays } from 'date-fns';\r\nimport { TrendingUp, Truck, CheckCircle, Award } from 'lucide-react';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport { usePermissions } from '../../hooks/usePermissions';\r\n\r\ninterface Organization {\r\n  id: string;\r\n  name: string;\r\n  logo_url?: string;\r\n  tagline?: string;\r\n  contact_email?: string;\r\n  contact_phone?: string;\r\n  address?: string;\r\n  city?: string;\r\n  state?: string;\r\n  pincode?: string;\r\n  gst_number?: string;\r\n  pan_number?: string;\r\n  owner_id: string;\r\n  created_at?: string;\r\n}\r\n\r\ninterface DashboardHeaderProps {\r\n  vehicleCount?: number;\r\n  className?: string;\r\n}\r\n\r\nconst DashboardHeader: React.FC<DashboardHeaderProps> = ({ className = '' }) => {\r\n  const { permissions } = usePermissions();\r\n  const { t } = useTranslation();\r\n  const [organization, setOrganization] = useState<Organization | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [logoError, setLogoError] = useState(false);\r\n  const [metrics, setMetrics] = useState({\r\n    fleetSize: 0,\r\n    tripsToday: 0,\r\n    totalTrips: 0,\r\n    onTimeRate: 95,\r\n    activeDays: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Load organization - get the most recent one for this user\r\n      const { data: orgData } = await supabase\r\n        .from('organizations')\r\n        .select('name, logo_url, created_at, tagline')\r\n        .eq('owner_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n      \r\n      const org = Array.isArray(orgData) && orgData.length > 0 ? orgData[0] : null;\r\n      \r\n      if (org) {\r\n        setOrganization(org);\r\n        setLogoError(false);\r\n      } else if (permissions?.organizationName) {\r\n        // ✅ USE PERMISSIONS AS FALLBACK if no org found\r\n        setOrganization({\r\n          id: permissions.organizationId || '',\r\n          name: permissions.organizationName,\r\n          owner_id: user.id\r\n        } as Organization);\r\n      }\r\n\r\n      // Load fleet metrics\r\n      const { count: vehicleCount } = await supabase\r\n        .from('vehicles')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('created_by', user.id);\r\n\r\n      // Get trip count and earliest trip date in a single query\r\n      const { data: tripStats } = await supabase\r\n        .from('trips')\r\n        .select('created_at')\r\n        .eq('created_by', user.id);\r\n\r\n      const totalTrips = tripStats?.length || 0;\r\n      const earliestTripDate = tripStats && tripStats.length > 0 \r\n        ? tripStats.reduce((earliest: string, trip: { created_at: string }) => \r\n            new Date(trip.created_at) < new Date(earliest) ? trip.created_at : earliest, \r\n            tripStats[0].created_at\r\n          )\r\n        : null;\r\n\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const { count: todayTrips } = await supabase\r\n        .from('trips')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('created_by', user.id)\r\n        .gte('created_at', today);\r\n\r\n      // Calculate active days from first trip\r\n      let activeDays = 0;\r\n      if (earliestTripDate) {\r\n        activeDays = differenceInDays(new Date(), new Date(earliestTripDate));\r\n      } else if (org?.created_at) {\r\n        // Fallback to organization creation date\r\n        activeDays = differenceInDays(new Date(), new Date(org.created_at));\r\n      }\r\n\r\n      setMetrics(prev => ({\r\n        ...prev,\r\n        fleetSize: vehicleCount || 0,\r\n        totalTrips: totalTrips || 0,\r\n        tripsToday: todayTrips || 0,\r\n        activeDays: activeDays\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error loading dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`rounded-xl border bg-white dark:bg-white px-4 py-3 shadow-sm mb-6 ${className}`}>\r\n        <div className=\"flex items-center space-x-3 mb-2\">\r\n          <div className=\"h-8 w-8 bg-gray-200 rounded animate-pulse\"></div>\r\n          <div>\r\n            <div className=\"h-6 w-32 bg-gray-200 rounded animate-pulse mb-1\"></div>\r\n            <div className=\"h-4 w-48 bg-gray-200 rounded animate-pulse\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`mb-3 ${className}`}>\r\n      {/* Company branding header */}\r\n      <div className=\"bg-white rounded-xl border border-gray-200 shadow-sm p-3 sm:p-6 mb-3 sm:mb-6\">\r\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-4\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            {organization?.logo_url && !logoError && (\r\n              <div className=\"relative flex items-center justify-center h-14 w-14 bg-white rounded-xl shadow-md border border-gray-200 hover:shadow-lg transition-all duration-200\">\r\n                <img \r\n                  src={organization.logo_url} \r\n                  alt={organization.name}\r\n                  className=\"h-13 w-13 object-contain p-0.5 filter drop-shadow-sm\"\r\n                  onError={() => {\r\n                    setLogoError(true);\r\n                  }}\r\n                />\r\n                {/* Subtle client company indicator */}\r\n                <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-blue-500 rounded-full border border-white shadow-sm\"></div>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <h1 className=\"text-xl font-bold text-gray-900\">\r\n                  {organization?.name || permissions?.organizationName || 'Dashboard'}\r\n                </h1>\r\n                {/* Subtle \"Powered by AVS\" indicator */}\r\n                <div className=\"flex items-center gap-1 px-2 py-0.5 bg-primary-50 rounded-full border border-primary-200\">\r\n                  <div className=\"h-1.5 w-1.5 bg-primary-500 rounded-full\"></div>\r\n                  <span className=\"text-[10px] font-medium text-primary-700\">Powered by AVS</span>\r\n                </div>\r\n              </div>\r\n              {organization?.tagline && (\r\n                <p className=\"text-sm text-gray-600 mt-1\">{organization.tagline}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Motivational metrics */}\r\n          <div className=\"hidden md:flex items-center space-x-4 text-sm\">\r\n            <div className=\"flex items-center space-x-2 bg-primary-50 rounded-lg px-2 py-1\">\r\n              <Truck className=\"h-4 w-4 text-primary-600\" />\r\n              <span className=\"text-gray-600\">{t('dashboard.fleetVehicles', { count: metrics.fleetSize })}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2 bg-green-50 rounded-lg px-2 py-1\">\r\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n              <span className=\"text-gray-600\">{t('dashboard.todayTrips', { count: metrics.tripsToday })}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2 bg-blue-50 rounded-lg px-2 py-1\">\r\n              <TrendingUp className=\"h-4 w-4 text-blue-600\" />\r\n              <span className=\"text-gray-600\">{t('dashboard.totalTrips', { count: metrics.totalTrips })}</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2 bg-yellow-50 rounded-lg px-2 py-1\">\r\n              <Award className=\"h-4 w-4 text-yellow-600\" />\r\n              <span className=\"text-gray-600\">{t('dashboard.activeDays', { count: metrics.activeDays })}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile metrics */}\r\n      <div className=\"md:hidden grid grid-cols-2 gap-2 text-sm\">\r\n        <div className=\"flex items-center space-x-2 bg-primary-50 rounded-lg px-2 py-1\">\r\n          <Truck className=\"h-4 w-4 text-primary-600\" />\r\n          <span className=\"font-medium\">{t('dashboard.fleetVehicles', { count: metrics.fleetSize })}</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2 bg-green-50 rounded-lg px-2 py-1\">\r\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n          <span className=\"font-medium\">{t('dashboard.todayTrips', { count: metrics.tripsToday })}</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2 bg-blue-50 rounded-lg px-2 py-1\">\r\n          <TrendingUp className=\"h-4 w-4 text-blue-600\" />\r\n          <span className=\"font-medium\">{t('dashboard.totalTrips', { count: metrics.totalTrips })}</span>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2 bg-yellow-50 rounded-lg px-2 py-1\">\r\n          <Award className=\"h-4 w-4 text-yellow-600\" />\r\n          <span className=\"font-medium\">{t('dashboard.activeDays', { count: metrics.activeDays })}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardHeader;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\layout\\navLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\ComplaintResolutionSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\DocumentsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\EnhancedDowntimeSection.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":147,"column":30,"nodeType":"Identifier","endLine":147,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\nimport { Clock, Calendar, AlertTriangle, CheckCircle } from 'lucide-react';\r\nimport { ANIMATIONS } from '@/utils/animations';\r\nimport { MaintenanceTask } from '@/types/maintenance';\r\nimport AnimatedButton from '../ui/AnimatedButton';\r\nimport AnimatedError from '../ui/AnimatedError';\r\n\r\ninterface EnhancedDowntimeSectionProps {\r\n  className?: string;\r\n}\r\n\r\nconst DOWNTIME_PRESETS = [\r\n  { id: \"2h\", label: \"2 h\", days: 0, hours: 2, color: \"bg-blue-100 text-blue-700 border-blue-200\" },\r\n  { id: \"4h\", label: \"4 h\", days: 0, hours: 4, color: \"bg-blue-100 text-blue-700 border-blue-200\" },\r\n  { id: \"6h\", label: \"6 h\", days: 0, hours: 6, color: \"bg-blue-100 text-blue-700 border-blue-200\" },\r\n  { id: \"8h\", label: \"8 h\", days: 0, hours: 8, color: \"bg-blue-100 text-blue-700 border-blue-200\" },\r\n  { id: \"1d\", label: \"1 d\", days: 1, hours: 0, color: \"bg-orange-100 text-orange-700 border-orange-200\" },\r\n  { id: \"2d\", label: \"2 d\", days: 2, hours: 0, color: \"bg-orange-100 text-orange-700 border-orange-200\" },\r\n  { id: \"3d\", label: \"3 d\", days: 3, hours: 0, color: \"bg-red-100 text-red-700 border-red-200\" },\r\n];\r\n\r\nconst DOWNTIME_CATEGORIES = [\r\n  { value: 'maintenance', label: 'Maintenance', icon: '🔧', color: 'bg-blue-50 text-blue-700' },\r\n  { value: 'repair', label: 'Repair', icon: '🛠️', color: 'bg-orange-50 text-orange-700' },\r\n  { value: 'inspection', label: 'Inspection', icon: '🔍', color: 'bg-green-50 text-green-700' },\r\n  { value: 'accident', label: 'Accident', icon: '⚠️', color: 'bg-red-50 text-red-700' },\r\n  { value: 'breakdown', label: 'Breakdown', icon: '🚨', color: 'bg-red-50 text-red-700' },\r\n  { value: 'scheduled', label: 'Scheduled', icon: '📅', color: 'bg-purple-50 text-purple-700' },\r\n  { value: 'emergency', label: 'Emergency', icon: '🚑', color: 'bg-red-50 text-red-700' },\r\n];\r\n\r\nconst IMPACT_LEVELS = [\r\n  { value: 'low', label: 'Low Impact', color: 'bg-green-100 text-green-700', description: 'Minimal business impact' },\r\n  { value: 'medium', label: 'Medium Impact', color: 'bg-yellow-100 text-yellow-700', description: 'Moderate business impact' },\r\n  { value: 'high', label: 'High Impact', color: 'bg-orange-100 text-orange-700', description: 'Significant business impact' },\r\n  { value: 'critical', label: 'Critical Impact', color: 'bg-red-100 text-red-700', description: 'Severe business impact' },\r\n];\r\n\r\n// Debounce utility function\r\nconst debounce = <T extends (...args: any[]) => void>(func: T, delay: number) => {\r\n  let timeoutId: ReturnType<typeof setTimeout>;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => func(...args), delay);\r\n  };\r\n};\r\n\r\nconst EnhancedDowntimeSection: React.FC<EnhancedDowntimeSectionProps> = ({ className = '' }) => {\r\n  const { register, watch, setValue, formState: { errors } } = useFormContext<Partial<MaintenanceTask>>();\r\n  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);\r\n  const [showAdvanced, setShowAdvanced] = useState(false);\r\n  const [downtimeStartTime, setDowntimeStartTime] = useState<string>('');\r\n  const [downtimeEndTime, setDowntimeEndTime] = useState<string>('');\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [clickCount, setClickCount] = useState(0);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const lastClickTimeRef = useRef<number>(0);\r\n\r\n  const downtimeDays = watch('downtime_days') || 0;\r\n  const downtimeHours = watch('downtime_hours') || 0;\r\n  const downtimeCategory = watch('downtime_category') || 'maintenance';\r\n  const downtimeImpactLevel = watch('downtime_impact_level') || 'medium';\r\n  const downtimeReason = watch('downtime_reason') || '';\r\n\r\n  // CRASH-PROOF: Use useMemo to prevent expensive recalculations on every render\r\n  // This prevents main thread blocking that causes RESULT_CODE_HUNG crashes\r\n  const downtimeCalculations = useMemo(() => {\r\n    const totalDowntimeHours = (downtimeDays * 24) + downtimeHours;\r\n    const totalDowntimeDays = Math.floor(totalDowntimeHours / 24);\r\n    const remainingHours = totalDowntimeHours % 24;\r\n    \r\n    return {\r\n      totalDowntimeHours,\r\n      totalDowntimeDays,\r\n      remainingHours\r\n    };\r\n  }, [downtimeDays, downtimeHours]);\r\n\r\n  // Destructure for easier use\r\n  const { totalDowntimeHours, totalDowntimeDays, remainingHours } = downtimeCalculations;\r\n\r\n  // CRASH-PROOF handler to prevent RESULT_CODE_HUNG errors\r\n  const handlePresetSelectInternal = useCallback((preset: typeof DOWNTIME_PRESETS[0]) => {\r\n    const currentTime = Date.now();\r\n    \r\n    // Clear any existing timeout\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n    \r\n    // CRITICAL: Prevent rapid clicks that cause main thread blocking\r\n    if (isProcessing) {\r\n      console.log('🚫 Still processing previous click, ignoring to prevent RESULT_CODE_HUNG crash...');\r\n      return;\r\n    }\r\n    \r\n    // CRITICAL: Prevent clicks too close together (less than 100ms apart)\r\n    if (currentTime - lastClickTimeRef.current < 100) {\r\n      console.log('🚫 Click too rapid, ignoring to prevent crash...');\r\n      return;\r\n    }\r\n    \r\n    // CRITICAL: Prevent excessive clicking that can overwhelm the main thread\r\n    if (clickCount > 10) {\r\n      console.log('🚫 Too many clicks detected, temporarily blocking to prevent crash...');\r\n      setTimeout(() => setClickCount(0), 2000); // Reset after 2 seconds\r\n      return;\r\n    }\r\n    \r\n    // Update tracking variables\r\n    lastClickTimeRef.current = currentTime;\r\n    setClickCount(prev => prev + 1);\r\n    setIsProcessing(true);\r\n    \r\n    console.log(`🎯 Quick select clicked: ${preset.id} (${preset.days}d ${preset.hours}h) - Click #${clickCount + 1}`);\r\n    \r\n    // Use requestAnimationFrame to defer state updates and prevent main thread blocking\r\n    // This is CRITICAL to prevent RESULT_CODE_HUNG crashes\r\n    requestAnimationFrame(() => {\r\n      try {\r\n        // Batch all state updates together to prevent multiple re-renders\r\n        setValue('downtime_days', preset.days, { shouldDirty: true, shouldValidate: false });\r\n        setValue('downtime_hours', preset.hours, { shouldDirty: true, shouldValidate: false });\r\n        setSelectedPreset(preset.id);\r\n        \r\n        console.log(`✅ Successfully updated downtime: ${preset.days}d ${preset.hours}h`);\r\n        \r\n        // Add success animation with error handling\r\n        timeoutRef.current = setTimeout(() => {\r\n          setSelectedPreset(null);\r\n        }, 1000);\r\n        \r\n      } catch (error) {\r\n        console.error('❌ Error updating downtime (preventing crash):', error);\r\n        setSelectedPreset(null);\r\n      } finally {\r\n        // Reset processing state after a delay to prevent rapid successive clicks\r\n        timeoutRef.current = setTimeout(() => {\r\n          setIsProcessing(false);\r\n        }, 500);\r\n      }\r\n    });\r\n  }, [isProcessing, setValue, clickCount]);\r\n\r\n  // Debounced version with longer delay to prevent rapid clicks that cause crashes\r\n  const handlePresetSelect = useCallback(\r\n    debounce(handlePresetSelectInternal, 500), // Increased to 500ms for better crash prevention\r\n    [handlePresetSelectInternal]\r\n  );\r\n\r\n  // Handle custom downtime input\r\n  const handleCustomDowntimeChange = (field: 'downtime_days' | 'downtime_hours', value: number) => {\r\n    try {\r\n      setValue(field, Math.max(0, value));\r\n      setSelectedPreset(null);\r\n    } catch (error) {\r\n      console.error('Error in handleCustomDowntimeChange:', error);\r\n    }\r\n  };\r\n\r\n  // Cleanup timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Auto-calculate downtime from start/end times\r\n  useEffect(() => {\r\n    if (downtimeStartTime && downtimeEndTime) {\r\n      const start = new Date(downtimeStartTime);\r\n      const end = new Date(downtimeEndTime);\r\n      \r\n      if (end > start) {\r\n        const diffMs = end.getTime() - start.getTime();\r\n        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n        const days = Math.floor(diffHours / 24);\r\n        const hours = diffHours % 24;\r\n        \r\n        setValue('downtime_days', days);\r\n        setValue('downtime_hours', hours);\r\n      }\r\n    }\r\n  }, [downtimeStartTime, downtimeEndTime, setValue]);\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow-sm p-5 space-y-4 ${className}`}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 flex items-center\">\r\n          <Clock className=\"h-5 w-5 mr-2 text-primary-500\" />\r\n          Downtime Tracking\r\n        </h3>\r\n        \r\n        <AnimatedButton\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={() => setShowAdvanced(!showAdvanced)}\r\n          className=\"text-primary-600 hover:text-primary-700\"\r\n        >\r\n          {showAdvanced ? 'Simple' : 'Advanced'}\r\n        </AnimatedButton>\r\n      </div>\r\n\r\n      {/* Downtime Summary */}\r\n      {totalDowntimeHours > 0 && (\r\n        <div \r\n          className={`\r\n            p-4 rounded-lg border-2 border-dashed\r\n            ${ANIMATIONS.CLASSES.TRANSITION_SMOOTH}\r\n            animate-in fade-in slide-in-from-top-1 duration-300\r\n          `}\r\n          style={{\r\n            borderColor: downtimeImpactLevel === 'critical' ? '#ef4444' : \r\n                        downtimeImpactLevel === 'high' ? '#f97316' :\r\n                        downtimeImpactLevel === 'medium' ? '#eab308' : '#22c55e'\r\n          }}\r\n        >\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"p-2 bg-primary-100 rounded-lg\">\r\n                <Clock className=\"h-5 w-5 text-primary-600\" />\r\n              </div>\r\n              <div>\r\n                <h4 className=\"font-semibold text-gray-900\">\r\n                  Total Downtime: {totalDowntimeDays > 0 && `${totalDowntimeDays}d `}{remainingHours}h\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {DOWNTIME_CATEGORIES.find(c => c.value === downtimeCategory)?.icon} \r\n                  {DOWNTIME_CATEGORIES.find(c => c.value === downtimeCategory)?.label}\r\n                  {' • '}\r\n                  {IMPACT_LEVELS.find(i => i.value === downtimeImpactLevel)?.label}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"text-right\">\r\n              <div className=\"text-2xl font-bold text-primary-600\">\r\n                {totalDowntimeHours}h\r\n              </div>\r\n              <div className=\"text-xs text-gray-500\">Total Hours</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Quick Presets */}\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <label className=\"block text-sm font-medium text-gray-700\">\r\n            Quick Select\r\n          </label>\r\n          {isProcessing && (\r\n            <div className=\"flex items-center text-xs text-blue-600 animate-pulse\">\r\n              <Clock className=\"h-3 w-3 mr-1\" />\r\n              Processing...\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"grid grid-cols-4 sm:grid-cols-7 gap-2\">\r\n          {DOWNTIME_PRESETS.map((preset) => (\r\n            <button\r\n              key={preset.id}\r\n              type=\"button\"\r\n              onClick={() => handlePresetSelect(preset)}\r\n              disabled={isProcessing}\r\n              className={`\r\n                px-3 py-2 text-sm font-medium rounded-lg border-2 transition-all duration-200\r\n                ${selectedPreset === preset.id \r\n                  ? 'animate-pulse scale-110 shadow-lg' \r\n                  : preset.color\r\n                }\r\n                ${isProcessing \r\n                  ? 'opacity-60 cursor-not-allowed' \r\n                  : `${ANIMATIONS.CLASSES.HOVER_SCALE} hover:scale-105`\r\n                }\r\n                focus:outline-none focus:ring-2 focus:ring-primary-500\r\n                disabled:opacity-60 disabled:cursor-not-allowed\r\n              `}\r\n            >\r\n              {preset.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Custom Input */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Days\r\n          </label>\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"1\"\r\n              value={downtimeDays}\r\n              onChange={(e) => handleCustomDowntimeChange('downtime_days', parseInt(e.target.value) || 0)}\r\n              className={`\r\n                w-full px-3 py-2 border rounded-lg\r\n                focus:outline-none focus:ring-2 focus:ring-primary-500\r\n                ${errors.downtime_days ? 'border-red-500 animate-shake' : 'border-gray-300'}\r\n                ${ANIMATIONS.CLASSES.TRANSITION_SMOOTH}\r\n              `}\r\n              placeholder=\"0\"\r\n            />\r\n            {errors.downtime_days && (\r\n              <AnimatedError message={errors.downtime_days.message} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Hours\r\n          </label>\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"23\"\r\n              step=\"1\"\r\n              value={downtimeHours}\r\n              onChange={(e) => handleCustomDowntimeChange('downtime_hours', parseInt(e.target.value) || 0)}\r\n              className={`\r\n                w-full px-3 py-2 border rounded-lg\r\n                focus:outline-none focus:ring-2 focus:ring-primary-500\r\n                ${errors.downtime_hours ? 'border-red-500 animate-shake' : 'border-gray-300'}\r\n                ${ANIMATIONS.CLASSES.TRANSITION_SMOOTH}\r\n              `}\r\n              placeholder=\"0\"\r\n            />\r\n            {errors.downtime_hours && (\r\n              <AnimatedError message={errors.downtime_hours.message} />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Advanced Options */}\r\n      {showAdvanced && (\r\n        <div \r\n          className={`\r\n            space-y-4 p-4 bg-gray-50 rounded-lg border\r\n            animate-in fade-in slide-in-from-top-1 duration-300\r\n          `}\r\n        >\r\n          <h4 className=\"font-medium text-gray-900 flex items-center\">\r\n            <AlertTriangle className=\"h-4 w-4 mr-2 text-orange-500\" />\r\n            Advanced Downtime Tracking\r\n          </h4>\r\n\r\n          {/* Start/End Times */}\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Start Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={downtimeStartTime}\r\n                onChange={(e) => setDowntimeStartTime(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                End Time\r\n              </label>\r\n              <input\r\n                type=\"datetime-local\"\r\n                value={downtimeEndTime}\r\n                onChange={(e) => setDowntimeEndTime(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Category Selection */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Downtime Category\r\n            </label>\r\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\r\n              {DOWNTIME_CATEGORIES.map((category) => (\r\n                <button\r\n                  key={category.value}\r\n                  type=\"button\"\r\n                  onClick={() => setValue('downtime_category', category.value)}\r\n                  className={`\r\n                    p-3 rounded-lg border-2 text-center transition-all duration-200\r\n                    ${downtimeCategory === category.value \r\n                      ? 'border-primary-500 bg-primary-50' \r\n                      : 'border-gray-200 bg-white hover:border-gray-300'\r\n                    }\r\n                    ${ANIMATIONS.CLASSES.HOVER_SCALE}\r\n                  `}\r\n                >\r\n                  <div className=\"text-2xl mb-1\">{category.icon}</div>\r\n                  <div className=\"text-xs font-medium\">{category.label}</div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Impact Level */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Impact Level\r\n            </label>\r\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\r\n              {IMPACT_LEVELS.map((impact) => (\r\n                <button\r\n                  key={impact.value}\r\n                  type=\"button\"\r\n                  onClick={() => setValue('downtime_impact_level', impact.value)}\r\n                  className={`\r\n                    p-3 rounded-lg border-2 text-center transition-all duration-200\r\n                    ${downtimeImpactLevel === impact.value \r\n                      ? 'border-primary-500 bg-primary-50' \r\n                      : 'border-gray-200 bg-white hover:border-gray-300'\r\n                    }\r\n                    ${ANIMATIONS.CLASSES.HOVER_SCALE}\r\n                  `}\r\n                >\r\n                  <div className={`text-sm font-medium ${impact.color}`}>\r\n                    {impact.label}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 mt-1\">\r\n                    {impact.description}\r\n                  </div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Reason */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Reason (Optional)\r\n            </label>\r\n            <textarea\r\n              {...register('downtime_reason')}\r\n              value={downtimeReason}\r\n              onChange={(e) => setValue('downtime_reason', e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n              placeholder=\"Describe the reason for downtime...\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Validation Messages */}\r\n      {errors.downtime_days && (\r\n        <AnimatedError message={errors.downtime_days.message} />\r\n      )}\r\n      {errors.downtime_hours && (\r\n        <AnimatedError message={errors.downtime_hours.message} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedDowntimeSection;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\EnhancedMaintenanceForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'endDate', 'odometerReading', and 'startDate'. Either exclude them or remove the dependency array.","line":148,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [isSubmitting, externalIsSubmitting, odometerPhoto, documents, onSubmit]","fix":{"range":[4302,4419],"text":"[isSubmitting, externalIsSubmitting, odometerPhoto, documents, onSubmit]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\r\nimport { useForm, FormProvider, Controller } from 'react-hook-form';\r\nimport { Vehicle } from '@/types';\r\nimport { MaintenanceTask } from '@/types/maintenance';\r\nimport FileUploadWithProgress from '../ui/FileUploadWithProgress';\r\nimport { toast } from 'react-toastify';\r\nimport { \r\n  Calendar,\r\n  Truck,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Wrench,\r\n  FileText,\r\n  Upload\r\n} from 'lucide-react';\r\nimport '../../styles/FileUploadWithProgress.css';\r\n\r\ninterface EnhancedMaintenanceFormProps {\r\n  onSubmit: (data: Partial<MaintenanceTask>) => void;\r\n  vehicles: Vehicle[];\r\n  initialData?: Partial<MaintenanceTask>;\r\n  isSubmitting: boolean;\r\n}\r\n\r\nconst EnhancedMaintenanceForm: React.FC<EnhancedMaintenanceFormProps> = ({\r\n  onSubmit,\r\n  vehicles,\r\n  initialData,\r\n  isSubmitting: externalIsSubmitting\r\n}) => {\r\n  // Form states\r\n  const [odometerPhoto, setOdometerPhoto] = useState<File[]>([]);\r\n  const [documents, setDocuments] = useState<File[]>([]);\r\n  \r\n  // Submission states\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitError, setSubmitError] = useState<string | null>(null);\r\n  const [submitSuccess, setSubmitSuccess] = useState(false);\r\n  const [overallProgress, setOverallProgress] = useState(0);\r\n\r\n  const methods = useForm<Partial<MaintenanceTask>>({\r\n    defaultValues: {\r\n      task_type: \"general_scheduled_service\",\r\n      priority: \"medium\",\r\n      status: \"open\",\r\n      estimated_cost: 0,\r\n      parts_required: [],\r\n      start_date: new Date().toISOString().split(\"T\")[0],\r\n      title: [],\r\n      warranty_claimed: false,\r\n      downtime_days: 0,\r\n      downtime_hours: 0,\r\n      service_groups: [\r\n        {\r\n          vendor_id: \"\",\r\n          tasks: [],\r\n          cost: 0,\r\n          battery_tracking: false,\r\n          tyre_tracking: false,\r\n        },\r\n      ],\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    control,\r\n    setValue,\r\n    formState: { errors },\r\n  } = methods;\r\n\r\n  const startDate = watch(\"start_date\");\r\n  const endDate = watch(\"end_date\");\r\n  const odometerReading = watch(\"odometer_reading\");\r\n  const downtimeDays = watch(\"downtime_days\");\r\n  const downtimeHours = watch(\"downtime_hours\");\r\n  const status = watch(\"status\");\r\n  const complaintDescription = watch(\"complaint_description\");\r\n  const resolutionSummary = watch(\"resolution_summary\");\r\n\r\n  // Handle form submission with upload progress\r\n  const handleFormSubmit = useCallback(async (data: Partial<MaintenanceTask>) => {\r\n    if (isSubmitting || externalIsSubmitting) return;\r\n    \r\n    setSubmitError(null);\r\n    setSubmitSuccess(false);\r\n    setIsSubmitting(true);\r\n    setOverallProgress(0);\r\n    \r\n    try {\r\n      // Validation\r\n      if (!data.start_date) {\r\n        throw new Error('Start date is required');\r\n      }\r\n      if (!data.end_date) {\r\n        throw new Error('End date is required');\r\n      }\r\n      if (!data.odometer_reading) {\r\n        throw new Error('Odometer reading is required');\r\n      }\r\n      \r\n      // Prepare form data with files\r\n      const formData = {\r\n        ...data,\r\n        odometer_image: odometerPhoto,\r\n        attachments: documents,\r\n      };\r\n      \r\n      setOverallProgress(10);\r\n      \r\n      // Simulate upload progress (replace with actual upload logic)\r\n      const uploadProgress = setInterval(() => {\r\n        setOverallProgress(prev => {\r\n          if (prev >= 90) {\r\n            clearInterval(uploadProgress);\r\n            return 90;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 200);\r\n      \r\n      // Submit the form\r\n      await onSubmit(formData);\r\n      \r\n      setOverallProgress(100);\r\n      setSubmitSuccess(true);\r\n      \r\n      console.log('✅ Task created successfully');\r\n      \r\n      // Show success for 2 seconds then reset\r\n      setTimeout(() => {\r\n        setSubmitSuccess(false);\r\n        setIsSubmitting(false);\r\n        setOverallProgress(0);\r\n        // Reset form or navigate\r\n      }, 2000);\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Submission error:', error);\r\n      setSubmitError(error instanceof Error ? error.message : 'Failed to create task');\r\n      setIsSubmitting(false);\r\n      setOverallProgress(0);\r\n    }\r\n  }, [isSubmitting, externalIsSubmitting, startDate, endDate, odometerReading, \r\n      odometerPhoto, documents, onSubmit]);\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <form onSubmit={handleSubmit(handleFormSubmit)} className=\"enhanced-maintenance-form\">\r\n        <div className=\"form-header\">\r\n          <h2 className=\"form-title\">\r\n            <Wrench className=\"h-6 w-6\" />\r\n            Service Details\r\n          </h2>\r\n        </div>\r\n        \r\n        {/* Date fields */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Service Period\r\n          </h3>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <label>Start Date *</label>\r\n              <input \r\n                type=\"date\" \r\n                {...register(\"start_date\", { required: \"Start date is required\" })}\r\n                className={errors.start_date ? 'error' : ''}\r\n              />\r\n              {errors.start_date && (\r\n                <span className=\"error-text\">{errors.start_date.message}</span>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>End Date *</label>\r\n              <input \r\n                type=\"date\" \r\n                {...register(\"end_date\", { required: \"End date is required\" })}\r\n                className={errors.end_date ? 'error' : ''}\r\n              />\r\n              {errors.end_date && (\r\n                <span className=\"error-text\">{errors.end_date.message}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Downtime tracking */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <Clock className=\"h-5 w-5\" />\r\n            Downtime Tracking\r\n          </h3>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <label>Days</label>\r\n              <input \r\n                type=\"number\" \r\n                {...register(\"downtime_days\", { min: 0 })}\r\n                min=\"0\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Hours</label>\r\n              <input \r\n                type=\"number\" \r\n                {...register(\"downtime_hours\", { min: 0, max: 23 })}\r\n                min=\"0\"\r\n                max=\"23\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Complaint & Resolution */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            Issue Details\r\n          </h3>\r\n          <div className=\"form-group\">\r\n            <label>Complaint Description</label>\r\n            <textarea \r\n              {...register(\"complaint_description\")}\r\n              rows={4}\r\n              placeholder=\"Detailed description of the complaint or issue...\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Resolution Summary</label>\r\n            <textarea \r\n              {...register(\"resolution_summary\")}\r\n              rows={4}\r\n              placeholder=\"Summary of the resolution or fix applied...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Odometer */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <Truck className=\"h-5 w-5\" />\r\n            Vehicle Information\r\n          </h3>\r\n          <div className=\"form-group\">\r\n            <label>Odometer Reading *</label>\r\n            <input \r\n              type=\"number\" \r\n              {...register(\"odometer_reading\", { required: \"Odometer reading is required\" })}\r\n              placeholder=\"Enter odometer reading\"\r\n              className={errors.odometer_reading ? 'error' : ''}\r\n            />\r\n            {errors.odometer_reading && (\r\n              <span className=\"error-text\">{errors.odometer_reading.message}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* File Uploads with Individual Progress */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <Upload className=\"h-5 w-5\" />\r\n            Document Upload\r\n          </h3>\r\n          \r\n          <FileUploadWithProgress\r\n            id=\"odometerPhoto\"\r\n            label=\"Odometer Photo\"\r\n            accept=\"image/jpeg,image/jpg,image/png\"\r\n            multiple={false}\r\n            compress={true}\r\n            maxSize={5 * 1024 * 1024}\r\n            onFilesChange={setOdometerPhoto}\r\n            helperText=\"Upload a clear photo of the odometer reading\"\r\n          />\r\n\r\n          <FileUploadWithProgress\r\n            id=\"documents\"\r\n            label=\"Supporting Documents\"\r\n            accept=\".jpg,.jpeg,.png,.pdf\"\r\n            multiple={true}\r\n            compress={false}\r\n            maxSize={10 * 1024 * 1024}\r\n            onFilesChange={setDocuments}\r\n            helperText=\"Upload warranty cards, bills, or other relevant documents\"\r\n          />\r\n        </div>\r\n\r\n        {/* Status */}\r\n        <div className=\"form-section\">\r\n          <h3 className=\"section-title\">\r\n            <CheckCircle className=\"h-5 w-5\" />\r\n            Task Status\r\n          </h3>\r\n          <div className=\"form-group\">\r\n            <label>Status *</label>\r\n            <select {...register(\"status\", { required: \"Status is required\" })}>\r\n              <option value=\"open\">Open</option>\r\n              <option value=\"in_progress\">In Progress</option>\r\n              <option value=\"completed\">Completed</option>\r\n              <option value=\"closed\">Closed</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Error Message */}\r\n        {submitError && (\r\n          <div className=\"alert alert-error\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            {submitError}\r\n          </div>\r\n        )}\r\n\r\n        {/* Success Message */}\r\n        {submitSuccess && (\r\n          <div className=\"alert alert-success\">\r\n            <CheckCircle className=\"h-5 w-5\" />\r\n            Task created successfully!\r\n          </div>\r\n        )}\r\n\r\n        {/* Overall Progress Bar (during submission) */}\r\n        {isSubmitting && (\r\n          <div className=\"overall-progress\">\r\n            <div className=\"progress-bar-container\">\r\n              <div \r\n                className=\"progress-bar-fill\" \r\n                style={{ width: `${overallProgress}%` }}\r\n              />\r\n            </div>\r\n            <div className=\"progress-text\">\r\n              Uploading... {overallProgress}%\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Submit Button */}\r\n        <button \r\n          type=\"submit\" \r\n          disabled={isSubmitting || externalIsSubmitting || submitSuccess}\r\n          className={`create-task-btn ${submitSuccess ? 'success' : ''}`}\r\n        >\r\n          {submitSuccess ? (\r\n            <>\r\n              <CheckCircle className=\"h-5 w-5\" />\r\n              Task Created!\r\n            </>\r\n          ) : isSubmitting ? (\r\n            <>\r\n              <div className=\"spinner\" />\r\n              Creating Task... {overallProgress}%\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Wrench className=\"h-5 w-5\" />\r\n              Create Task\r\n            </>\r\n          )}\r\n        </button>\r\n      </form>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default EnhancedMaintenanceForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\EnhancedMaintenanceTaskForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\ExpenditureAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\GarageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\KPIPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\MaintenanceAuditLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\MaintenanceCalendar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'vehicleMap' object construction makes the dependencies of useEffect Hook (at line 97) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'vehicleMap' in its own useMemo() Hook.","line":33,"column":9,"nodeType":"VariableDeclarator","endLine":33,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { MaintenanceTask } from \"@/types/maintenance\";\r\nimport { Vehicle } from \"@/types\";\r\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, isToday, isPast, addMonths, subMonths } from \"date-fns\";\r\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon, Clock, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\";\r\nimport Button from \"../ui/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface MaintenanceCalendarProps {\r\n  tasks: MaintenanceTask[];\r\n  vehicles: Vehicle[];\r\n}\r\n\r\ninterface CalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  date: Date;\r\n  type: 'start' | 'end' | 'due' | 'overdue';\r\n  status: string;\r\n  priority: string;\r\n  vehicleId: string;\r\n  vehicleRegistration: string;\r\n  task: MaintenanceTask;\r\n}\r\n\r\nconst MaintenanceCalendar: React.FC<MaintenanceCalendarProps> = ({ tasks, vehicles }) => {\r\n  const navigate = useNavigate();\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\r\n\r\n  // Create a map of vehicles for quick lookup\r\n  const vehicleMap = new Map(vehicles.map(v => [v.id, v]));\r\n\r\n  // Generate calendar events from maintenance tasks\r\n  useEffect(() => {\r\n    const calendarEvents: CalendarEvent[] = [];\r\n\r\n    tasks.forEach(task => {\r\n      const vehicle = vehicleMap.get(task.vehicle_id);\r\n      if (!vehicle) return;\r\n\r\n      const vehicleRegistration = vehicle.registration_number;\r\n\r\n      // Add start date event\r\n      if (task.start_date) {\r\n        const startDate = new Date(task.start_date);\r\n        calendarEvents.push({\r\n          id: `${task.id}-start`,\r\n          title: `Start: ${task.task_type}`,\r\n          date: startDate,\r\n          type: 'start',\r\n          status: task.status,\r\n          priority: task.priority,\r\n          vehicleId: task.vehicle_id,\r\n          vehicleRegistration,\r\n          task,\r\n        });\r\n      }\r\n\r\n      // Add end date event\r\n      if (task.end_date) {\r\n        const endDate = new Date(task.end_date);\r\n        calendarEvents.push({\r\n          id: `${task.id}-end`,\r\n          title: `End: ${task.task_type}`,\r\n          date: endDate,\r\n          type: 'end',\r\n          status: task.status,\r\n          priority: task.priority,\r\n          vehicleId: task.vehicle_id,\r\n          vehicleRegistration,\r\n          task,\r\n        });\r\n      }\r\n\r\n      // Add next service due event\r\n      if (task.next_service_due?.date) {\r\n        const dueDate = new Date(task.next_service_due.date);\r\n        const isOverdue = isPast(dueDate) && task.status !== 'resolved';\r\n        \r\n        calendarEvents.push({\r\n          id: `${task.id}-due`,\r\n          title: `Due: ${task.task_type}`,\r\n          date: dueDate,\r\n          type: isOverdue ? 'overdue' : 'due',\r\n          status: task.status,\r\n          priority: task.priority,\r\n          vehicleId: task.vehicle_id,\r\n          vehicleRegistration,\r\n          task,\r\n        });\r\n      }\r\n    });\r\n\r\n    setEvents(calendarEvents);\r\n  }, [tasks, vehicleMap]);\r\n\r\n  // Get events for a specific date\r\n  const getEventsForDate = (date: Date): CalendarEvent[] => {\r\n    return events.filter(event => isSameDay(event.date, date));\r\n  };\r\n\r\n  // Get events for selected date\r\n  const selectedDateEvents = selectedDate ? getEventsForDate(selectedDate) : [];\r\n\r\n  // Calendar navigation\r\n  const goToPreviousMonth = () => {\r\n    setCurrentDate(subMonths(currentDate, 1));\r\n  };\r\n\r\n  const goToNextMonth = () => {\r\n    setCurrentDate(addMonths(currentDate, 1));\r\n  };\r\n\r\n  const goToToday = () => {\r\n    setCurrentDate(new Date());\r\n    setSelectedDate(new Date());\r\n  };\r\n\r\n  // Generate calendar days\r\n  const monthStart = startOfMonth(currentDate);\r\n  const monthEnd = endOfMonth(currentDate);\r\n  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\r\n\r\n  // Get event type styling\r\n  const getEventTypeStyle = (type: CalendarEvent['type']) => {\r\n    switch (type) {\r\n      case 'start':\r\n        return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case 'end':\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'due':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'overdue':\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  // Get priority styling\r\n  const getPriorityStyle = (priority: string) => {\r\n    switch (priority) {\r\n      case 'critical':\r\n        return 'border-l-4 border-red-500';\r\n      case 'high':\r\n        return 'border-l-4 border-orange-500';\r\n      case 'medium':\r\n        return 'border-l-4 border-yellow-500';\r\n      case 'low':\r\n        return 'border-l-4 border-green-500';\r\n      default:\r\n        return 'border-l-4 border-gray-500';\r\n    }\r\n  };\r\n\r\n  // Get status icon\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'resolved':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'in_progress':\r\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'escalated':\r\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'open':\r\n        return <XCircle className=\"h-4 w-4 text-gray-500\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n      {/* Calendar Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <CalendarIcon className=\"h-6 w-6 text-primary-500\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900\">\r\n            Maintenance Calendar\r\n          </h2>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            inputSize=\"sm\"\r\n            onClick={goToPreviousMonth}\r\n            icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n          >\r\n            Previous\r\n          </Button>\r\n          \r\n          <Button\r\n            variant=\"outline\"\r\n            inputSize=\"sm\"\r\n            onClick={goToToday}\r\n          >\r\n            Today\r\n          </Button>\r\n          \r\n          <Button\r\n            variant=\"outline\"\r\n            inputSize=\"sm\"\r\n            onClick={goToNextMonth}\r\n            icon={<ChevronRight className=\"h-4 w-4\" />}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Month/Year Display */}\r\n      <div className=\"text-center mb-6\">\r\n        <h3 className=\"text-2xl font-bold text-gray-900\">\r\n          {format(currentDate, 'MMMM yyyy')}\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\r\n        {/* Calendar Grid */}\r\n        <div className=\"xl:col-span-2\">\r\n          <div className=\"grid grid-cols-7 gap-1 mb-2\">\r\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\r\n              <div key={day} className=\"p-2 text-center text-sm font-medium text-gray-500\">\r\n                {day}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-7 gap-1\">\r\n            {calendarDays.map(day => {\r\n              const dayEvents = getEventsForDate(day);\r\n              const isCurrentDay = isToday(day);\r\n              const isSelected = selectedDate && isSameDay(day, selectedDate);\r\n              \r\n              return (\r\n                <div\r\n                  key={day.toISOString()}\r\n                  className={`\r\n                    min-h-[80px] sm:min-h-[100px] p-1 sm:p-2 border border-gray-200 cursor-pointer hover:bg-gray-50\r\n                    ${isCurrentDay ? 'bg-primary-50 border-primary-200' : ''}\r\n                    ${isSelected ? 'bg-primary-100 border-primary-300' : ''}\r\n                    ${isPast(day) && !isCurrentDay ? 'bg-gray-50' : ''}\r\n                  `}\r\n                  onClick={() => setSelectedDate(day)}\r\n                >\r\n                  <div className=\"flex items-center justify-between mb-1\">\r\n                    <span className={`\r\n                      text-sm font-medium\r\n                      ${isCurrentDay ? 'text-primary-600' : 'text-gray-900'}\r\n                      ${isSelected ? 'text-primary-700' : ''}\r\n                    `}>\r\n                      {format(day, 'd')}\r\n                    </span>\r\n                    {dayEvents.length > 0 && (\r\n                      <span className=\"text-xs bg-primary-500 text-white rounded-full w-5 h-5 flex items-center justify-center\">\r\n                        {dayEvents.length}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-1\">\r\n                    {dayEvents.slice(0, 2).map(event => (\r\n                      <div\r\n                        key={event.id}\r\n                        className={`\r\n                          text-xs p-1 rounded border\r\n                          ${getEventTypeStyle(event.type)}\r\n                          ${getPriorityStyle(event.priority)}\r\n                        `}\r\n                        title={`${event.title} - ${event.vehicleRegistration}`}\r\n                      >\r\n                        <div className=\"truncate\">{event.title}</div>\r\n                        <div className=\"text-xs opacity-75 truncate\">\r\n                          {event.vehicleRegistration}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    {dayEvents.length > 2 && (\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        +{dayEvents.length - 2} more\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Selected Date Events */}\r\n        <div className=\"xl:col-span-1\">\r\n          <div className=\"bg-gray-50 rounded-lg p-4\">\r\n            <h4 className=\"font-semibold text-gray-900 mb-4\">\r\n              {selectedDate ? format(selectedDate, 'EEEE, MMMM d, yyyy') : 'Select a date'}\r\n            </h4>\r\n            \r\n            {selectedDateEvents.length > 0 ? (\r\n              <div className=\"space-y-3\">\r\n                {selectedDateEvents.map(event => (\r\n                  <div\r\n                    key={event.id}\r\n                    className={`\r\n                      bg-white rounded-lg p-3 border cursor-pointer hover:shadow-md transition-shadow\r\n                      ${getPriorityStyle(event.priority)}\r\n                    `}\r\n                    onClick={() => navigate(`/maintenance/${event.task.id}`)}\r\n                  >\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        {getStatusIcon(event.status)}\r\n                        <span className=\"text-sm font-medium text-gray-900\">\r\n                          {event.title}\r\n                        </span>\r\n                      </div>\r\n                      <span className={`\r\n                        text-xs px-2 py-1 rounded-full\r\n                        ${getEventTypeStyle(event.type)}\r\n                      `}>\r\n                        {event.type}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-gray-600 mb-1\">\r\n                      Vehicle: {event.vehicleRegistration}\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-gray-500\">\r\n                      Priority: <span className=\"capitalize\">{event.priority}</span>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-gray-500\">\r\n                      Status: <span className=\"capitalize\">{event.status.replace('_', ' ')}</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center text-gray-500 py-8\">\r\n                {selectedDate ? 'No events on this date' : 'Click on a date to view events'}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceCalendar;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\MaintenanceSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\MaintenanceTaskForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'setValue' and 'startDate'. Either include them or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setValue, startDate]","fix":{"range":[2251,2253],"text":"[setValue, startDate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useRef, useCallback } from \"react\";\r\nimport { useForm, FormProvider, Controller, useFormContext } from \"react-hook-form\";\r\nimport { Vehicle } from \"@/types\";\r\nimport { MaintenanceTask } from \"@/types/maintenance\";\r\nimport Input from \"../ui/Input\";\r\nimport Select from \"../ui/Select\";\r\nimport Button from \"../ui/Button\";\r\nimport FileUpload from \"../ui/FileUpload\";\r\nimport GarageSelector from \"./GarageSelector\";\r\nimport RefactoredVehicleSelector from \"./RefactoredVehicleSelector\";\r\nimport TaskTypeSelector from \"./TaskTypeSelector\";\r\nimport PriorityButtonSelector from \"./PriorityButtonSelector\";\r\nimport MaintenanceAuditLog from \"./MaintenanceAuditLog\";\r\nimport ServiceGroupsSection from \"./ServiceGroupsSection\";\r\nimport ComplaintResolutionSection from \"./ComplaintResolutionSection\";\r\nimport NextServiceReminderSection from \"./NextServiceReminderSection\";\r\nimport DocumentsSection from \"./DocumentsSection\";\r\nimport PartsReplacedSelector from \"./PartsReplacedSelector\";\r\nimport {\r\n  PenTool as PenToolIcon,\r\n  Calendar,\r\n  Truck,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Bell,\r\n  Wrench,\r\n} from \"lucide-react\";\r\nimport { predictNextService } from \"../../utils/maintenancePredictor\";\r\nimport { getAuditLogs } from \"../../utils/maintenanceStorage\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getLatestOdometer } from \"../../utils/storage\";\r\nimport { cn } from \"../../utils/cn\";\r\nimport { standardizeDate, validateDate, validateDateRange, formatDateForInput } from \"../../utils/dateValidation\";\r\n\r\n// ServiceDetailsSection component\r\nconst ServiceDetailsSection = () => {\r\n  const { watch, setValue, register } = useFormContext();\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [displayStartTime] = useState('09:00');\r\n  const [displayEndTime, setDisplayEndTime] = useState('09:00');\r\n  \r\n  // Watch form values\r\n  const startDate = watch('start_date');\r\n  const endDate = watch('end_date');\r\n  const downtimeDays = watch('downtime_days') || 0;\r\n  const downtimeHours = watch('downtime_hours') || 0;\r\n  \r\n  // Set today's date as default\r\n  useEffect(() => {\r\n    if (!startDate) {\r\n      setValue('start_date', new Date().toISOString().split('T')[0]);\r\n    }\r\n  }, []);\r\n\r\n  // Handle quick select\r\n  const handleQuickSelect = (days: number, hours: number, optionId: string) => {\r\n    setSelectedOption(optionId);\r\n    setValue('downtime_days', days);\r\n    setValue('downtime_hours', hours);\r\n    \r\n    const start = new Date(startDate || new Date().toISOString().split('T')[0]);\r\n    \r\n    if (hours > 0 && days === 0) {\r\n      // For hours: same date\r\n      setValue('end_date', start.toISOString().split('T')[0]);\r\n      \r\n      // Calculate display time\r\n      const endHour = (9 + hours) % 24;\r\n      setDisplayEndTime(`${endHour.toString().padStart(2, '0')}:00`);\r\n    } else {\r\n      // For days: add days\r\n      const end = new Date(start.getTime() + days * 24 * 60 * 60 * 1000);\r\n      setValue('end_date', end.toISOString().split('T')[0]);\r\n      setDisplayEndTime('09:00');\r\n    }\r\n  };\r\n\r\n  // Format date display\r\n  const formatDisplay = (date: string, isEnd: boolean = false) => {\r\n    if (!date) return 'dd/mm/yyyy';\r\n    \r\n    const d = new Date(date);\r\n    const formatted = `${d.getDate().toString().padStart(2, '0')}/${(d.getMonth() + 1).toString().padStart(2, '0')}/${d.getFullYear()}`;\r\n    \r\n    // Add time for hour selections only\r\n    if (selectedOption.includes('h') && downtimeDays === 0) {\r\n      return `${formatted} ${isEnd ? displayEndTime : displayStartTime}`;\r\n    }\r\n    \r\n    return formatted;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Service Details Box */}\r\n      <div className=\"bg-gradient-to-r from-green-50/80 to-emerald-50/80 rounded-xl shadow-lg border border-green-100/70 p-6 space-y-6\">\r\n        <h3 className=\"text-xl font-semibold text-gray-800 flex items-center\">\r\n          <div className=\"w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center mr-3\">\r\n            <Calendar className=\"h-5 w-5 text-white\" />\r\n          </div>\r\n          Service Details\r\n        </h3>\r\n        \r\n        {/* Quick Select */}\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Quick Select\r\n          </label>\r\n                  <div className=\"grid grid-cols-7 gap-3\">\r\n                    {[\r\n                      { id: '2h', label: '2h', days: 0, hours: 2 },\r\n                      { id: '4h', label: '4h', days: 0, hours: 4 },\r\n                      { id: '6h', label: '6h', days: 0, hours: 6 },\r\n                      { id: '8h', label: '8h', days: 0, hours: 8 },\r\n                      { id: '1d', label: '1d', days: 1, hours: 0 },\r\n                      { id: '2d', label: '2d', days: 2, hours: 0 },\r\n                      { id: '3d', label: '3d', days: 3, hours: 0 },\r\n                    ].map((opt) => (\r\n                      <button\r\n                        key={opt.id}\r\n                        type=\"button\"\r\n                        onClick={() => handleQuickSelect(opt.days, opt.hours, opt.id)}\r\n                        className={`px-4 py-3 rounded-lg text-sm font-semibold transition-all duration-200 transform hover:scale-105 shadow-md flex items-center justify-center min-h-[44px]\r\n                          ${selectedOption === opt.id\r\n                            ? opt.hours > 0 \r\n                              ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg ring-2 ring-blue-300' \r\n                              : 'bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-lg ring-2 ring-orange-300'\r\n                            : opt.hours > 0 \r\n                              ? 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-700 hover:from-blue-200 hover:to-blue-300 border border-blue-200' \r\n                              : 'bg-gradient-to-r from-orange-100 to-orange-200 text-orange-700 hover:from-orange-200 hover:to-orange-300 border border-orange-200'\r\n                          }`}\r\n                      >\r\n                        <span className=\"text-center leading-none\">{opt.label}</span>\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n        </div>\r\n\r\n        {/* Date Display Fields */}\r\n        <div className=\"grid grid-cols-2 gap-6\">\r\n          <div>\r\n            <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\r\n              Start Date *\r\n            </label>\r\n            <div className=\"relative\">\r\n              <input\r\n                type=\"text\"\r\n                value={formatDisplay(startDate)}\r\n                readOnly\r\n                className=\"w-full px-4 py-3 border-2 border-green-200 rounded-lg bg-gradient-to-r from-green-50 to-emerald-50 text-gray-700 font-medium shadow-sm focus:border-green-400 focus:ring-2 focus:ring-green-200\"\r\n              />\r\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\r\n                <Calendar className=\"h-5 w-5 text-green-500\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-semibold text-gray-700 mb-2\">\r\n              End Date\r\n            </label>\r\n            <div className=\"relative\">\r\n              <input\r\n                type=\"text\"\r\n                value={formatDisplay(endDate, true)}\r\n                readOnly\r\n                className=\"w-full px-4 py-3 border-2 border-green-200 rounded-lg bg-gradient-to-r from-green-50 to-emerald-50 text-gray-700 font-medium shadow-sm focus:border-green-400 focus:ring-2 focus:ring-green-200\"\r\n              />\r\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\r\n                <Calendar className=\"h-5 w-5 text-green-500\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Hidden inputs for form values */}\r\n      <input type=\"hidden\" {...register('start_date')} />\r\n      <input type=\"hidden\" {...register('end_date')} />\r\n      <input type=\"hidden\" {...register('downtime_days')} />\r\n      <input type=\"hidden\" {...register('downtime_hours')} />\r\n    </>\r\n  );\r\n};\r\n\r\n// DowntimeSummary component\r\nconst DowntimeSummary = () => {\r\n  const { watch } = useFormContext();\r\n  const downtimeDays = watch('downtime_days') || 0;\r\n  const downtimeHours = watch('downtime_hours') || 0;\r\n  \r\n  const getTotalDisplay = () => {\r\n    const totalHours = downtimeDays * 24 + downtimeHours;\r\n    if (totalHours === 0) return '0h';\r\n    if (totalHours < 24) return `${totalHours}h`;\r\n    \r\n    const days = Math.floor(totalHours / 24);\r\n    const hours = totalHours % 24;\r\n    return hours > 0 ? `${days}d ${hours}h` : `${days}d`;\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-gradient-to-r from-amber-50/80 to-yellow-50/80 border-2 border-amber-200/70 rounded-xl p-6 shadow-lg\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center\">\r\n          <div className=\"w-10 h-10 bg-amber-500 rounded-lg flex items-center justify-center mr-3\">\r\n            <Clock className=\"h-6 w-6 text-white\" />\r\n          </div>\r\n          <div>\r\n            <span className=\"text-lg font-semibold text-gray-800\">Downtime Tracking</span>\r\n            <p className=\"text-sm text-gray-600\">Service duration monitoring</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-right flex-shrink-0\">\r\n          <div className=\"text-3xl font-bold bg-gradient-to-r from-amber-600 to-yellow-600 bg-clip-text text-transparent\">\r\n            {getTotalDisplay()}\r\n          </div>\r\n          <div className=\"text-sm text-gray-600 mt-1 flex flex-wrap justify-end gap-1\">\r\n            <span className=\"bg-amber-100 text-amber-800 px-2 py-1 rounded-full text-xs font-medium\">{downtimeDays}d {downtimeHours}h</span>\r\n            <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium\">Maintenance</span>\r\n            <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">Medium Impact</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DOWNTIME_PRESETS = [\r\n  { id: \"2h\", label: \"2 h\", days: 0, hours: 2 },\r\n  { id: \"4h\", label: \"4 h\", days: 0, hours: 4 },\r\n  { id: \"6h\", label: \"6 h\", days: 0, hours: 6 },\r\n  { id: \"8h\", label: \"8 h\", days: 0, hours: 8 },\r\n  { id: \"1d\", label: \"1 d\", days: 1, hours: 0 },\r\n  { id: \"2d\", label: \"2 d\", days: 2, hours: 0 },\r\n  { id: \"3d\", label: \"3 d\", days: 3, hours: 0 },\r\n];\r\n\r\nconst isClose = (a: number, b: number, tolerance = 0.01) =>\r\n  Math.abs(a - b) < tolerance;\r\n\r\n\r\ninterface MaintenanceTaskFormProps {\r\n  onSubmit: (data: Partial<MaintenanceTask>) => void;\r\n  vehicles: Vehicle[];\r\n  initialData?: Partial<MaintenanceTask>;\r\n  isSubmitting?: boolean;\r\n}\r\n\r\nconst MaintenanceTaskForm: React.FC<MaintenanceTaskFormProps> = ({\r\n  onSubmit,\r\n  vehicles,\r\n  initialData,\r\n  isSubmitting,\r\n}) => {\r\n  const [setReminder, setSetReminder] = useState(false);\r\n  const [auditLogs, setAuditLogs] = useState<any[]>([]);\r\n  const [uploadingFiles, setUploadingFiles] = useState(false);\r\n  const [aiSuggestions, setAiSuggestions] = useState<{\r\n    averageReplacementKm?: number;\r\n    averageReplacementDays?: number;\r\n    confidence: number;\r\n  }>({\r\n    confidence: 0,\r\n  });\r\n  const [selectedParts, setSelectedParts] = useState<any[]>([]);\r\n\r\n  const methods = useForm<Partial<MaintenanceTask>>({\r\n    defaultValues: {\r\n      task_type: \"general_scheduled_service\",\r\n      priority: \"medium\",\r\n      status: \"open\",\r\n      estimated_cost: 0,\r\n      parts_required: [],\r\n      start_date: new Date().toISOString().split(\"T\")[0],\r\n      title: [],\r\n      warranty_claimed: false,\r\n      downtime_days: 0,\r\n      downtime_hours: 0,\r\n      service_groups:\r\n        initialData?.service_groups && initialData.service_groups.length > 0\r\n          ? initialData.service_groups\r\n          : [\r\n              {\r\n                vendor_id: \"\",\r\n                tasks: [],\r\n                cost: 0,\r\n                battery_tracking: false,\r\n                tyre_tracking: false,\r\n              },\r\n            ],\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    control,\r\n    setValue,\r\n    getValues,\r\n    formState: { errors },\r\n  } = methods;\r\n\r\n  const startDate = watch(\"start_date\");\r\n  const endDate = watch(\"end_date\");\r\n  \r\n  // Standardize dates to prevent crashes from invalid dates\r\n  const standardizedStartDate = startDate ? standardizeDate(startDate) : null;\r\n  const standardizedEndDate = endDate ? standardizeDate(endDate) : null;\r\n  const vehicleId = watch(\"vehicle_id\");\r\n  const odometerReading = watch(\"odometer_reading\");\r\n  const downtimeDays = watch(\"downtime_days\");\r\n  const downtimeHours = watch(\"downtime_hours\");\r\n  const taskType = watch(\"task_type\");\r\n  const title = watch(\"title\");\r\n  const serviceGroupsWatch = watch(\"service_groups\");\r\n\r\n  // Get current values of the text areas for speech-to-text functionality\r\n  const complaintDescription = watch(\"complaint_description\") || \"\";\r\n  const resolutionSummary = watch(\"resolution_summary\") || \"\";\r\n\r\n  // Handle speech-to-text transcripts\r\n  const handleComplaintTranscript = (text: string) => {\r\n    setValue(\r\n      \"complaint_description\",\r\n      complaintDescription ? `${complaintDescription} ${text}` : text\r\n    );\r\n  };\r\n\r\n  const handleResolutionTranscript = (text: string) => {\r\n    setValue(\r\n      \"resolution_summary\",\r\n      resolutionSummary ? `${resolutionSummary} ${text}` : text\r\n    );\r\n  };\r\n\r\n  const initialVehicleIdRef = useRef(initialData?.vehicle_id);\r\n  const skipInitialOdometerPrefillRef = useRef(true);\r\n\r\n  const selectedDowntimePreset = useMemo(() => {\r\n    if (typeof downtimeDays !== \"number\" || typeof downtimeHours !== \"number\" || \r\n        Number.isNaN(downtimeDays) || Number.isNaN(downtimeHours)) {\r\n      return \"custom\";\r\n    }\r\n\r\n    const presetMatch = DOWNTIME_PRESETS.find((preset) =>\r\n      preset.days === downtimeDays && preset.hours === downtimeHours\r\n    );\r\n\r\n    return presetMatch?.id ?? \"custom\";\r\n  }, [downtimeDays, downtimeHours]);\r\n\r\n  const downtimeSummary = useMemo(() => {\r\n    if ((typeof downtimeDays !== \"number\" || downtimeDays <= 0) && \r\n        (typeof downtimeHours !== \"number\" || downtimeHours <= 0)) {\r\n      return \"No downtime selected\";\r\n    }\r\n\r\n    const totalHours = (downtimeDays || 0) * 24 + (downtimeHours || 0);\r\n    \r\n    if (totalHours < 24) {\r\n      return `${totalHours} hrs`;\r\n    }\r\n\r\n    const days = Math.floor(totalHours / 24);\r\n    const remainingHours = totalHours % 24;\r\n\r\n    if (days > 0 && remainingHours > 0) {\r\n      return `${days} day${days === 1 ? \"\" : \"s\"} ${remainingHours} hr${remainingHours === 1 ? \"\" : \"s\"}`;\r\n    } else if (days > 0) {\r\n      return `${days} day${days === 1 ? \"\" : \"s\"}`;\r\n    } else {\r\n      return `${remainingHours} hr${remainingHours === 1 ? \"\" : \"s\"}`;\r\n    }\r\n  }, [downtimeDays, downtimeHours]);\r\n\r\n  // Fetch audit logs asynchronously\r\n  useEffect(() => {\r\n    const fetchAuditLogs = async () => {\r\n      if (initialData?.id) {\r\n        try {\r\n          const logs = await getAuditLogs();\r\n          if (Array.isArray(logs)) {\r\n            setAuditLogs(logs.filter((log) => log.task_id === initialData.id));\r\n          } else {\r\n            setAuditLogs([]);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching audit logs:\", error);\r\n          setAuditLogs([]);\r\n        }\r\n      } else {\r\n        setAuditLogs([]);\r\n      }\r\n    };\r\n\r\n    fetchAuditLogs();\r\n  }, [initialData?.id]);\r\n\r\n  // Controlled downtime handler to prevent infinite loops\r\n  const handleDowntimeQuickSelect = useCallback((days: number, hours: number) => {\r\n    // Prevent multiple rapid updates\r\n    const timeoutKey = 'downtime-update';\r\n    if ((window as any)[timeoutKey]) {\r\n      clearTimeout((window as any)[timeoutKey]);\r\n    }\r\n    \r\n    (window as any)[timeoutKey] = setTimeout(() => {\r\n      setValue('downtime_days', days, { shouldDirty: true });\r\n      setValue('downtime_hours', hours, { shouldDirty: true });\r\n      \r\n      // Calculate end date if start date exists\r\n      if (startDate) {\r\n        const start = new Date(startDate);\r\n        const totalHours = days * 24 + hours;\r\n        const end = new Date(start.getTime() + totalHours * 60 * 60 * 1000);\r\n        setValue('end_date', end.toISOString().split('T')[0], { shouldDirty: true });\r\n      }\r\n    }, 100); // Small delay to batch updates\r\n  }, [startDate, setValue]);\r\n\r\n  // Auto-fill odometer reading based on latest trip for the selected vehicle\r\n  useEffect(() => {\r\n    if (!vehicleId) return;\r\n\r\n    let isMounted = true;\r\n\r\n    const fetchLastOdometer = async () => {\r\n      if (skipInitialOdometerPrefillRef.current) {\r\n        skipInitialOdometerPrefillRef.current = false;\r\n\r\n        if (\r\n          initialData?.id &&\r\n          initialVehicleIdRef.current &&\r\n          initialVehicleIdRef.current === vehicleId &&\r\n          typeof initialData.odometer_reading === \"number\"\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      try {\r\n        const { value } = await getLatestOdometer(vehicleId);\r\n        const fallback = vehicles.find((v) => v.id === vehicleId)?.current_odometer;\r\n        const resolvedValue =\r\n          Number.isFinite(value) && value >= 0 ? value : fallback;\r\n\r\n        if (isMounted && typeof resolvedValue === \"number\") {\r\n          const currentReadingRaw = getValues(\"odometer_reading\");\r\n          const currentReading =\r\n            typeof currentReadingRaw === \"number\"\r\n              ? currentReadingRaw\r\n              : parseFloat(String(currentReadingRaw));\r\n\r\n          if (\r\n            !Number.isFinite(currentReading) ||\r\n            Math.abs(currentReading - resolvedValue) > 0.5\r\n          ) {\r\n            setValue(\"odometer_reading\", resolvedValue, {\r\n              shouldDirty: true,\r\n              shouldValidate: true,\r\n            });\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch latest odometer reading:\", err);\r\n        const fallback = vehicles.find((v) => v.id === vehicleId)?.current_odometer;\r\n\r\n        if (isMounted && typeof fallback === \"number\") {\r\n          const currentReadingRaw = getValues(\"odometer_reading\");\r\n          const currentReading =\r\n            typeof currentReadingRaw === \"number\"\r\n              ? currentReadingRaw\r\n              : parseFloat(String(currentReadingRaw));\r\n\r\n          if (\r\n            !Number.isFinite(currentReading) ||\r\n            Math.abs(currentReading - fallback) > 0.5\r\n          ) {\r\n            setValue(\"odometer_reading\", fallback, {\r\n              shouldDirty: true,\r\n              shouldValidate: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isMounted) {\r\n        initialVehicleIdRef.current = vehicleId;\r\n      }\r\n    };\r\n\r\n    fetchLastOdometer();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [vehicleId, setValue, getValues, vehicles, initialData?.id, initialData?.odometer_reading]);\r\n\r\n  // Calculate total cost from service groups\r\n  useEffect(() => {\r\n    if (serviceGroupsWatch && serviceGroupsWatch.length > 0) {\r\n      const totalCost = serviceGroupsWatch.reduce((sum, group) => {\r\n        return sum + (parseFloat(group.cost as any) || 0);\r\n      }, 0);\r\n      setValue(\"actual_cost\", totalCost);\r\n    }\r\n  }, [serviceGroupsWatch, setValue]);\r\n\r\n  // Combined AI prediction effect to prevent infinite loops\r\n  useEffect(() => {\r\n    if (vehicleId && odometerReading) {\r\n      const getPredictions = async () => {\r\n        try {\r\n          const prediction = await predictNextService(vehicleId, odometerReading);\r\n          if (prediction) {\r\n            setValue(\"next_predicted_service\", prediction);\r\n            setAiSuggestions(prediction);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting AI predictions:\", error);\r\n          setAiSuggestions({ confidence: 0 });\r\n        }\r\n      };\r\n      getPredictions();\r\n    }\r\n  }, [vehicleId, odometerReading, setValue]);\r\n\r\n  const validateFormData = (data: any): string | null => {\r\n    // Vehicle validation\r\n    if (!data.vehicle_id) {\r\n      return \"Please select a vehicle\";\r\n    }\r\n\r\n    // Date validation\r\n    if (!data.start_date) {\r\n      return \"Please set a start date\";\r\n    }\r\n\r\n    // Check if start date is not in the future (optional validation)\r\n    const startDate = new Date(data.start_date);\r\n    const today = new Date();\r\n    today.setHours(23, 59, 59, 999); // End of today\r\n    if (startDate > today) {\r\n      return \"Start date cannot be in the future\";\r\n    }\r\n\r\n    // Odometer validation\r\n    if (!data.odometer_reading || data.odometer_reading < 0) {\r\n      return \"Please enter a valid odometer reading\";\r\n    }\r\n\r\n    // Service groups validation\r\n    if (!Array.isArray(data.service_groups) || data.service_groups.length === 0) {\r\n      return \"Please add at least one service group\";\r\n    }\r\n\r\n    // Validate each service group\r\n    for (let i = 0; i < data.service_groups.length; i++) {\r\n      const group = data.service_groups[i];\r\n      \r\n      if (!group.vendor_id) {\r\n        return `Please select a vendor for service group ${i + 1}`;\r\n      }\r\n\r\n      if (!Array.isArray(group.tasks) || group.tasks.length === 0) {\r\n        return `Please select at least one task for service group ${i + 1}`;\r\n      }\r\n\r\n      if (!group.cost || group.cost < 0) {\r\n        return `Please enter a valid cost for service group ${i + 1}`;\r\n      }\r\n\r\n      // Battery tracking validation\r\n      if (group.battery_tracking) {\r\n        if (!group.battery_serial) {\r\n          return `Please enter battery serial number for service group ${i + 1}`;\r\n        }\r\n        if (!group.battery_brand) {\r\n          return `Please select battery brand for service group ${i + 1}`;\r\n        }\r\n        if (!group.battery_warranty_expiry) {\r\n          return `Please set battery warranty expiry date for service group ${i + 1}`;\r\n        }\r\n      }\r\n\r\n      // Tyre tracking validation\r\n      if (group.tyre_tracking) {\r\n        if (!Array.isArray(group.tyre_positions) || group.tyre_positions.length === 0) {\r\n          return `Please select at least one tyre position for service group ${i + 1}`;\r\n        }\r\n        if (!group.tyre_brand) {\r\n          return `Please select tyre brand for service group ${i + 1}`;\r\n        }\r\n        if (!group.tyre_warranty_expiry) {\r\n          return `Please set tyre warranty expiry date for service group ${i + 1}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Priority validation\r\n    if (!data.priority) {\r\n      return \"Please select a priority level\";\r\n    }\r\n\r\n    // Status validation\r\n    if (!data.status) {\r\n      return \"Please select a status\";\r\n    }\r\n\r\n    return null; // No validation errors\r\n  };\r\n\r\n  const handleFormSubmit = (data: any) => {\r\n    try {\r\n      // Comprehensive validation\r\n      const validationError = validateFormData(data);\r\n      if (validationError) {\r\n        toast.error(validationError);\r\n        return;\r\n      }\r\n\r\n      // Add parts_replaced data to the submission\r\n      const formDataWithParts = {\r\n        ...data,\r\n        parts_replaced: selectedParts.length > 0 ? selectedParts : undefined\r\n      };\r\n\r\n      onSubmit(formDataWithParts);\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      toast.error(\r\n        \"Form submission failed: \" +\r\n          (error instanceof Error ? error.message : \"Unknown error\")\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\r\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\r\n        <div className=\"bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/30 overflow-hidden\">\r\n          <div className=\"bg-gradient-to-r from-blue-100 to-green-100 border-b-2 border-blue-200 px-8 py-6\">\r\n            <h1 className=\"text-3xl font-bold text-gray-800 flex items-center\">\r\n              <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center mr-4 shadow-md\">\r\n                <Wrench className=\"h-6 w-6 text-white\" />\r\n              </div>\r\n              Maintenance Task\r\n            </h1>\r\n            <p className=\"text-gray-600 mt-2\">Create and manage vehicle maintenance records</p>\r\n          </div>\r\n          \r\n          <div className=\"p-10\">\r\n            <FormProvider {...methods}>\r\n              <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-10\">\r\n        {/* Vehicle & Basic Info */}\r\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl shadow-lg border border-blue-100 p-6 space-y-5\">\r\n          <h3 className=\"text-xl font-semibold text-gray-800 flex items-center\">\r\n            <div className=\"w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center mr-3\">\r\n              <Truck className=\"h-5 w-5 text-white\" />\r\n            </div>\r\n            Basic Information\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-5\">\r\n            <Controller\r\n              control={control}\r\n              name=\"vehicle_id\"\r\n              rules={{ \r\n                required: \"Vehicle is required\",\r\n                validate: (value) => value !== \"\" || \"Please select a vehicle\"\r\n              }}\r\n              render={({ field }) => (\r\n                <RefactoredVehicleSelector\r\n                  selectedVehicle={field.value}\r\n                  onChange={field.onChange}\r\n                  vehicles={vehicles}\r\n                  error={errors.vehicle_id?.message}\r\n                />\r\n              )}\r\n            />\r\n\r\n            <Controller\r\n              control={control}\r\n              name=\"task_type\"\r\n              rules={{ required: \"Task type is required\" }}\r\n              render={({ field }) => (\r\n                <TaskTypeSelector\r\n                  selectedTaskType={field.value}\r\n                  onChange={field.onChange}\r\n                  error={errors.task_type?.message}\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"priority\"\r\n            rules={{ required: \"Priority is required\" }}\r\n            render={({ field }) => (\r\n              <PriorityButtonSelector\r\n                value={field.value}\r\n                onChange={field.onChange}\r\n                error={errors.priority?.message}\r\n                required\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        {/* Maintenance Tasks */}\r\n        <ServiceGroupsSection />\r\n\r\n        {/* Parts Replaced Section - NEW */}\r\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl shadow-lg border border-blue-100 p-6\">\r\n          <PartsReplacedSelector\r\n            selectedParts={selectedParts}\r\n            onChange={setSelectedParts}\r\n            vehicleOdometer={vehicles.find(v => v.id === vehicleId)?.current_odometer}\r\n            disabled={isSubmitting}\r\n          />\r\n        </div>\r\n\r\n\r\n        {/* Complaint & Resolution */}\r\n        <ComplaintResolutionSection\r\n          onComplaintTranscript={handleComplaintTranscript}\r\n          onResolutionTranscript={handleResolutionTranscript}\r\n        />\r\n\r\n        {/* Service Details and Odometer Section */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Left side: Service Details and Downtime Tracking */}\r\n          <div className=\"space-y-5\">\r\n            <ServiceDetailsSection />\r\n            <DowntimeSummary />\r\n          </div>\r\n          \r\n          {/* Right side: Odometer Section */}\r\n          <div className=\"bg-gradient-to-r from-purple-50/80 to-indigo-50/80 rounded-xl shadow-lg border border-purple-100/70 p-6 space-y-6\">\r\n            <h3 className=\"text-xl font-semibold text-gray-800 flex items-center\">\r\n              <div className=\"w-8 h-8 bg-purple-500 rounded-lg flex items-center justify-center mr-3\">\r\n                <PenToolIcon className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              Vehicle Information\r\n            </h3>\r\n            <div className=\"grid grid-cols-1 gap-5\">\r\n              <Input\r\n                label=\"Odometer Reading\"\r\n                type=\"number\"\r\n                icon={<PenToolIcon className=\"h-4 w-4\" />}\r\n                error={errors.odometer_reading?.message}\r\n                required\r\n                {...register(\"odometer_reading\", {\r\n                  required: \"Odometer reading is required\",\r\n                  valueAsNumber: true,\r\n                  min: { value: 0, message: \"Odometer reading must be positive\" },\r\n                  max: { value: 999999, message: \"Odometer reading seems too high\" },\r\n                  validate: (value) => {\r\n                    if (isNaN(value)) return \"Please enter a valid number\";\r\n                    if (value < 0) return \"Odometer reading cannot be negative\";\r\n                    return true;\r\n                  }\r\n                })}\r\n              />\r\n              \r\n              <Controller\r\n                control={control}\r\n                name=\"odometer_image\"\r\n                render={({ field: { value, onChange } }) => (\r\n                  <FileUpload\r\n                    label=\"Odometer Photo\"\r\n                    value={value as File[] || []}\r\n                    onChange={onChange}\r\n                    accept=\".jpg,.jpeg,.png\"\r\n                    helperText=\"Upload photo of odometer reading\"\r\n                    variant=\"compact\"\r\n                    size=\"sm\"\r\n                  />\r\n                )}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Status Section */}\r\n        <div className={`rounded-xl shadow-lg border p-6 ${\r\n          watch('status') === 'in_progress' \r\n            ? 'bg-gradient-to-r from-blue-50/80 to-blue-100/80 border-blue-200/70'\r\n            : watch('status') === 'resolved'\r\n            ? 'bg-gradient-to-r from-green-50/80 to-green-100/80 border-green-200/70'\r\n            : watch('status') === 'escalated'\r\n            ? 'bg-gradient-to-r from-orange-50/80 to-orange-100/80 border-orange-200/70'\r\n            : watch('status') === 'rework'\r\n            ? 'bg-gradient-to-r from-red-50/80 to-red-100/80 border-red-200/70'\r\n            : 'bg-gradient-to-r from-gray-50/80 to-gray-100/80 border-gray-200/70'\r\n        }`}>\r\n          <label className=\"block text-lg font-semibold text-gray-800 mb-4\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\r\n                watch('status') === 'in_progress' \r\n                  ? 'bg-blue-500'\r\n                  : watch('status') === 'resolved'\r\n                  ? 'bg-green-500'\r\n                  : watch('status') === 'escalated'\r\n                  ? 'bg-orange-500'\r\n                  : watch('status') === 'rework'\r\n                  ? 'bg-red-500'\r\n                  : 'bg-gray-500'\r\n              }`}>\r\n                <AlertTriangle className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              Status\r\n              <span className=\"text-red-500 ml-1\">*</span>\r\n            </div>\r\n          </label>\r\n          \r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {[\r\n              { value: \"open\", label: \"Open\", color: \"bg-gray-100 text-gray-700 border-gray-200 hover:bg-gray-200\", selectedColor: \"bg-gray-600 text-white border-gray-600 shadow-lg\" },\r\n              { value: \"in_progress\", label: \"In Progress\", color: \"bg-blue-100 text-blue-700 border-blue-200 hover:bg-blue-200\", selectedColor: \"bg-blue-600 text-white border-blue-600 shadow-lg\" },\r\n              { value: \"resolved\", label: \"Resolved\", color: \"bg-green-100 text-green-700 border-green-200 hover:bg-green-200\", selectedColor: \"bg-green-600 text-white border-green-600 shadow-lg\" },\r\n              { value: \"escalated\", label: \"Escalated\", color: \"bg-orange-100 text-orange-700 border-orange-200 hover:bg-orange-200\", selectedColor: \"bg-orange-600 text-white border-orange-600 shadow-lg\" },\r\n              { value: \"rework\", label: \"Rework Required\", color: \"bg-red-100 text-red-700 border-red-200 hover:bg-red-200\", selectedColor: \"bg-red-600 text-white border-red-600 shadow-lg\" },\r\n            ].map((option) => (\r\n              <Controller\r\n                key={option.value}\r\n                control={control}\r\n                name=\"status\"\r\n                rules={{ required: \"Status is required\" }}\r\n                render={({ field }) => (\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => field.onChange(option.value)}\r\n                    className={`px-4 py-2 text-sm font-medium rounded-lg border-2 transition-all duration-200 transform hover:scale-105\r\n                      ${field.value === option.value \r\n                        ? option.selectedColor + \" ring-2 ring-offset-2 ring-blue-500\" \r\n                        : option.color + \" hover:shadow-md\"\r\n                      }`}\r\n                  >\r\n                    {field.value === option.value && (\r\n                      <span className=\"mr-1\">✓</span>\r\n                    )}\r\n                    {option.label}\r\n                  </button>\r\n                )}\r\n              />\r\n            ))}\r\n          </div>\r\n          \r\n          {errors.status && (\r\n            <p className=\"text-red-500 text-sm mt-2\">{errors.status.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Next Service Reminder */}\r\n        <NextServiceReminderSection\r\n          reminder={setReminder}\r\n          onToggle={setSetReminder}\r\n          odometerReading={odometerReading}\r\n        />\r\n\r\n        {/* Documents */}\r\n        <DocumentsSection />\r\n\r\n        {/* AI Suggestions */}\r\n        {aiSuggestions.averageReplacementKm && (\r\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n            <div className=\"flex items-start\">\r\n              <AlertTriangle className=\"h-5 w-5 text-blue-500 mt-0.5 mr-2\" />\r\n              <div>\r\n                <h4 className=\"text-blue-700 font-medium\">\r\n                  AI-Suggested Maintenance Intervals\r\n                </h4>\r\n                <p className=\"text-blue-600 text-sm mt-1\">\r\n                  Based on historical data, this maintenance is typically\r\n                  needed:\r\n                </p>\r\n                <ul className=\"mt-2 space-y-1 text-sm text-blue-700\">\r\n                  <li>\r\n                    Every{\" \"}\r\n                    {Math.round(\r\n                      aiSuggestions.averageReplacementKm\r\n                    ).toLocaleString()}{\" \"}\r\n                    km\r\n                  </li>\r\n                  {aiSuggestions.averageReplacementDays && (\r\n                    <li>\r\n                      Every {Math.round(aiSuggestions.averageReplacementDays)}{\" \"}\r\n                      days\r\n                    </li>\r\n                  )}\r\n                </ul>\r\n                <p className=\"text-blue-500 text-xs mt-2\">\r\n                  Confidence: {Math.round(aiSuggestions.confidence)}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Audit Log */}\r\n        {initialData?.id && auditLogs && auditLogs.length > 0 && (\r\n          <div className=\"mt-8\">\r\n            <MaintenanceAuditLog taskId={initialData.id} logs={auditLogs} />\r\n          </div>\r\n        )}\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"flex flex-wrap justify-end gap-4 pt-8 border-t-2 border-gradient-to-r from-blue-200 to-green-200\">\r\n          <Button\r\n            type=\"submit\"\r\n            isLoading={isSubmitting}\r\n            icon={<CheckCircle className=\"h-5 w-5\" />}\r\n            className=\"bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white font-semibold px-8 py-3 rounded-lg shadow-lg transform hover:scale-105 transition-all duration-200\"\r\n          >\r\n            {initialData ? \"Update Task\" : \"Create Task\"}\r\n          </Button>\r\n        </div>\r\n              </form>\r\n            </FormProvider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceTaskForm;\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\MaintenanceTaskList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\NextServiceReminderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\PartsReplacedSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\PriorityButtonSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\RefactoredVehicleSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\ServiceGroupItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\ServiceGroupsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\SmartServiceGroupItem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cost'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [selectedTasks, vendors, vendorHistory, setValue, index, cost]","fix":{"range":[3145,3201],"text":"[selectedTasks, vendors, vendorHistory, setValue, index, cost]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\nimport { \r\n  Trash2, \r\n  Upload, \r\n  IndianRupee, \r\n  Wrench,\r\n  Store,\r\n  AlertCircle,\r\n  TrendingUp,\r\n  MapPin,\r\n  Star\r\n} from 'lucide-react';\r\nimport { getSmartVendorSuggestions, formatIndianCurrency, parseIndianCurrency, getEstimatedCost } from '@/utils/vehicleFormatter';\r\nimport { MAINTENANCE_ITEMS, MAINTENANCE_GROUPS } from '@/types/maintenance';\r\nimport { getVendors } from '@/utils/storage';\r\nimport InlineSearchableSelect from '../ui/InlineSearchableSelect';\r\nimport { VendorHistoryManager } from '@/utils/vendorHistory';\r\n\r\ninterface SmartServiceGroupItemProps {\r\n  index: number;\r\n  remove: (index: number) => void;\r\n  canRemove: boolean;\r\n  errors: any;\r\n}\r\n\r\nconst SmartServiceGroupItem: React.FC<SmartServiceGroupItemProps> = ({\r\n  index,\r\n  remove,\r\n  canRemove,\r\n  errors,\r\n}) => {\r\n  const { register, watch, setValue, control } = useFormContext();\r\n  const [vendors, setVendors] = useState<any[]>([]);\r\n  const [smartVendorSuggestions, setSmartVendorSuggestions] = useState<any[]>([]);\r\n  const [isLoadingVendors, setIsLoadingVendors] = useState(false);\r\n  const [estimatedCost, setEstimatedCost] = useState(0);\r\n  const [vendorHistory, setVendorHistory] = useState(new Map());\r\n  const [uploadedBillFiles, setUploadedBillFiles] = useState<File[]>([]);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  // Watch form values\r\n  const selectedTasks = watch(`service_groups.${index}.tasks`) || [];\r\n  const selectedVendor = watch(`service_groups.${index}.vendor_id`);\r\n  const cost = watch(`service_groups.${index}.cost`) || 0;\r\n  const batteryTracking = watch(`service_groups.${index}.battery_tracking`);\r\n  const tyreTracking = watch(`service_groups.${index}.tyre_tracking`);\r\n\r\n  // Load vendors on mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setIsLoadingVendors(true);\r\n      try {\r\n        const [vendorData, historyData] = await Promise.all([\r\n          getVendors(),\r\n          VendorHistoryManager.getHistory()\r\n        ]);\r\n        \r\n        setVendors(vendorData || []);\r\n        setVendorHistory(historyData);\r\n      } catch (error) {\r\n        console.error('Error loading vendors:', error);\r\n      } finally {\r\n        setIsLoadingVendors(false);\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  // Update smart vendor suggestions when tasks change\r\n  useEffect(() => {\r\n    if (selectedTasks.length > 0 && vendors.length > 0) {\r\n      const suggestions = getSmartVendorSuggestions(\r\n        selectedTasks,\r\n        vendors,\r\n        vendorHistory,\r\n        'Raipur' // User's location\r\n      );\r\n      \r\n      setSmartVendorSuggestions(suggestions);\r\n      \r\n      // Auto-calculate estimated cost\r\n      const estimated = getEstimatedCost(selectedTasks);\r\n      setEstimatedCost(estimated);\r\n      \r\n      // Pre-fill cost if empty (only once to prevent infinite loops)\r\n      if (!cost || cost === 0) {\r\n        setValue(`service_groups.${index}.cost`, estimated);\r\n      }\r\n    }\r\n  }, [selectedTasks, vendors, vendorHistory, setValue, index]); // Removed 'cost' from dependencies\r\n\r\n  // Handle bill file upload with progress simulation\r\n  const handleBillFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = Array.from(event.target.files || []);\r\n    if (files.length > 0) {\r\n      setIsUploading(true);\r\n      setUploadProgress(0);\r\n      \r\n      // Simulate upload progress\r\n      const progressInterval = setInterval(() => {\r\n        setUploadProgress(prev => {\r\n          if (prev >= 100) {\r\n            clearInterval(progressInterval);\r\n            setIsUploading(false);\r\n            setUploadedBillFiles(files);\r\n            setValue(`service_groups.${index}.bill_file`, files);\r\n            console.log(`📁 Bill files uploaded for service group ${index}:`, files.map(f => f.name));\r\n            return 100;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  // Remove bill file\r\n  const removeBillFile = (fileIndex: number) => {\r\n    const newFiles = uploadedBillFiles.filter((_, idx) => idx !== fileIndex);\r\n    setUploadedBillFiles(newFiles);\r\n    setValue(`service_groups.${index}.bill_file`, newFiles);\r\n  };\r\n\r\n  // Format maintenance task options with grouping\r\n  const maintenanceTaskOptions = useMemo(() => {\r\n    const grouped: Record<string, any[]> = {};\r\n    \r\n    Object.entries(MAINTENANCE_GROUPS).forEach(([key, group]) => {\r\n      grouped[group.title] = group.items.map(item => ({\r\n        value: item.id,\r\n        label: item.name,\r\n        group: group.title,\r\n        avgCost: item.averageCost,\r\n        lifeKm: item.standardLifeKm,\r\n        lifeDays: item.standardLifeDays,\r\n      }));\r\n    });\r\n    \r\n    // Flatten with group headers\r\n    const options: any[] = [];\r\n    Object.entries(grouped).forEach(([groupTitle, items]) => {\r\n      options.push({ \r\n        value: `group_${groupTitle}`, \r\n        label: groupTitle, \r\n        isGroupHeader: true \r\n      });\r\n      options.push(...items);\r\n    });\r\n    \r\n    return options;\r\n  }, []);\r\n\r\n  // Format vendor options with smart ordering\r\n  const vendorOptions = useMemo(() => {\r\n    const formattedSuggestions = smartVendorSuggestions.map((vendor) => ({\r\n      ...vendor,\r\n      value: vendor.vendorId,\r\n      label: vendor.name,\r\n      name: vendor.name,\r\n      location: vendor.location || '',\r\n      isSuggested: true,\r\n    }));\r\n\r\n    const otherVendors = vendors\r\n      .filter((vendor) => !smartVendorSuggestions.find((s) => s.vendorId === vendor.id))\r\n      .map((vendor) => ({\r\n        ...vendor,\r\n        vendorId: vendor.id,\r\n        value: vendor.id,\r\n        label: vendor.name,\r\n        name: vendor.name,\r\n        location: vendor.address || vendor.location || '',\r\n        isSuggested: false,\r\n      }));\r\n\r\n    return [...formattedSuggestions, ...otherVendors];\r\n  }, [vendors, smartVendorSuggestions]);\r\n\r\n  // Validate and format cost input\r\n  const handleCostChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const rawValue = e.target.value.replace(/[₹,\\s]/g, '');\r\n    const numericValue = Math.max(0, parseInt(rawValue) || 0);\r\n    setValue(`service_groups.${index}.cost`, numericValue);\r\n  };\r\n\r\n  // Handle cost blur to format display\r\n  const handleCostBlur = () => {\r\n    // Ensure cost is never negative\r\n    if (cost < 0) {\r\n      setValue(`service_groups.${index}.cost`, 0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative bg-white rounded-xl border border-gray-200 overflow-hidden hover:shadow-md transition-shadow\">\r\n      {/* Header */}\r\n      <div className=\"bg-gradient-to-r from-primary-50 to-blue-50 px-4 py-3 border-b border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"p-1.5 bg-white rounded-lg shadow-sm\">\r\n              <Wrench className=\"h-4 w-4 text-primary-600\" />\r\n            </div>\r\n            <h4 className=\"text-lg font-semibold text-gray-900\">\r\n              Service Group {index + 1}\r\n            </h4>\r\n            {selectedTasks.length > 0 && (\r\n              <span className=\"px-2 py-1 text-xs font-medium bg-primary-100 text-primary-700 rounded-full\">\r\n                {selectedTasks.length} task{selectedTasks.length > 1 ? 's' : ''}\r\n              </span>\r\n            )}\r\n          </div>\r\n          \r\n          {canRemove && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => remove(index)}\r\n              className=\"p-1.5 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors\"\r\n            >\r\n              <Trash2 className=\"h-4 w-4\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"p-4 space-y-4\">\r\n        {/* STEP 1: Maintenance Tasks (Now First) */}\r\n        <div>\r\n          <InlineSearchableSelect\r\n            label={\r\n              <div className=\"flex items-center gap-2\">\r\n                <Wrench className=\"h-4 w-4 text-gray-500\" />\r\n                <span>Maintenance Tasks</span>\r\n              </div>\r\n            }\r\n            required\r\n            multiple\r\n            options={maintenanceTaskOptions}\r\n            value={selectedTasks}\r\n            onChange={(value) => setValue(`service_groups.${index}.tasks`, value)}\r\n            placeholder=\"Select maintenance tasks\"\r\n            searchPlaceholder=\"Search tasks...\"\r\n            error={errors?.service_groups?.[index]?.tasks?.message}\r\n            renderOption={(option) => {\r\n              if (option.isGroupHeader) {\r\n                return (\r\n                  <div className=\"px-3 py-2 bg-gray-50 border-t border-gray-200\">\r\n                    <span className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider\">\r\n                      {option.label}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              }\r\n              \r\n              return (\r\n                <div className=\"px-3 py-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <div className=\"font-medium text-gray-900\">{option.label}</div>\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        {option.avgCost && `₹${option.avgCost.toLocaleString('en-IN')} avg`}\r\n                        {option.lifeKm && ` • ${option.lifeKm.toLocaleString('en-IN')} km`}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        {/* STEP 2: Service Vendor (Now Second with Smart Suggestions) */}\r\n        <div>\r\n          <InlineSearchableSelect\r\n            label={\r\n              <div className=\"flex items-center gap-2\">\r\n                <Store className=\"h-4 w-4 text-gray-500\" />\r\n                <span>Service Vendor</span>\r\n              </div>\r\n            }\r\n            required\r\n            options={vendorOptions}\r\n            value={selectedVendor}\r\n            onChange={(value) => {\r\n              setValue(`service_groups.${index}.vendor_id`, value);\r\n              // Save to history\r\n              selectedTasks.forEach(taskId => {\r\n                VendorHistoryManager.recordUsage(taskId, value as string);\r\n              });\r\n            }}\r\n            placeholder=\"Select a service vendor\"\r\n            searchPlaceholder=\"Search vendors by name or location...\"\r\n            loading={isLoadingVendors}\r\n            error={errors?.service_groups?.[index]?.vendor_id?.message}\r\n            renderOption={(option) => (\r\n              <div className=\"px-3 py-2\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span className=\"font-medium text-gray-900\">{option.name}</span>\r\n                      {option.isSuggested && (\r\n                        <span className=\"px-1.5 py-0.5 text-xs bg-green-100 text-green-700 rounded\">\r\n                          <TrendingUp className=\"h-3 w-3 inline mr-0.5\" />\r\n                          Suggested\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3 mt-1\">\r\n                      {option.location && (\r\n                        <span className=\"text-xs text-gray-500 flex items-center gap-1\">\r\n                          <MapPin className=\"h-3 w-3\" />\r\n                          {option.location}\r\n                        </span>\r\n                      )}\r\n                      {option.distance !== undefined && (\r\n                        <span className=\"text-xs text-gray-500\">\r\n                          ~{option.distance} km away\r\n                        </span>\r\n                      )}\r\n                      {option.rating && (\r\n                        <span className=\"text-xs text-gray-500 flex items-center gap-1\">\r\n                          <Star className=\"h-3 w-3 text-yellow-500\" />\r\n                          {option.rating}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            customHeader={\r\n              smartVendorSuggestions.length > 0 && !selectedVendor && (\r\n                <div className=\"px-3 py-2 bg-blue-50 border-b border-blue-100\">\r\n                  <p className=\"text-xs text-blue-700 font-medium\">\r\n                    ✨ Top {smartVendorSuggestions.length} vendors for your selected tasks\r\n                  </p>\r\n                </div>\r\n              )\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* STEP 3: Cost (With Indian Currency Format and Validation) */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1 flex items-center gap-2\">\r\n              <IndianRupee className=\"h-4 w-4 text-gray-500\" />\r\n              Cost <span className=\"text-red-500\">*</span>\r\n              {estimatedCost > 0 && cost !== estimatedCost && (\r\n                <span className=\"text-xs text-gray-500 font-normal\">\r\n                  (Est: {formatIndianCurrency(estimatedCost)})\r\n                </span>\r\n              )}\r\n            </label>\r\n            <div className=\"relative\">\r\n              <IndianRupee className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n              <input\r\n                type=\"text\"\r\n                {...register(`service_groups.${index}.cost`, {\r\n                  required: 'Cost is required',\r\n                  min: { value: 0, message: 'Cost cannot be negative' },\r\n                  validate: value => value >= 0 || 'Cost cannot be negative'\r\n                })}\r\n                onChange={handleCostChange}\r\n                onBlur={handleCostBlur}\r\n                value={cost ? cost.toLocaleString('en-IN') : ''}\r\n                className={`\r\n                  w-full pl-9 pr-3 py-2 border rounded-lg \r\n                  focus:outline-none focus:ring-2 focus:ring-primary-500\r\n                  ${errors?.service_groups?.[index]?.cost \r\n                    ? 'border-red-500 focus:ring-red-500' \r\n                    : 'border-gray-300'\r\n                  }\r\n                `}\r\n                placeholder=\"0\"\r\n              />\r\n              {cost < 0 && (\r\n                <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\r\n                  <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {errors?.service_groups?.[index]?.cost && (\r\n              <p className=\"mt-1 text-xs text-red-500 flex items-center gap-1\">\r\n                <AlertCircle className=\"h-3 w-3\" />\r\n                {errors.service_groups[index].cost.message}\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Quick Cost Presets */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n              Quick Select\r\n            </label>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {[1000, 2000, 3000, 5000, 10000].map(amount => (\r\n                <button\r\n                  key={amount}\r\n                  type=\"button\"\r\n                  onClick={() => setValue(`service_groups.${index}.cost`, amount)}\r\n                  className={`\r\n                    px-3 py-1 text-sm rounded-lg border transition-colors\r\n                    ${cost === amount\r\n                      ? 'bg-primary-100 border-primary-500 text-primary-700'\r\n                      : 'bg-white border-gray-300 text-gray-600 hover:border-primary-300'\r\n                    }\r\n                  `}\r\n                >\r\n                  ₹{amount.toLocaleString('en-IN')}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Special Tracking Options with Better UI */}\r\n        <div className=\"bg-gray-50 rounded-lg p-3\">\r\n          <div className=\"flex flex-wrap gap-4\">\r\n            {/* Battery Replacement */}\r\n            <label className=\"flex items-center space-x-2 cursor-pointer group\">\r\n              <input\r\n                type=\"checkbox\"\r\n                {...register(`service_groups.${index}.battery_tracking`)}\r\n                className=\"h-4 w-4 text-primary-600 rounded focus:ring-primary-500\"\r\n              />\r\n              <span className=\"text-sm font-medium text-gray-700 group-hover:text-primary-600\">\r\n                🔋 Battery Replacement\r\n              </span>\r\n            </label>\r\n\r\n            {/* Tyre Replacement */}\r\n            <label className=\"flex items-center space-x-2 cursor-pointer group\">\r\n              <input\r\n                type=\"checkbox\"\r\n                {...register(`service_groups.${index}.tyre_tracking`)}\r\n                className=\"h-4 w-4 text-primary-600 rounded focus:ring-primary-500\"\r\n              />\r\n              <span className=\"text-sm font-medium text-gray-700 group-hover:text-primary-600\">\r\n                🛞 Tyre Replacement\r\n              </span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Battery Details (Enhanced UI) */}\r\n        {batteryTracking && (\r\n          <div className=\"bg-yellow-50 rounded-lg border border-yellow-200 p-4\">\r\n            <h5 className=\"text-sm font-semibold text-yellow-900 mb-3 flex items-center gap-2\">\r\n              🔋 Battery Details\r\n            </h5>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n              <div>\r\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                  Serial Number <span className=\"text-red-500\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  {...register(`service_groups.${index}.battery_serial`, {\r\n                    required: batteryTracking ? 'Serial number is required' : false,\r\n                    pattern: {\r\n                      value: /^[0-9]+$/,\r\n                      message: 'Only positive numbers allowed'\r\n                    }\r\n                  })}\r\n                  className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                           focus:outline-none focus:ring-2 focus:ring-yellow-500\"\r\n                  placeholder=\"Enter serial number\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                  Brand\r\n                </label>\r\n                <select\r\n                  {...register(`service_groups.${index}.battery_brand`)}\r\n                  className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                           focus:outline-none focus:ring-2 focus:ring-yellow-500\"\r\n                >\r\n                  <option value=\"\">Select brand</option>\r\n                  <option value=\"Exide\">Exide</option>\r\n                  <option value=\"Amaron\">Amaron</option>\r\n                  <option value=\"Livguard\">Livguard</option>\r\n                  <option value=\"SF Sonic\">SF Sonic</option>\r\n                  <option value=\"Okaya\">Okaya</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Battery Warranty Expiry */}\r\n            <div className=\"mt-3\">\r\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                Battery Warranty Expiry Date\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                {...register(`service_groups.${index}.battery_warranty_expiry`, {\r\n                  value: (() => {\r\n                    // Auto-calculate: 1 year from today minus 3-4 days\r\n                    const today = new Date();\r\n                    const oneYearFromNow = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate());\r\n                    const warrantyDate = new Date(oneYearFromNow.getTime() - (4 * 24 * 60 * 60 * 1000)); // 4 days back\r\n                    return warrantyDate.toISOString().split('T')[0];\r\n                  })()\r\n                })}\r\n                className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                         focus:outline-none focus:ring-2 focus:ring-yellow-500\"\r\n              />\r\n            </div>\r\n            \r\n            {/* Battery Warranty Document Upload */}\r\n            <div className=\"mt-3\">\r\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                Battery Warranty Document\r\n              </label>\r\n              <div className=\"border border-gray-300 rounded-md p-2\">\r\n                <input\r\n                  type=\"file\"\r\n                  {...register(`service_groups.${index}.battery_warranty_file`)}\r\n                  accept=\".jpg,.jpeg,.png,.pdf\"\r\n                  className=\"w-full text-xs\"\r\n                />\r\n                <p className=\"text-xs text-gray-500 mt-1\">JPG, PNG, PDF (max 10MB)</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Tyre Details (Enhanced UI) */}\r\n        {tyreTracking && (\r\n          <div className=\"bg-blue-50 rounded-lg border border-blue-200 p-4\">\r\n            <h5 className=\"text-sm font-semibold text-blue-900 mb-3 flex items-center gap-2\">\r\n              🛞 Tyre Details\r\n            </h5>\r\n            <div className=\"space-y-3\">\r\n              {/* Position Selection */}\r\n              <div>\r\n                <label className=\"block text-xs font-medium text-gray-700 mb-2\">\r\n                  Select Positions\r\n                </label>\r\n                <div className=\"grid grid-cols-3 md:grid-cols-6 gap-2\">\r\n                  {['FL', 'FR', 'RL', 'RR', 'Stepney'].map(position => (\r\n                    <label key={position} className=\"relative\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        value={position}\r\n                        {...register(`service_groups.${index}.tyre_positions`)}\r\n                        className=\"peer sr-only\"\r\n                      />\r\n                      <div className=\"px-3 py-2 text-sm text-center border-2 rounded-lg cursor-pointer\r\n                                    peer-checked:bg-blue-100 peer-checked:border-blue-500 peer-checked:text-blue-700\r\n                                    border-gray-300 hover:border-blue-300 transition-colors\">\r\n                        {position}\r\n                      </div>\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                    Brand\r\n                  </label>\r\n                  <select\r\n                    {...register(`service_groups.${index}.tyre_brand`)}\r\n                    className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                             focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    <option value=\"\">Select brand</option>\r\n                    <option value=\"MRF\">MRF</option>\r\n                    <option value=\"CEAT\">CEAT</option>\r\n                    <option value=\"Apollo\">Apollo</option>\r\n                    <option value=\"JK Tyre\">JK Tyre</option>\r\n                    <option value=\"Bridgestone\">Bridgestone</option>\r\n                    <option value=\"Michelin\">Michelin</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                    Serial Numbers\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(`service_groups.${index}.tyre_serials`)}\r\n                    className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                             focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    placeholder=\"Comma separated\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Tyre Warranty Expiry */}\r\n              <div className=\"mt-3\">\r\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                  Warranty Expiry Date\r\n                </label>\r\n                <input\r\n                  type=\"date\"\r\n                  {...register(`service_groups.${index}.tyre_warranty_expiry`, {\r\n                    value: (() => {\r\n                      // Auto-calculate: 1 year from today minus 3-4 days\r\n                      const today = new Date();\r\n                      const oneYearFromNow = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate());\r\n                      const warrantyDate = new Date(oneYearFromNow.getTime() - (4 * 24 * 60 * 60 * 1000)); // 4 days back\r\n                      return warrantyDate.toISOString().split('T')[0];\r\n                    })()\r\n                  })}\r\n                  className=\"w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md \r\n                           focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n              </div>\r\n              \r\n              {/* Tyre Warranty Document Upload */}\r\n              <div className=\"mt-3\">\r\n                <label className=\"block text-xs font-medium text-gray-700 mb-1\">\r\n                  Warranty Document\r\n                </label>\r\n                <div className=\"border border-gray-300 rounded-md p-2\">\r\n                  <input\r\n                    type=\"file\"\r\n                    {...register(`service_groups.${index}.tyre_warranty_file`)}\r\n                    accept=\".jpg,.jpeg,.png,.pdf\"\r\n                    className=\"w-full text-xs\"\r\n                  />\r\n                  <p className=\"text-xs text-gray-500 mt-1\">JPG, PNG, PDF (max 10MB)</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Upload Bill Section */}\r\n        <div className=\"border border-gray-300 rounded-md p-2 hover:border-primary-400 transition-colors\">\r\n          <div className=\"text-center\">\r\n            <Upload className=\"h-4 w-4 text-gray-400 mx-auto mb-1\" />\r\n            <label className=\"cursor-pointer\">\r\n              <span className=\"text-xs font-medium text-primary-600 hover:text-primary-700\">\r\n                Upload bill\r\n              </span>\r\n              <input\r\n                type=\"file\"\r\n                onChange={handleBillFileChange}\r\n                multiple\r\n                accept=\".jpg,.jpeg,.png,.pdf\"\r\n                className=\"sr-only\"\r\n                disabled={isUploading}\r\n              />\r\n            </label>\r\n            <p className=\"text-xs text-gray-500 mt-1\">JPG, PNG, PDF (max 10MB)</p>\r\n            \r\n            {/* Upload Progress */}\r\n            {isUploading && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"flex items-center justify-between text-xs text-gray-600 mb-1\">\r\n                  <span>Uploading...</span>\r\n                  <span>{uploadProgress}%</span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-1\">\r\n                  <div \r\n                    className=\"bg-blue-600 h-1 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${uploadProgress}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Show uploaded files */}\r\n          {uploadedBillFiles.length > 0 && (\r\n            <div className=\"mt-3 space-y-2\">\r\n              <p className=\"text-xs font-medium text-gray-700\">Uploaded files:</p>\r\n              {uploadedBillFiles.map((file, fileIndex) => (\r\n                <div key={fileIndex} className=\"flex items-center justify-between bg-green-50 border border-green-200 rounded-md p-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n                    <span className=\"text-sm text-gray-700\">{file.name}</span>\r\n                    <span className=\"text-xs text-gray-500\">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => removeBillFile(fileIndex)}\r\n                    className=\"text-red-500 hover:text-red-700 p-1\"\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmartServiceGroupItem;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\TaskDistributionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\TaskTypeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\VehicleDowntimeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\VehicleMaintenanceIntensity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\VehicleSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maintenance\\VendorSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maps\\GoogleMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\maps\\TripMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\parts\\BusinessImpactCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\parts\\FleetOwnerMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\parts\\PartDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\parts\\PartHealthCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\parts\\PartHealthDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\ReportGenerator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchReportData'. Either include it or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [reportType, dateRange, fetchReportData]","fix":{"range":[3373,3396],"text":"[reportType, dateRange, fetchReportData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  generatePDF, \r\n  generateWeeklyComparisonExcel, \r\n  generateTripSummaryExcel, \r\n  generateVehicleUtilizationExcel, \r\n  generateDriverPerformanceExcel, \r\n  generateMonthlyComparisonExcel \r\n} from '../../utils/reportGenerators';\r\nimport {\r\n  fetchWeeklyComparisonData,\r\n  fetchMonthlyComparisonData,\r\n  fetchTripSummaryData,\r\n  fetchVehicleUtilizationData,\r\n  fetchDriverPerformanceData,\r\n  WeeklyComparisonData,\r\n  MonthlyComparisonData,\r\n  TripSummaryData,\r\n  VehicleUtilizationData,\r\n  DriverPerformanceData\r\n} from '../../utils/reportDataFetchers';\r\n\r\n// Import report templates\r\nimport { WeeklyComparisonReport } from './templates/WeeklyComparisonReport';\r\nimport { MonthlyComparisonReport } from './templates/MonthlyComparisonReport';\r\nimport { TripSummaryReport } from './templates/TripSummaryReport';\r\nimport { VehicleUtilizationReport } from './templates/VehicleUtilizationReport';\r\nimport { DriverPerformanceReport } from './templates/DriverPerformanceReport';\r\n\r\nimport { Download, FileText, Table, X, Loader2, Calendar, Filter } from 'lucide-react';\r\n\r\nexport type ReportType = \r\n  | 'weekly-comparison'\r\n  | 'monthly-comparison'\r\n  | 'trip-summary'\r\n  | 'vehicle-utilization'\r\n  | 'driver-performance';\r\n\r\ninterface ReportGeneratorProps {\r\n  reportType: ReportType;\r\n  onClose: () => void;\r\n  initialDateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n}\r\n\r\ninterface DateRange {\r\n  start: string;\r\n  end: string;\r\n}\r\n\r\nexport const ReportGenerator: React.FC<ReportGeneratorProps> = ({\r\n  reportType,\r\n  onClose,\r\n  initialDateRange\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [reportData, setReportData] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [dateRange, setDateRange] = useState<DateRange>(\r\n    initialDateRange || {\r\n      start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n      end: new Date().toISOString().split('T')[0]\r\n    }\r\n  );\r\n  const [customDateRange, setCustomDateRange] = useState(false);\r\n\r\n  // Report type configurations\r\n  const reportConfigs = {\r\n    'weekly-comparison': {\r\n      title: 'Weekly Comparison Report',\r\n      description: 'Compare current week performance with previous week',\r\n      icon: <Calendar className=\"w-5 h-5\" />,\r\n      color: 'bg-green-500'\r\n    },\r\n    'monthly-comparison': {\r\n      title: 'Monthly Comparison Report',\r\n      description: 'Monthly performance analysis and trends',\r\n      icon: <Calendar className=\"w-5 h-5\" />,\r\n      color: 'bg-blue-500'\r\n    },\r\n    'trip-summary': {\r\n      title: 'Trip Summary Report',\r\n      description: 'Detailed trip information and statistics',\r\n      icon: <FileText className=\"w-5 h-5\" />,\r\n      color: 'bg-purple-500'\r\n    },\r\n    'vehicle-utilization': {\r\n      title: 'Vehicle Utilization Report',\r\n      description: 'Vehicle usage patterns and efficiency metrics',\r\n      icon: <Table className=\"w-5 h-5\" />,\r\n      color: 'bg-orange-500'\r\n    },\r\n    'driver-performance': {\r\n      title: 'Driver Performance Report',\r\n      description: 'Driver performance metrics and safety analysis',\r\n      icon: <Table className=\"w-5 h-5\" />,\r\n      color: 'bg-indigo-500'\r\n    }\r\n  };\r\n\r\n  const config = reportConfigs[reportType];\r\n\r\n  useEffect(() => {\r\n    fetchReportData();\r\n  }, [reportType, dateRange]);\r\n\r\n  const fetchReportData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      let data: any;\r\n      \r\n      switch (reportType) {\r\n        case 'weekly-comparison': {\r\n          const currentWeek = getWeekNumber(new Date());\r\n          data = await fetchWeeklyComparisonData(currentWeek);\r\n          break;\r\n        }\r\n          \r\n        case 'monthly-comparison': {\r\n          const currentMonth = new Date().getMonth() + 1;\r\n          data = await fetchMonthlyComparisonData(currentMonth);\r\n          break;\r\n        }\r\n          \r\n        case 'trip-summary':\r\n          data = await fetchTripSummaryData(dateRange);\r\n          break;\r\n          \r\n        case 'vehicle-utilization':\r\n          data = await fetchVehicleUtilizationData('Current Month');\r\n          break;\r\n          \r\n        case 'driver-performance':\r\n          data = await fetchDriverPerformanceData('Current Month');\r\n          break;\r\n          \r\n        default:\r\n          throw new Error(`Unknown report type: ${reportType}`);\r\n      }\r\n      \r\n      setReportData(data);\r\n    } catch (err) {\r\n      console.error('Error fetching report data:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch report data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getWeekNumber = (date: Date): number => {\r\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\r\n    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\r\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\r\n  };\r\n\r\n  const handleDownloadPDF = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const fileName = `${reportType.replace('-', '_')}_${new Date().getTime()}`;\r\n      await generatePDF('report-content', fileName, {\r\n        orientation: 'portrait',\r\n        format: 'a4',\r\n        margin: 20,\r\n        scale: 2\r\n      });\r\n    } catch (err) {\r\n      console.error('Error generating PDF:', err);\r\n      setError('Failed to generate PDF');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadExcel = () => {\r\n    try {\r\n      const fileName = `${reportType.replace('-', '_')}_${new Date().getTime()}`;\r\n      \r\n      switch (reportType) {\r\n        case 'weekly-comparison':\r\n          generateWeeklyComparisonExcel(reportData);\r\n          break;\r\n        case 'monthly-comparison':\r\n          generateMonthlyComparisonExcel(reportData);\r\n          break;\r\n        case 'trip-summary':\r\n          generateTripSummaryExcel(reportData);\r\n          break;\r\n        case 'vehicle-utilization':\r\n          generateVehicleUtilizationExcel(reportData);\r\n          break;\r\n        case 'driver-performance':\r\n          generateDriverPerformanceExcel(reportData);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown report type: ${reportType}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating Excel:', err);\r\n      setError('Failed to generate Excel file');\r\n    }\r\n  };\r\n\r\n  const handleDateRangeChange = (field: 'start' | 'end', value: string) => {\r\n    setDateRange(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const renderReport = () => {\r\n    if (!reportData) return null;\r\n\r\n    switch (reportType) {\r\n      case 'weekly-comparison':\r\n        return <WeeklyComparisonReport data={reportData} />;\r\n      case 'monthly-comparison':\r\n        return <MonthlyComparisonReport data={reportData} />;\r\n      case 'trip-summary':\r\n        return <TripSummaryReport data={reportData} />;\r\n      case 'vehicle-utilization':\r\n        return <VehicleUtilizationReport data={reportData} />;\r\n      case 'driver-performance':\r\n        return <DriverPerformanceReport data={reportData} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const needsDateRange = ['trip-summary'].includes(reportType);\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white rounded-lg shadow-xl max-w-7xl w-full max-h-[90vh] overflow-hidden\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b bg-gray-50\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className={`p-2 rounded-lg ${config.color} text-white`}>\r\n              {config.icon}\r\n            </div>\r\n            <div>\r\n              <h2 className=\"text-xl font-semibold text-gray-900\">{config.title}</h2>\r\n              <p className=\"text-sm text-gray-600\">{config.description}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-3\">\r\n            {/* Date Range Selector for applicable reports */}\r\n            {needsDateRange && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Filter className=\"w-4 h-4 text-gray-500\" />\r\n                <div className=\"flex items-center gap-2\">\r\n                  <input\r\n                    type=\"date\"\r\n                    value={dateRange.start}\r\n                    onChange={(e) => handleDateRangeChange('start', e.target.value)}\r\n                    className=\"px-3 py-1 border border-gray-300 rounded text-sm\"\r\n                  />\r\n                  <span className=\"text-gray-500\">to</span>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={dateRange.end}\r\n                    onChange={(e) => handleDateRangeChange('end', e.target.value)}\r\n                    className=\"px-3 py-1 border border-gray-300 rounded text-sm\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Action Buttons */}\r\n            <button\r\n              onClick={handleDownloadPDF}\r\n              disabled={loading || !reportData}\r\n              className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Download className=\"w-4 h-4\" />}\r\n              PDF\r\n            </button>\r\n            \r\n            <button\r\n              onClick={handleDownloadExcel}\r\n              disabled={loading || !reportData}\r\n              className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Table className=\"w-4 h-4\" />}\r\n              Excel\r\n            </button>\r\n            \r\n            <button\r\n              onClick={onClose}\r\n              className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg\"\r\n            >\r\n              <X className=\"w-5 h-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"overflow-y-auto max-h-[calc(90vh-120px)]\">\r\n          {loading && !reportData ? (\r\n            <div className=\"flex items-center justify-center py-20\">\r\n              <div className=\"text-center\">\r\n                <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-green-600\" />\r\n                <p className=\"text-gray-600\">Generating report...</p>\r\n              </div>\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"flex items-center justify-center py-20\">\r\n              <div className=\"text-center\">\r\n                <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                  <X className=\"w-8 h-8 text-red-600\" />\r\n                </div>\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error Loading Report</h3>\r\n                <p className=\"text-gray-600 mb-4\">{error}</p>\r\n                <button\r\n                  onClick={fetchReportData}\r\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\r\n                >\r\n                  Retry\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div id=\"report-content\" className=\"p-6\">\r\n              {renderReport()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\ReportsDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\common\\ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\common\\ReportHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\common\\ReportTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\common\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\templates\\DriverPerformanceReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\templates\\MonthlyComparisonReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\templates\\TripSummaryReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\templates\\VehicleUtilizationReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\reports\\templates\\WeeklyComparisonReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\shared\\DataTable.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\shared\\DataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\shared\\DocumentModalBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\shared\\DocumentUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\shared\\WhatsAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\CascadePreviewModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\CollapsibleRouteAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\ComprehensiveFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\FuelRateSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\MaterialSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\MobileFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\MobileTripForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\RefuelingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\SearchHighlightedText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\SearchableDestinationInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'warehouseData'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [trip.warehouse_id, trip.destinations, warehouseData]","fix":{"range":[3969,4007],"text":"[trip.warehouse_id, trip.destinations, warehouseData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getWarehouse, getDestination, getDestinationByAnyId } from '../../utils/storage';\r\nimport { Trip, Vehicle, Driver } from '@/types';\r\nimport { Truck, User, Calendar, LocateFixed, Fuel, MapPin, IndianRupee, ArrowRight, Edit, Camera, RefreshCw } from 'lucide-react';\r\nimport React, { useState, useEffect, useRef, memo } from 'react';\r\nimport { parseISO, isValid, format } from 'date-fns';\r\nimport { truncateString } from '../../utils/format';\r\nimport { uploadFilesAndGetPublicUrls } from '../../utils/supabaseStorage';\r\nimport { toast } from 'react-toastify';\r\nimport config from '../../utils/env';\r\nimport SearchHighlightedText from './SearchHighlightedText';\r\n\r\ninterface TripCardProps {\r\n  trip: Trip;\r\n  vehicle: Vehicle | undefined;\r\n  driver: Driver | undefined;\r\n  onClick?: () => void;\r\n  onPnlClick?: (e: React.MouseEvent, trip: Trip) => void;\r\n  onEditClick?: (trip: Trip) => void;\r\n  searchTerm?: string;\r\n}\r\n\r\nconst TripCard: React.FC<TripCardProps> = memo(({ trip, vehicle, driver, onClick, onPnlClick, onEditClick, searchTerm }) => {\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const [warehouseData, setWarehouseData] = useState<any>(null);\r\n  const [destinationData, setDestinationData] = useState<any[]>([]);\r\n  const [loadingError, setLoadingError] = useState<string | null>(null);\r\n\r\n  // Fetch warehouse and destinations data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoadingError(null);\r\n        \r\n        if (trip.warehouse_id) {\r\n          try {\r\n            const warehouse = await getWarehouse(trip.warehouse_id);\r\n            setWarehouseData(warehouse);\r\n          } catch (error) {\r\n            console.error('Error fetching warehouse:', error);\r\n            // Set loading error for warehouse failures\r\n            if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n              setLoadingError('Unable to load warehouse data due to connection issues');\r\n            } else {\r\n              // Only set error if warehouse_id exists but data is null\r\n              if (!warehouseData) {\r\n                setLoadingError('Unable to load warehouse data');\r\n              }\r\n              setLoadingError('Unable to load warehouse data due to connection issues');\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (Array.isArray(trip.destinations) && trip.destinations.length > 0) {\r\n          try {\r\n            const destinations = await Promise.all(\r\n              trip.destinations.map(async (id) => {\r\n                try {\r\n                  return await getDestinationByAnyId(id);\r\n                } catch (error) {\r\n                  if (config.isDev) console.warn(`Destination ${id} not found or error fetching:`, error);\r\n                  return null;\r\n                }\r\n              })\r\n            );\r\n            const validDestinations = destinations.filter(d => d !== null);\r\n            setDestinationData(validDestinations);\r\n            \r\n            // If we have destination IDs but no valid destinations loaded, show error\r\n            if (validDestinations.length === 0) {\r\n              setLoadingError('Unable to load trip destinations');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching destinations:', error);\r\n            setLoadingError('Error loading trip destinations');\r\n            if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n              setLoadingError('Unable to load some trip locations');\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchData:', error);\r\n        setLoadingError('Failed to load trip details');\r\n        if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n          setLoadingError('Unable to load trip details');\r\n        }\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [trip.warehouse_id, trip.destinations]); // Remove warehouseData dependency to prevent loops\r\n  \r\n  const distance = trip.end_km - trip.start_km;\r\n  \r\n  // Parse and validate the date\r\n  const tripStartDate = trip.trip_start_date ? parseISO(trip.trip_start_date) : null;\r\n  const formattedDate = tripStartDate && isValid(tripStartDate) \r\n    ? format(tripStartDate, 'dd MMM yyyy')\r\n    : 'Invalid Date';\r\n\r\n  // Calculate total expenses consistently with other parts of the system\r\n  const totalExpenses = (trip.total_fuel_cost || 0) + \r\n                       (trip.unloading_expense || 0) + \r\n                       (trip.driver_expense || 0) + \r\n                       (trip.road_rto_expense || 0) + \r\n                       (trip.miscellaneous_expense || 0);\r\n  \r\n  // Determine profit status color\r\n  const getProfitStatusColor = () => {\r\n    if (!trip.profit_status) return '';\r\n    \r\n    switch (trip.profit_status) {\r\n      case 'profit': return 'text-green-600';\r\n      case 'loss': return 'text-red-600';\r\n      case 'neutral': return 'text-gray-600';\r\n      default: return '';\r\n    }\r\n  };\r\n\r\n  const handleCameraClick = () => {\r\n    if (fileInputRef.current && !isUploading) {\r\n      fileInputRef.current.click();\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setIsUploading(true);\r\n    try {\r\n      const uploadedUrls = await uploadFilesAndGetPublicUrls(\r\n        'trip-docs',\r\n        `${trip.id}/attachments`,\r\n        [file]\r\n      );\r\n      \r\n      if (uploadedUrls.length > 0) {\r\n        toast.success('Image uploaded successfully');\r\n      } else {\r\n        throw new Error('No URLs returned from upload');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      toast.error('Failed to upload image');\r\n    } finally {\r\n      setIsUploading(false);\r\n      // Reset the file input\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = '';\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"card p-4 cursor-pointer hover:bg-gray-50 transition-colors animate-fade-in\"\r\n      onClick={onClick}\r\n    >\r\n      <div className=\"flex justify-between items-start mb-2\">\r\n        <div className=\"flex items-center gap-2\">\r\n          {trip.refueling_done ? (\r\n            <div className=\"bg-accent-100 text-accent-700 p-1.5 rounded-full\">\r\n              <Fuel className=\"h-5 w-5\" />\r\n            </div>\r\n          ) : (\r\n            <div className=\"bg-gray-100 text-gray-600 p-1.5 rounded-full\">\r\n              <LocateFixed className=\"h-5 w-5\" />\r\n            </div>\r\n          )}\r\n          <div>\r\n            <p className=\"text-base text-gray-900 font-medium\">\r\n              <SearchHighlightedText \r\n                text={trip.trip_serial_number} \r\n                searchTerm={searchTerm || ''} \r\n              />\r\n            </p>\r\n            <p className=\"text-sm text-gray-500\">{formattedDate}</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center gap-2\">\r\n          {/* P&L Button */}\r\n          <button \r\n            className=\"p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-primary-50 hover:text-primary-600 transition-colors\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              if (onPnlClick) onPnlClick(e, trip);\r\n            }}\r\n            title=\"Profit & Loss\"\r\n          >\r\n            <IndianRupee className=\"h-4 w-4\" />\r\n          </button>\r\n          \r\n          {/* Camera Button */}\r\n          <button \r\n            className=\"p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-primary-50 hover:text-primary-600 transition-colors disabled:opacity-50\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              handleCameraClick();\r\n            }}\r\n            title=\"Upload Image\"\r\n            disabled={isUploading}\r\n          >\r\n            {isUploading ? (\r\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <Camera className=\"h-4 w-4\" />\r\n            )}\r\n          </button>\r\n          \r\n          {/* Edit Button */}\r\n          {onEditClick && (\r\n            <button \r\n              className=\"p-1.5 rounded-full bg-gray-100 text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-colors\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                onEditClick(trip);\r\n              }}\r\n              title=\"Edit Trip\"\r\n            >\r\n              <Edit className=\"h-4 w-4\" />\r\n            </button>\r\n          )}\r\n          \r\n          {/* Hidden File Input */}\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={handleFileUpload}\r\n            className=\"hidden\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex items-center justify-between text-sm\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Truck className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"text-gray-600\">\r\n              <SearchHighlightedText \r\n                text={vehicle ? vehicle.registration_number : 'Unknown Vehicle'} \r\n                searchTerm={searchTerm || ''} \r\n              />\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <User className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"text-gray-600\">\r\n              <SearchHighlightedText \r\n                text={driver ? driver.name : 'Unknown Driver'} \r\n                searchTerm={searchTerm || ''} \r\n              />\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Route - Use saved destination_display for efficiency */}\r\n        {trip.destination_display ? (\r\n          <div className=\"flex items-center gap-2 text-sm\">\r\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"text-gray-600 truncate\">{trip.destination_display}</span>\r\n          </div>\r\n        ) : loadingError ? (\r\n          <div className=\"flex items-center gap-2 text-sm\">\r\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"text-gray-500 italic\">{loadingError}</span>\r\n          </div>\r\n        ) : warehouseData && destinationData.length > 0 ? (\r\n          // Fallback for older trips without destination_display\r\n          <div className=\"flex items-center gap-2 text-sm\">\r\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n            <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">\r\n              <span className=\"truncate max-w-[100px]\">{warehouseData.name}</span>\r\n              <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />\r\n              <span className=\"truncate max-w-[100px]\">\r\n                {destinationData[0]?.name}\r\n              </span>\r\n              {destinationData.length > 1 && (\r\n                <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">\r\n                  +{destinationData.length - 1}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          // Show loading state or fallback when data is not available\r\n          <div className=\"flex items-center gap-2 text-sm\">\r\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n            <span className=\"text-gray-500 italic\">No trip locations found</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"mt-3 pt-3 border-t border-gray-100\">\r\n        <div className=\"grid grid-cols-4 gap-2 text-sm\">\r\n          <div>\r\n            <span className=\"text-gray-500 block\">Distance</span>\r\n            <span className=\"font-medium text-primary-600\">\r\n              {distance.toLocaleString()} km\r\n            </span>\r\n          </div>\r\n          \r\n          <div>\r\n            <span className=\"text-gray-500 block\">Mileage</span>\r\n            <span className={`font-medium ${\r\n              trip.calculated_kmpl ? 'text-success-600' : 'text-gray-400'\r\n            }`}>\r\n              {trip.calculated_kmpl ? `${trip.calculated_kmpl.toFixed(1)} km/L` : '-'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div>\r\n            <span className=\"text-gray-500 block\">Fuel</span>\r\n            <span className=\"font-medium text-gray-900\">\r\n              {trip.fuel_quantity ? `${trip.fuel_quantity}L` : '-'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div>\r\n            <span className=\"text-gray-500 block\">Expenses</span>\r\n            <span className=\"font-medium text-gray-900\">\r\n              ₹{totalExpenses.toLocaleString()}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-2 flex flex-wrap items-center gap-2\">\r\n          {trip.route_deviation && (() => {\r\n            // Recalculate deviation for return trips with wrong values\r\n            let displayDeviation = trip.route_deviation;\r\n            if (trip.is_return_trip && Math.abs(trip.route_deviation) > 100 && trip.start_km && trip.end_km) {\r\n              const actualDistance = trip.end_km - trip.start_km;\r\n              const impliedStandardDistance = actualDistance / (1 + trip.route_deviation / 100);\r\n              const correctStandardDistance = impliedStandardDistance * 2;\r\n              displayDeviation = ((actualDistance - correctStandardDistance) / correctStandardDistance) * 100;\r\n            }\r\n            \r\n            return (\r\n              <div className={`text-xs px-2 py-1 rounded-full inline-flex items-center gap-1 ${\r\n                Math.abs(displayDeviation) > 15\r\n                  ? 'bg-error-50 text-error-700'\r\n                  : Math.abs(displayDeviation) > 5\r\n                  ? 'bg-warning-50 text-warning-700'\r\n                  : 'bg-success-50 text-success-700'\r\n              }`}>\r\n                <span>Deviation: {displayDeviation > 0 ? '+' : ''}{displayDeviation.toFixed(1)}%</span>\r\n              </div>\r\n            );\r\n          })()}\r\n          \r\n          {/* P&L Status Badge */}\r\n          {trip.profit_status && (\r\n            <div className={`text-xs px-2 py-1 rounded-full inline-flex items-center gap-1 ${\r\n              trip.profit_status === 'profit'\r\n                ? 'bg-success-50 text-success-700'\r\n                : trip.profit_status === 'loss'\r\n                ? 'bg-error-50 text-error-700'\r\n                : 'bg-gray-50 text-gray-700'\r\n            }`}>\r\n              <span>\r\n                {trip.profit_status === 'profit' ? 'Profit' : \r\n                 trip.profit_status === 'loss' ? 'Loss' : 'Break-even'}\r\n                {trip.net_profit !== undefined && `: ₹${Math.abs(trip.net_profit).toLocaleString()}`}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}, (prevProps, nextProps) => {\r\n  // Custom comparison function for memo\r\n  return (\r\n    prevProps.trip.id === nextProps.trip.id &&\r\n    prevProps.trip.updated_at === nextProps.trip.updated_at &&\r\n    prevProps.vehicle?.id === nextProps.vehicle?.id &&\r\n    prevProps.driver?.id === nextProps.driver?.id\r\n  );\r\n});\r\n\r\nTripCard.displayName = 'TripCard';\r\n\r\nexport default TripCard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripListView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'warehouseData'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [trip.warehouse_id, trip.destinations, warehouseData]","fix":{"range":[3384,3422],"text":"[trip.warehouse_id, trip.destinations, warehouseData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useEffect } from 'react';\r\nimport { Trip, Vehicle, Driver, Warehouse } from '@/types';\r\nimport { format, parseISO, isValid, differenceInDays } from 'date-fns';\r\nimport { \r\n  MapPin, User, Truck, Calendar, Fuel, DollarSign, \r\n  Edit2, Eye, TrendingUp, AlertTriangle, Clock, \r\n  Building2, Package, Navigation, ChevronRight,\r\n  Activity, Target, IndianRupee, ArrowRight\r\n} from 'lucide-react';\r\nimport { getWarehouse, getDestinationByAnyId } from '../../utils/storage';\r\n\r\ninterface TripListViewProps {\r\n  trips: Trip[];\r\n  vehicles: Vehicle[];\r\n  drivers: Driver[];\r\n  warehouses?: Warehouse[];\r\n  onSelectTrip: (trip: Trip) => void;\r\n  onPnlClick?: (e: React.MouseEvent, trip: Trip) => void;\r\n  onEditTrip?: (trip: Trip) => void;\r\n}\r\n\r\n// Component to handle destination loading for individual trips\r\nconst TripDestinationDisplay: React.FC<{ trip: Trip }> = ({ trip }) => {\r\n  const [warehouseData, setWarehouseData] = useState<any>(null);\r\n  const [destinationData, setDestinationData] = useState<any[]>([]);\r\n  const [loadingError, setLoadingError] = useState<string | null>(null);\r\n\r\n  // Fetch warehouse and destinations data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoadingError(null);\r\n        \r\n        if (trip.warehouse_id) {\r\n          try {\r\n            const warehouse = await getWarehouse(trip.warehouse_id);\r\n            setWarehouseData(warehouse);\r\n          } catch (error) {\r\n            console.error('Error fetching warehouse:', error);\r\n            if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n              setLoadingError('Unable to load warehouse data due to connection issues');\r\n            } else {\r\n              if (!warehouseData) {\r\n                setLoadingError('Unable to load warehouse data');\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (Array.isArray(trip.destinations) && trip.destinations.length > 0) {\r\n          try {\r\n            const destinations = await Promise.all(\r\n              trip.destinations.map(async (id) => {\r\n                try {\r\n                  return await getDestinationByAnyId(id);\r\n                } catch (error) {\r\n                  console.warn(`Destination ${id} not found or error fetching:`, error);\r\n                  return null;\r\n                }\r\n              })\r\n            );\r\n            const validDestinations = destinations.filter(d => d !== null);\r\n            setDestinationData(validDestinations);\r\n            \r\n            if (validDestinations.length === 0) {\r\n              setLoadingError('Unable to load trip destinations');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching destinations:', error);\r\n            setLoadingError('Error loading trip destinations');\r\n            if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n              setLoadingError('Unable to load some trip locations');\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in fetchData:', error);\r\n        setLoadingError('Failed to load trip details');\r\n        if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\r\n          setLoadingError('Unable to load trip details');\r\n        }\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [trip.warehouse_id, trip.destinations]);\r\n\r\n  // Use saved destination_display for efficiency\r\n  if (trip.destination_display) {\r\n    return (\r\n      <div className=\"flex items-center gap-2 text-sm\">\r\n        <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n        <span className=\"text-gray-600 truncate\">{trip.destination_display}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loadingError) {\r\n    return (\r\n      <div className=\"flex items-center gap-2 text-sm\">\r\n        <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n        <span className=\"text-gray-500 italic\">{loadingError}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (warehouseData && destinationData.length > 0) {\r\n    // Fallback for older trips without destination_display\r\n    return (\r\n      <div className=\"flex items-center gap-2 text-sm\">\r\n        <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n        <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">\r\n          <span className=\"truncate max-w-[100px]\">{warehouseData.name}</span>\r\n          <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />\r\n          <span className=\"truncate max-w-[100px]\">\r\n            {destinationData[0]?.name}\r\n          </span>\r\n          {destinationData.length > 1 && (\r\n            <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">\r\n              +{destinationData.length - 1}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show loading state or fallback when data is not available\r\n  return (\r\n    <div className=\"flex items-center gap-2 text-sm\">\r\n      <MapPin className=\"h-4 w-4 text-gray-400\" />\r\n      <span className=\"text-gray-500 italic\">No trip locations found</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TripListView: React.FC<TripListViewProps> = ({ \r\n  trips, \r\n  vehicles, \r\n  drivers,\r\n  warehouses = [],\r\n  onSelectTrip,\r\n  onPnlClick,\r\n  onEditTrip\r\n}) => {\r\n  const [expandedTrip, setExpandedTrip] = useState<string | null>(null);\r\n  \r\n  // Create lookup maps\r\n  const vehiclesMap = useMemo(() => \r\n    new Map(vehicles.map(v => [v.id, v])), [vehicles]);\r\n  \r\n  const driversMap = useMemo(() => \r\n    new Map(drivers.map(d => [d.id, d])), [drivers]);\r\n  \r\n  const warehousesMap = useMemo(() => \r\n    new Map(warehouses.map(w => [w.id, w])), [warehouses]);\r\n  \r\n  const displayTrips = Array.isArray(trips) ? trips : [];\r\n  \r\n  // Calculate performance metrics\r\n  const getPerformanceMetrics = (trip: Trip) => {\r\n    const expectedMileage = 15; // Default expected\r\n    const mileageStatus = trip.calculated_kmpl \r\n      ? trip.calculated_kmpl >= expectedMileage ? 'good' : 'poor' \r\n      : 'unknown';\r\n    \r\n    const deviationStatus = trip.route_deviation \r\n      ? Math.abs(trip.route_deviation) <= 5 ? 'normal' : \r\n        Math.abs(trip.route_deviation) <= 10 ? 'moderate' : 'high'\r\n      : 'normal';\r\n    \r\n    const costPerKm = trip.total_expenses && trip.total_distance \r\n      ? (trip.total_expenses / trip.total_distance).toFixed(2)\r\n      : null;\r\n    \r\n    return { mileageStatus, deviationStatus, costPerKm };\r\n  };\r\n  \r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {displayTrips.length > 0 ? (\r\n        displayTrips.map(trip => {\r\n          const vehicle = vehiclesMap.get(trip.vehicle_id);\r\n          const driver = driversMap.get(trip.driver_id);\r\n          const warehouse = warehousesMap.get(trip.warehouse_id);\r\n          const isExpanded = expandedTrip === trip.id;\r\n          const metrics = getPerformanceMetrics(trip);\r\n          \r\n          const dateString = trip.trip_end_date || trip.trip_start_date || trip.created_at;\r\n          const tripDate = dateString ? parseISO(dateString) : null;\r\n          const formattedDate = tripDate && isValid(tripDate) \r\n            ? format(tripDate, 'dd MMM yyyy')\r\n            : '-';\r\n          \r\n          const daysAgo = tripDate ? differenceInDays(new Date(), tripDate) : null;\r\n          const distance = trip.end_km && trip.start_km ? trip.end_km - trip.start_km : 0;\r\n          \r\n          return (\r\n            <div \r\n              key={trip.id}\r\n              className=\"bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200\"\r\n            >\r\n              {/* Main Content Row */}\r\n              <div \r\n                className=\"p-4 cursor-pointer\"\r\n                onClick={() => onSelectTrip(trip)}\r\n              >\r\n                <div className=\"flex items-start justify-between gap-4\">\r\n                  {/* Left Section - Trip Info */}\r\n                  <div className=\"flex-1 space-y-3\">\r\n                    {/* Header Row */}\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <div className=\"p-2 bg-primary-50 rounded-lg\">\r\n                          <Navigation className=\"h-5 w-5 text-primary-600\" />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-semibold text-gray-900 text-sm\">\r\n                            {trip.trip_serial_number}\r\n                          </h3>\r\n                          <div className=\"flex items-center gap-2 mt-1 text-xs text-gray-500\">\r\n                            <Calendar className=\"h-3 w-3\" />\r\n                            <span>{formattedDate}</span>\r\n                            {daysAgo !== null && (\r\n                              <span className=\"text-gray-400\">({daysAgo} days ago)</span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Status Badges */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {trip.refueling_done && (\r\n                          <span className=\"px-2 py-1 bg-green-50 text-green-700 text-xs rounded-full font-medium\">\r\n                            Refueled\r\n                          </span>\r\n                        )}\r\n                        {metrics.deviationStatus === 'high' && (\r\n                          <span className=\"px-2 py-1 bg-red-50 text-red-700 text-xs rounded-full font-medium\">\r\n                            High Deviation\r\n                          </span>\r\n                        )}\r\n                        {metrics.mileageStatus === 'good' && (\r\n                          <span className=\"px-2 py-1 bg-emerald-50 text-emerald-700 text-xs rounded-full font-medium\">\r\n                            Good Mileage\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Key Details Grid */}\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n                      {/* Vehicle */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Truck className=\"h-4 w-4 text-gray-400\" />\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-500\">Vehicle</p>\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {vehicle?.registration_number || '-'}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Driver */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <User className=\"h-4 w-4 text-gray-400\" />\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-500\">Driver</p>\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {driver?.name || '-'}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Distance */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Activity className=\"h-4 w-4 text-gray-400\" />\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-500\">Distance</p>\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {distance > 0 ? `${distance.toFixed(1)} km` : '-'}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Expenses */}\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <IndianRupee className=\"h-4 w-4 text-gray-400\" />\r\n                        <div>\r\n                          <p className=\"text-xs text-gray-500\">Total Expenses</p>\r\n                          <p className=\"text-sm font-medium text-gray-900\">\r\n                            {trip.total_expenses ? `₹${trip.total_expenses.toLocaleString()}` : '-'}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Route Info */}\r\n                    <TripDestinationDisplay trip={trip} />\r\n                  </div>\r\n                  \r\n                  {/* Right Section - Metrics & Actions */}\r\n                  <div className=\"flex flex-col items-end gap-3\">\r\n                    {/* Performance Indicators */}\r\n                    <div className=\"grid grid-cols-2 gap-2 text-right\">\r\n                      {/* Mileage */}\r\n                      {trip.calculated_kmpl && (\r\n                        <div className={`px-3 py-2 rounded-lg ${\r\n                          metrics.mileageStatus === 'good' \r\n                            ? 'bg-green-50 border border-green-200' \r\n                            : 'bg-red-50 border border-red-200'\r\n                        }`}>\r\n                          <p className=\"text-xs text-gray-600\">Mileage</p>\r\n                          <p className={`text-sm font-bold ${\r\n                            metrics.mileageStatus === 'good' ? 'text-green-700' : 'text-red-700'\r\n                          }`}>\r\n                            {trip.calculated_kmpl.toFixed(2)} km/L\r\n                          </p>\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Cost per KM */}\r\n                      {metrics.costPerKm && (\r\n                        <div className=\"px-3 py-2 bg-gray-50 rounded-lg border border-gray-200\">\r\n                          <p className=\"text-xs text-gray-600\">Cost/km</p>\r\n                          <p className=\"text-sm font-bold text-gray-900\">\r\n                            ₹{metrics.costPerKm}\r\n                          </p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {/* Action Buttons */}\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <button\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          setExpandedTrip(isExpanded ? null : trip.id);\r\n                        }}\r\n                        className=\"p-2 text-gray-500 hover:text-primary-600 hover:bg-primary-50 rounded-lg transition-colors\"\r\n                        title=\"View Details\"\r\n                      >\r\n                        <Eye className=\"h-4 w-4\" />\r\n                      </button>\r\n                      \r\n                      {onEditTrip && (\r\n                        <button\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            onEditTrip(trip);\r\n                          }}\r\n                          className=\"p-2 text-gray-500 hover:text-primary-600 hover:bg-primary-50 rounded-lg transition-colors\"\r\n                          title=\"Edit Trip\"\r\n                        >\r\n                          <Edit2 className=\"h-4 w-4\" />\r\n                        </button>\r\n                      )}\r\n                      \r\n                      {onPnlClick && (\r\n                        <button\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            onPnlClick(e, trip);\r\n                          }}\r\n                          className=\"p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n                          title=\"P&L Analysis\"\r\n                        >\r\n                          <DollarSign className=\"h-4 w-4\" />\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Expanded Details */}\r\n              {isExpanded && (\r\n                <div className=\"border-t border-gray-100 px-4 py-3 bg-gray-50\">\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                    {/* KM Readings */}\r\n                    <div>\r\n                      <p className=\"text-xs text-gray-500 mb-1\">KM Readings</p>\r\n                      <p className=\"font-medium\">\r\n                        {trip.start_km?.toLocaleString() || '-'} → {trip.end_km?.toLocaleString() || '-'}\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    {/* Fuel Details */}\r\n                    {trip.fuel_quantity && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Fuel</p>\r\n                        <p className=\"font-medium\">\r\n                          {trip.fuel_quantity.toFixed(1)}L @ ₹{trip.refueling_rate || '-'}/L\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Warehouse */}\r\n                    {warehouse && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Warehouse</p>\r\n                        <p className=\"font-medium flex items-center gap-1\">\r\n                          <Building2 className=\"h-3 w-3\" />\r\n                          {warehouse.name}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Deviation */}\r\n                    {trip.route_deviation && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Route Deviation</p>\r\n                        <p className={`font-medium ${\r\n                          Math.abs(trip.route_deviation) > 8 ? 'text-red-600' : 'text-gray-900'\r\n                        }`}>\r\n                          {trip.route_deviation > 0 ? '+' : ''}{trip.route_deviation.toFixed(1)}%\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Toll & Other Expenses */}\r\n                    {trip.toll_amount && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Toll Amount</p>\r\n                        <p className=\"font-medium\">₹{trip.toll_amount.toLocaleString()}</p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Driver Allowance */}\r\n                    {trip.driver_allowance && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Driver Allowance</p>\r\n                        <p className=\"font-medium\">₹{trip.driver_allowance.toLocaleString()}</p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Customer */}\r\n                    {trip.customer_name && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Customer</p>\r\n                        <p className=\"font-medium\">{trip.customer_name}</p>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {/* Payment Mode */}\r\n                    {trip.payment_mode && (\r\n                      <div>\r\n                        <p className=\"text-xs text-gray-500 mb-1\">Payment Mode</p>\r\n                        <p className=\"font-medium capitalize\">{trip.payment_mode}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Deviation Reason if high */}\r\n                  {trip.deviation_reason && (\r\n                    <div className=\"mt-3 p-2 bg-yellow-50 rounded-lg border border-yellow-200\">\r\n                      <p className=\"text-xs text-gray-600 mb-1\">Deviation Reason</p>\r\n                      <p className=\"text-sm text-gray-900\">{trip.deviation_reason}</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <div className=\"text-center py-12 bg-gray-50 rounded-lg border border-gray-200\">\r\n          <Navigation className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n          <h3 className=\"text-lg font-medium text-gray-900\">No trips found</h3>\r\n          <p className=\"mt-2 text-gray-500\">Try adjusting your search or filters</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TripListView;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripPnlModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\TripTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\UnifiedSearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\WarehouseSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\charts\\AverageMileagePerVehicleChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\charts\\FuelConsumedByVehicleChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\trips\\charts\\MonthlyFuelConsumptionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\AnimatedButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\AnimatedError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\AnimatedToast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [duration, handleClose]","fix":{"range":[776,786],"text":"[duration, handleClose]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { CheckCircle, AlertCircle, X } from 'lucide-react';\r\nimport { ANIMATIONS } from '@/utils/animations';\r\n\r\ninterface AnimatedToastProps {\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  message: string;\r\n  duration?: number;\r\n  onClose?: () => void;\r\n  className?: string;\r\n}\r\n\r\nconst AnimatedToast: React.FC<AnimatedToastProps> = ({\r\n  type,\r\n  message,\r\n  duration = 5000,\r\n  onClose,\r\n  className = '',\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [isExiting, setIsExiting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (duration > 0) {\r\n      const timer = setTimeout(() => {\r\n        handleClose();\r\n      }, duration);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [duration]);\r\n\r\n  const handleClose = () => {\r\n    setIsExiting(true);\r\n    setTimeout(() => {\r\n      setIsVisible(false);\r\n      onClose?.();\r\n    }, 300);\r\n  };\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const typeConfig = {\r\n    success: {\r\n      icon: CheckCircle,\r\n      bgColor: 'bg-green-500',\r\n      textColor: 'text-white',\r\n      iconColor: 'text-green-100',\r\n    },\r\n    error: {\r\n      icon: AlertCircle,\r\n      bgColor: 'bg-red-500',\r\n      textColor: 'text-white',\r\n      iconColor: 'text-red-100',\r\n    },\r\n    warning: {\r\n      icon: AlertCircle,\r\n      bgColor: 'bg-yellow-500',\r\n      textColor: 'text-white',\r\n      iconColor: 'text-yellow-100',\r\n    },\r\n    info: {\r\n      icon: AlertCircle,\r\n      bgColor: 'bg-blue-500',\r\n      textColor: 'text-white',\r\n      iconColor: 'text-blue-100',\r\n    },\r\n  };\r\n\r\n  const config = typeConfig[type];\r\n  const Icon = config.icon;\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        fixed top-4 right-4 z-50 max-w-sm w-full\r\n        ${isExiting ? 'animate-out slide-out-to-right-full fade-out' : 'animate-in slide-in-from-right-full fade-in'}\r\n        duration-300\r\n        ${className}\r\n      `}\r\n    >\r\n      <div\r\n        className={`\r\n          px-4 py-3 rounded-lg shadow-lg\r\n          ${config.bgColor} ${config.textColor}\r\n          flex items-start space-x-3\r\n          ${ANIMATIONS.CLASSES.TRANSITION_SMOOTH}\r\n        `}\r\n      >\r\n        <Icon className={`h-5 w-5 ${config.iconColor} flex-shrink-0 mt-0.5`} />\r\n        \r\n        <div className=\"flex-1\">\r\n          <p className=\"text-sm font-medium\">{message}</p>\r\n        </div>\r\n        \r\n        <button\r\n          onClick={handleClose}\r\n          className={`\r\n            flex-shrink-0 p-1 rounded-full\r\n            hover:bg-black hover:bg-opacity-10\r\n            ${ANIMATIONS.CLASSES.TRANSITION_SMOOTH}\r\n          `}\r\n        >\r\n          <X className=\"h-4 w-4\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Toast manager for handling multiple toasts\r\nexport const ToastManager: React.FC = () => {\r\n  const [toasts, setToasts] = useState<Array<{\r\n    id: string;\r\n    type: 'success' | 'error' | 'warning' | 'info';\r\n    message: string;\r\n    duration?: number;\r\n  }>>([]);\r\n\r\n  const addToast = (toast: Omit<typeof toasts[0], 'id'>) => {\r\n    const id = Math.random().toString(36).substr(2, 9);\r\n    setToasts(prev => [...prev, { ...toast, id }]);\r\n  };\r\n\r\n  const removeToast = (id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\">\r\n      {toasts.map((toast) => (\r\n        <AnimatedToast\r\n          key={toast.id}\r\n          type={toast.type}\r\n          message={toast.message}\r\n          duration={toast.duration}\r\n          onClose={() => removeToast(toast.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimatedToast;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\AuroraBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\AvsAiButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Checkbox.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useId\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":23,"column":42,"nodeType":"Identifier","endLine":23,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\CollapsibleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\CurrencyInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\EnhancedInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\FileUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\FileUploadWithProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\InlineSearchableSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Input.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useId\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":35,"column":36,"nodeType":"Identifier","endLine":35,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\LanguageSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\MobileOrganizationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\MultiSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\OrganizationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\SearchableSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Select.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useId\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":36,"column":38,"nodeType":"Identifier","endLine":36,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\SkeletonLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\SpeechToTextButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Switch.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useId\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":27,"column":38,"nodeType":"Identifier","endLine":27,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\Textarea.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useId\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":36,"column":42,"nodeType":"Identifier","endLine":36,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\ui\\VehicleCardSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\DocumentDownloadModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\DocumentSummaryPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'effectiveDateRange'. Either exclude it or remove the dependency array.","line":939,"column":6,"nodeType":"ArrayExpression","endLine":939,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [filteredVehicles]","fix":{"range":[33690,33728],"text":"[filteredVehicles]"}}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":11,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":11,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { X, User, Truck, Calendar, FileText, Shield, Download, Printer as Print, Search, ChevronDown, ChevronUp, Clock, Info, BarChart2, Database, IndianRupee, Bell, FileCheck, AlertCircle, ArrowLeft, ArrowRight, RefreshCw, RotateCcw, CheckCircle, FileSpreadsheet, FileText as FileTextIcon, MinusCircle, AlertTriangle, FileX } from 'lucide-react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { DocumentCell } from '../documents/DocumentCell';\r\nimport { rowUrgency, daysTo, docScore, type DocKey } from '../../utils/urgency';\r\n// Import react-window with fallback\r\nlet FixedSizeList: any = null;\r\ntry {\r\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n  const reactWindow = require('react-window');\r\n  FixedSizeList = reactWindow.FixedSizeList;\r\n} catch (error) {\r\n  console.warn('react-window not available, using fallback table rendering');\r\n}\r\nimport { Vehicle } from '@/types';\r\nimport { getVehicles } from '../../utils/storage';\r\nimport { updateVehicle } from '../../utils/api/vehicles';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport Button from '../ui/Button';\r\nimport Input from '../ui/Input';\r\nimport Select from '../ui/Select';\r\nimport { useChallanInfo } from '../../hooks/useChallanInfo';\r\nimport { ChallanInfoModal } from '../ChallanInfoModal';\r\nimport { format, parseISO, isValid, isWithinInterval, subDays, startOfMonth, endOfMonth, startOfYear, endOfYear, subMonths, subYears, differenceInMonths } from 'date-fns';\r\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar, Cell, Legend } from 'recharts';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { toast } from 'react-toastify';\r\nimport * as XLSX from 'xlsx';\r\n\r\ninterface DocumentSummaryPanelProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\n// Types for document summary panel\r\ninterface DocumentInfo {\r\n  date: string | null;\r\n  status: 'expired' | 'expiring' | 'valid' | 'missing';\r\n}\r\n\r\ninterface VehicleDocuments {\r\n  id: string;\r\n  registration: string;\r\n  registrationDate: string | null;\r\n  documents: {\r\n    rc: DocumentInfo;\r\n    insurance: DocumentInfo;\r\n    fitness: DocumentInfo;\r\n    permit: DocumentInfo;\r\n    puc: DocumentInfo;\r\n    tax: DocumentInfo;\r\n  };\r\n}\r\n\r\n// Updated MonthlyExpenditure interface to include separate properties for each document type\r\ninterface MonthlyExpenditure {\r\n  month: string;\r\n  rc: number;\r\n  insurance: number;\r\n  fitness: number;\r\n  permit: number;\r\n  puc: number;\r\n  tax: number;\r\n  other: number;\r\n}\r\n\r\ninterface VehicleExpenditure {\r\n  vehicle: string;\r\n  amount: number;\r\n}\r\n\r\n// Metrics interface\r\ninterface DocumentMetrics {\r\n  thisMonth: {\r\n    totalExpense: number;\r\n    expectedExpense: number; // New field for expected expense\r\n    renewalsCount: number;\r\n    lapsedCount: number;\r\n  };\r\n  thisYear: {\r\n    totalExpense: number;\r\n  };\r\n}\r\n\r\n// Sorting types\r\ntype SortMode = \r\n  | { kind: \"urgency\" }\r\n  | { kind: \"expiringSoon\" }\r\n  | { kind: \"missing\" }\r\n  | { kind: \"legalPriority\" }\r\n  | { kind: \"column\"; column: DocKey; dir: \"asc\"|\"desc\" };\r\n\r\n// Define document type colors as requested\r\nconst DOC_TYPE_COLORS = {\r\n  rc: '#757575', // Gray\r\n  insurance: '#4B9CD3', // Blue\r\n  fitness: '#A86BA1', // Purple\r\n  permit: '#FFD54F', // Yellow\r\n  puc: '#EF5350', // Red\r\n  tax: '#66BB6A', // Green\r\n  other: '#9E9E9E' // Light Gray\r\n};\r\n\r\n// Function to determine document status based on expiry date\r\nconst getExpiryStatus = (expiryDate: string | null): 'expired' | 'expiring' | 'valid' | 'missing' => {\r\n  if (!expiryDate) return 'missing';\r\n  \r\n  const today = new Date();\r\n  const expDate = new Date(expiryDate);\r\n  const diffDays = (expDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n  if (diffDays < 0) return 'expired';\r\n  if (diffDays <= 30) return 'expiring';\r\n  return 'valid';\r\n};\r\n\r\n// Smart caching for RC expiry calculation\r\nconst getCachedRCExpiry = (vehicleId: string, registrationDate: string | null): string | null => {\r\n  if (!registrationDate) return null;\r\n  \r\n  const cacheKey = `rc_expiry_${vehicleId}`;\r\n  const cached = localStorage.getItem(cacheKey);\r\n  \r\n  if (cached) {\r\n    try {\r\n      const cachedDate = new Date(cached);\r\n      if (!isNaN(cachedDate.getTime())) {\r\n        return cachedDate.toISOString().split('T')[0];\r\n      }\r\n    } catch (error) {\r\n      // Invalid cached data, recalculate\r\n    }\r\n  }\r\n  \r\n  const regDate = new Date(registrationDate);\r\n  regDate.setFullYear(regDate.getFullYear() + 15);\r\n  const expiryDate = regDate.toISOString().split('T')[0];\r\n  \r\n  // Cache the result\r\n  localStorage.setItem(cacheKey, expiryDate);\r\n  return expiryDate;\r\n};\r\n\r\n// Function to calculate RC Expiry (15 years from registration date) - now with caching\r\nconst calculateRCExpiry = (vehicleId: string, registrationDate: string | null): string | null => {\r\n  return getCachedRCExpiry(vehicleId, registrationDate);\r\n};\r\n\r\n// Compact status icons\r\nconst StatusIcon = ({ status }: { status: string }) => {\r\n  switch(status) {\r\n    case 'valid': return <CheckCircle className=\"w-3 h-3 text-green-500\" />;\r\n    case 'expiring': return <AlertCircle className=\"w-3 h-3 text-yellow-500\" />;\r\n    case 'expired': return <X className=\"w-3 h-3 text-red-500\" />;\r\n    default: return <MinusCircle className=\"w-3 h-3 text-gray-400\" />;\r\n  }\r\n};\r\n\r\n// Function to get color class based on document status\r\nconst getStatusColorClass = (status: string) => {\r\n  switch(status) {\r\n    case 'expired':\r\n      return 'bg-error-100 border-error-200 text-error-800';\r\n    case 'expiring':\r\n      return 'bg-warning-100 border-warning-200 text-warning-800';\r\n    case 'valid':\r\n      return 'bg-success-100 border-success-200 text-success-800';\r\n    default:\r\n      return 'bg-gray-100 border-gray-200 text-gray-800';\r\n  }\r\n};\r\n\r\n// Format short date for compact display\r\nconst formatShortDate = (dateString: string | null) => {\r\n  if (!dateString) return '—';\r\n  try {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit' });\r\n  } catch (error) {\r\n    return '—';\r\n  }\r\n};\r\n\r\n// Hook for responsive column visibility\r\nconst useMediaQuery = (query: string) => {\r\n  const [matches, setMatches] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches);\r\n    }\r\n    const listener = () => setMatches(media.matches);\r\n    window.addEventListener(\"resize\", listener);\r\n    return () => window.removeEventListener(\"resize\", listener);\r\n  }, [matches, query]);\r\n\r\n  return matches;\r\n};\r\n\r\n// Helper function to get the cost field name for a document type\r\nconst getCostFieldName = (docType: string): string => {\r\n  switch(docType) {\r\n    case 'insurance': return 'insurance_premium_amount';\r\n    case 'fitness': return 'fitness_cost';\r\n    case 'permit': return 'permit_cost';\r\n    case 'puc': return 'puc_cost';\r\n    case 'tax': return 'tax_amount';\r\n    default: return '';\r\n  }\r\n};\r\n\r\n// Helper function to get the last renewal cost for a document type\r\nconst getLastRenewalCost = (vehicle: Vehicle, docType: string): number => {\r\n  const costFieldName = getCostFieldName(docType);\r\n  \r\n  if (!costFieldName) {\r\n    // Handle RC and other types without specific cost fields\r\n    if (docType === 'rc') return 2000; // Default RC cost\r\n    return 3000; // Default other cost\r\n  }\r\n  \r\n  const cost = vehicle[costFieldName as keyof Vehicle];\r\n  \r\n  if (!cost || typeof cost !== 'number' || cost <= 0) {\r\n    // Default costs if no data available\r\n    const defaults: Record<string, number> = {\r\n      insurance: 15000,\r\n      fitness: 5000,\r\n      permit: 8000,\r\n      puc: 1000,\r\n      tax: 10000,\r\n      rc: 2000\r\n    };\r\n    return defaults[docType] || 3000;\r\n  }\r\n  \r\n  return cost;\r\n};\r\n\r\n// Helper function to get fleet average cost for a document type\r\nconst getFleetAverageCost = (docType: string, vehicles: Vehicle[]): number => {\r\n  const costFieldName = getCostFieldName(docType);\r\n  \r\n  // Default values for each document type if no data is available\r\n  const defaultCosts: Record<string, number> = {\r\n    rc: 2000,\r\n    insurance: 15000,\r\n    fitness: 5000,\r\n    permit: 8000,\r\n    puc: 1000,\r\n    tax: 10000,\r\n    other: 3000\r\n  };\r\n  \r\n  if (!vehicles || vehicles.length === 0) {\r\n    return defaultCosts[docType] || 3000;\r\n  }\r\n  \r\n  // If no cost field for this doc type, return default\r\n  if (!costFieldName) {\r\n    return defaultCosts[docType] || 3000;\r\n  }\r\n\r\n  // Count vehicles with the specified cost and sum up those costs\r\n  let sum = 0;\r\n  let count = 0;\r\n  \r\n  for (const vehicle of vehicles) {\r\n    const cost = vehicle[costFieldName as keyof Vehicle];\r\n    if (typeof cost === 'number' && !isNaN(cost) && cost > 0) {\r\n      sum += cost;\r\n      count++;\r\n    }\r\n  }\r\n  \r\n  // Return the average or default if no vehicles have this cost\r\n  return count > 0 ? sum / count : defaultCosts[docType] || 3000;\r\n};\r\n\r\n// Helper function to get inflation rate for document type\r\nconst getInflationRateForDocType = (docType: string): number => {\r\n  switch(docType) {\r\n    case 'insurance': return -0.075; // -7.5% (average between -5% and -10%)\r\n    case 'fitness': return 0.05; // +5%\r\n    case 'permit': return 0; // 0% (fixed)\r\n    case 'puc': return 0.05; // +5%\r\n    case 'tax': return 0.075; // +7.5% (average between +5% and +10%)\r\n    case 'rc': return 0.05; // +5% for RC\r\n    case 'other':\r\n    default: return 0.08; // +8% general inflation\r\n  }\r\n};\r\n\r\n// Check if a date is within the current month\r\nconst isWithinThisMonth = (dateString: string | null): boolean => {\r\n  if (!dateString) return false;\r\n  \r\n  try {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const startOfThisMonth = startOfMonth(now);\r\n    const endOfThisMonth = endOfMonth(now);\r\n    \r\n    return isWithinInterval(date, { start: startOfThisMonth, end: endOfThisMonth });\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isWithinDateRange = (dateString: string | null, dateRange: { start: Date, end: Date }): boolean => {\r\n  if (!dateString) return false;\r\n  \r\n  try {\r\n    const date = new Date(dateString);\r\n    return isWithinInterval(date, dateRange);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst DocumentSummaryPanel: React.FC<DocumentSummaryPanelProps> = ({ isOpen, onClose }) => {\r\n  // State variables\r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [dateRange, setDateRange] = useState<'allTime' | 'thisMonth' | 'lastMonth' | 'thisYear' | 'lastYear' | 'custom'>('allTime');\r\n  const [customStartDate, setCustomStartDate] = useState<string>('');\r\n  const [customEndDate, setCustomEndDate] = useState<string>('');\r\n  const [vehicleFilter, setVehicleFilter] = useState<string>('all');\r\n  const [documentTypeFilter, setDocumentTypeFilter] = useState<string>('all');\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [chartView, setChartView] = useState<'monthly' | 'yearly'>('monthly');\r\n  const contentRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Refresh functionality state\r\n  const [isBulkRefreshing, setIsBulkRefreshing] = useState(false);\r\n  const [refreshProgress, setRefreshProgress] = useState<{[key: string]: 'pending' | 'processing' | 'success' | 'error'}>({});\r\n  \r\n  // Challan functionality state\r\n  const { fetchChallanInfo, loading: challanLoading } = useChallanInfo();\r\n  const [showChallanModal, setShowChallanModal] = useState(false);\r\n  const [currentChallanData, setCurrentChallanData] = useState(null);\r\n  const [challanRefreshProgress, setChallanRefreshProgress] = useState(0);\r\n  const [isBulkChallanLoading, setIsBulkChallanLoading] = useState(false);\r\n  \r\n  // Collapsible sections state\r\n  const [expandedSections, setExpandedSections] = useState({\r\n    stats: true,\r\n    charts: true\r\n  });\r\n  \r\n  // Urgency sorting state\r\n  const [sort, setSort] = useState<SortMode>({ kind: \"urgency\" });\r\n  \r\n  // Responsive column visibility\r\n  const isSmallScreen = useMediaQuery('(max-width: 1024px)');\r\n  const visibleColumns = isSmallScreen \r\n    ? ['vehicle', 'insurance', 'puc', 'rc_expiry']\r\n    : ['vehicle', 'insurance', 'fitness', 'permit', 'puc', 'tax', 'rc_expiry'];\r\n  \r\n  // Toggle section visibility\r\n  const toggleSection = (section: keyof typeof expandedSections) => {\r\n    setExpandedSections(prev => ({\r\n      ...prev,\r\n      [section]: !prev[section]\r\n    }));\r\n  };\r\n\r\n  // Column sorting handler\r\n  const handleColumnSort = (column: DocKey) => {\r\n    const isCurrentColumn = sort.kind === \"column\" && sort.column === column;\r\n    const newDir = isCurrentColumn && sort.dir === \"asc\" ? \"desc\" : \"asc\";\r\n    setSort({ kind: \"column\", column, dir: newDir });\r\n  };\r\n\r\n  // Helper function for individual vehicle refresh\r\n  const refreshVehicleData = async (vehicle: Vehicle) => {\r\n    try {\r\n      // Set status to processing\r\n      setRefreshProgress(prev => ({ ...prev, [vehicle.id!]: 'processing' }));\r\n\r\n      const { data: result, error } = await supabase.functions.invoke('fetch-rc-details', {\r\n        body: {\r\n          registration_number: vehicle.registration_number,\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        throw new Error(error.message || 'Failed to fetch details');\r\n      }\r\n\r\n      if (!result?.success) {\r\n        throw new Error(result?.message || 'Failed to fetch vehicle details');\r\n      }\r\n\r\n      // Extract the RC data from the response\r\n      const rcData = result.data?.response || result.data || {};\r\n      \r\n      // Helper function to check if date is valid\r\n      const isValidDate = (dateStr: string | undefined): boolean => {\r\n        return dateStr !== undefined && dateStr !== '1900-01-01' && dateStr !== '';\r\n      };\r\n\r\n      // Prepare update payload with only the expiry dates - FIXED FIELD MAPPINGS\r\n      const updatePayload: Partial<Vehicle> = {\r\n        insurance_expiry_date: isValidDate(rcData.insurance_expiry) ? rcData.insurance_expiry : vehicle.insurance_expiry_date,\r\n        tax_paid_upto: rcData.tax_upto === 'LTT' ? '2099-12-31' : (isValidDate(rcData.tax_upto) ? rcData.tax_upto : vehicle.tax_paid_upto),\r\n        permit_expiry_date: isValidDate(rcData.permit_valid_upto) ? rcData.permit_valid_upto : vehicle.permit_expiry_date,\r\n        puc_expiry_date: isValidDate(rcData.pucc_upto) ? rcData.pucc_upto : vehicle.puc_expiry_date,\r\n        rc_expiry_date: isValidDate(rcData.rc_expiry) ? rcData.rc_expiry : vehicle.rc_expiry_date,\r\n        fitness_expiry_date: isValidDate(rcData.fitness_upto) ? rcData.fitness_upto : vehicle.fitness_expiry_date,\r\n        vahan_last_fetched_at: new Date().toISOString(),\r\n      };\r\n\r\n      // Update the vehicle in the database\r\n      const updatedVehicle = await updateVehicle(vehicle.id!, updatePayload);\r\n\r\n      // Update local state immediately for UI refresh\r\n      if (updatedVehicle) {\r\n        setVehicles(prevVehicles => \r\n          prevVehicles.map(v => \r\n            v.id === vehicle.id ? { ...v, ...updatePayload } : v\r\n          )\r\n        );\r\n      }\r\n\r\n      // Set status to success\r\n      setRefreshProgress(prev => ({ ...prev, [vehicle.id!]: 'success' }));\r\n      \r\n      return true;\r\n    } catch (error: any) {\r\n      console.error(`Error refreshing vehicle ${vehicle.registration_number}:`, error);\r\n      setRefreshProgress(prev => ({ ...prev, [vehicle.id!]: 'error' }));\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Batch refresh with rate limiting\r\n  const batchRefreshDocuments = async (vehicleIds: string[]) => {\r\n    const BATCH_SIZE = 5;\r\n    const results = [];\r\n    \r\n    for (let i = 0; i < vehicleIds.length; i += BATCH_SIZE) {\r\n      const batch = vehicleIds.slice(i, i + BATCH_SIZE);\r\n      const promises = batch.map(id => {\r\n        const vehicle = vehicles.find(v => v.id === id);\r\n        return vehicle ? refreshVehicleData(vehicle) : Promise.resolve(false);\r\n      });\r\n      results.push(...await Promise.all(promises));\r\n      \r\n      // Rate limit to avoid overload\r\n      if (i + BATCH_SIZE < vehicleIds.length) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n    }\r\n    return results;\r\n  };\r\n\r\n  // Bulk refresh handler with improved batch processing\r\n  const handleBulkRefresh = async () => {\r\n    setIsBulkRefreshing(true);\r\n    setRefreshProgress({});\r\n    \r\n    let successCount = 0;\r\n    let failureCount = 0;\r\n\r\n    // Initialize all vehicles as pending\r\n    const initialProgress = vehicles.reduce((acc, vehicle) => {\r\n      acc[vehicle.id!] = 'pending';\r\n      return acc;\r\n    }, {} as {[key: string]: 'pending' | 'processing' | 'success' | 'error'});\r\n    setRefreshProgress(initialProgress);\r\n\r\n    // Process vehicles in batches\r\n    const vehicleIds = vehicles.map(v => v.id!);\r\n    const results = await batchRefreshDocuments(vehicleIds);\r\n    \r\n    successCount = results.filter(r => r === true).length;\r\n    failureCount = results.filter(r => r === false).length;\r\n\r\n    setIsBulkRefreshing(false);\r\n    \r\n    // Show completion message\r\n    if (successCount > 0) {\r\n      toast.success(`✅ ${successCount} vehicles updated successfully${failureCount > 0 ? `, ${failureCount} failed` : ''}!`);\r\n    } else {\r\n      toast.error(`❌ All ${failureCount} vehicles failed to update`);\r\n    }\r\n\r\n    // Clear progress after 3 seconds\r\n    setTimeout(() => {\r\n      setRefreshProgress({});\r\n    }, 3000);\r\n\r\n    // Refresh the vehicle list\r\n    const refreshedVehicles = await getVehicles();\r\n    setVehicles(refreshedVehicles);\r\n  };\r\n\r\n  // Individual refresh handler for single vehicles\r\n  const handleIndividualRefresh = async (vehicle: Vehicle) => {\r\n    if (refreshProgress[vehicle.id!] === 'processing') return;\r\n\r\n    const success = await refreshVehicleData(vehicle);\r\n    \r\n    if (success) {\r\n      toast.success(`✅ ${vehicle.registration_number} updated successfully!`);\r\n      // Refresh the vehicle list to show updated data\r\n      const refreshedVehicles = await getVehicles();\r\n      setVehicles(refreshedVehicles);\r\n    } else {\r\n      toast.error(`❌ Failed to update ${vehicle.registration_number}`);\r\n    }\r\n\r\n    // Clear individual progress after 2 seconds\r\n    setTimeout(() => {\r\n      setRefreshProgress(prev => {\r\n        const newProgress = { ...prev };\r\n        delete newProgress[vehicle.id!];\r\n        return newProgress;\r\n      });\r\n    }, 2000);\r\n  };\r\n\r\n  // Challan functionality\r\n  const handleChallanRefresh = async () => {\r\n    // Map vehicles with correct field names and clean data\r\n    const vehiclesToCheck = vehicles.map(v => ({\r\n      registration_number: v.registration_number?.replace(/\\s/g, '').toUpperCase(),\r\n      chassis_number: v.chassis_number?.replace(/\\s/g, '').toUpperCase(),\r\n      engine_number: v.engine_number?.replace(/\\s/g, '').toUpperCase()\r\n    }));\r\n    \r\n    // Filter out vehicles without required fields\r\n    const validVehicles = vehiclesToCheck.filter(v => \r\n      v.registration_number && v.chassis_number && v.engine_number\r\n    );\r\n    \r\n    if (validVehicles.length === 0) {\r\n      toast.error('No vehicles have complete chassis and engine information for challan check');\r\n      return;\r\n    }\r\n    \r\n    if (validVehicles.length < vehiclesToCheck.length) {\r\n      toast.warning(`${vehiclesToCheck.length - validVehicles.length} vehicles skipped due to missing chassis/engine info`);\r\n    }\r\n    \r\n    setIsBulkChallanLoading(true);\r\n    setChallanRefreshProgress(0);\r\n    const results = [];\r\n    \r\n    for (let i = 0; i < validVehicles.length; i++) {\r\n      const result = await fetchChallanInfo(\r\n        validVehicles[i].registration_number,\r\n        validVehicles[i].chassis_number,\r\n        validVehicles[i].engine_number\r\n      );\r\n      \r\n      if (result) {\r\n        results.push(result);\r\n      }\r\n      \r\n      setChallanRefreshProgress(((i + 1) / validVehicles.length) * 100);\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n    }\r\n    \r\n    // Combine all challans\r\n    const allChallans = {\r\n      vehicleId: 'All Vehicles',\r\n      total: results.reduce((sum, r) => sum + r.total, 0),\r\n      challans: results.flatMap(r => r.challans)\r\n    };\r\n    \r\n    setCurrentChallanData(allChallans);\r\n    setShowChallanModal(true);\r\n    setIsBulkChallanLoading(false);\r\n    setChallanRefreshProgress(0);\r\n  };\r\n\r\n  const handleIndividualChallan = async (vehicle: Vehicle) => {\r\n    // Clean the data\r\n    const cleanedData = {\r\n      vehicleId: vehicle.registration_number?.replace(/\\s/g, '').toUpperCase(),\r\n      chassis: vehicle.chassis_number?.replace(/\\s/g, '').toUpperCase(),\r\n      engine: vehicle.engine_number?.replace(/\\s/g, '').toUpperCase()\r\n    };\r\n\r\n    if (!cleanedData.chassis || !cleanedData.engine) {\r\n      toast.error(`Cannot check challans: Missing chassis or engine number for ${vehicle.registration_number}`);\r\n      return;\r\n    }\r\n\r\n    const result = await fetchChallanInfo(\r\n      cleanedData.vehicleId,\r\n      cleanedData.chassis,\r\n      cleanedData.engine\r\n    );\r\n    \r\n    if (result) {\r\n      setCurrentChallanData(result);\r\n      setShowChallanModal(true);\r\n    }\r\n  };\r\n\r\n  // Initialize date ranges\r\n  useEffect(() => {\r\n    const today = new Date();\r\n    setCustomStartDate('2020-01-01');\r\n    setCustomEndDate(today.toISOString().split('T')[0]);\r\n  }, []);\r\n\r\n  // Fetch vehicle data when the panel opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      const fetchVehicles = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const data = await getVehicles();\r\n          setVehicles(Array.isArray(data) ? data : []);\r\n        } catch (error) {\r\n          console.error('Error fetching vehicles:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchVehicles();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Get effective date range based on the filter\r\n  const effectiveDateRange = useMemo(() => {\r\n    const now = new Date();\r\n    \r\n    switch (dateRange) {\r\n      case 'allTime':\r\n        return {\r\n          start: new Date('2020-01-01'),\r\n          end: now\r\n        };\r\n      case 'thisMonth':\r\n        return {\r\n          start: startOfMonth(now),\r\n          end: now\r\n        };\r\n      case 'lastMonth': {\r\n        const lastMonth = subMonths(now, 1);\r\n        return {\r\n          start: startOfMonth(lastMonth),\r\n          end: endOfMonth(lastMonth)\r\n        };\r\n      }\r\n      case 'thisYear':\r\n        return {\r\n          start: startOfYear(now),\r\n          end: now\r\n        };\r\n      case 'lastYear': {\r\n        const lastYear = subYears(now, 1);\r\n        return {\r\n          start: startOfYear(lastYear),\r\n          end: endOfYear(lastYear)\r\n        };\r\n      }\r\n      case 'custom':\r\n        return {\r\n          start: new Date(customStartDate || new Date().toISOString().split('T')[0]),\r\n          end: new Date(customEndDate || new Date().toISOString().split('T')[0])\r\n        };\r\n      default:\r\n        return {\r\n          start: startOfMonth(now),\r\n          end: now\r\n        };\r\n    }\r\n  }, [dateRange, customStartDate, customEndDate]);\r\n  \r\n  // Filter vehicles based on user selections\r\n  const filteredVehicles = useMemo(() => {\r\n    return vehicles.filter(vehicle => {\r\n      // Search filter\r\n      if (searchTerm && vehicle.registration_number) {\r\n        const searchLower = searchTerm.toLowerCase();\r\n        if (!vehicle.registration_number.toLowerCase().includes(searchLower)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Vehicle filter\r\n      if (vehicleFilter !== 'all' && vehicle.id !== vehicleFilter) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }, [vehicles, vehicleFilter, searchTerm]);\r\n\r\n  // Generate document matrix data from filtered vehicles with urgency scores\r\n  const documentMatrix = useMemo((): VehicleDocuments[] => {\r\n    return filteredVehicles.map(vehicle => {\r\n      const calculatedRCExpiry = calculateRCExpiry(vehicle.id!, vehicle.registration_date);\r\n      return {\r\n        id: vehicle.id,\r\n        registration: vehicle.registration_number,\r\n        registrationDate: vehicle.registration_date,\r\n        documents: {\r\n          rc: {\r\n            date: calculatedRCExpiry,\r\n            status: getExpiryStatus(calculatedRCExpiry)\r\n          },\r\n          insurance: {\r\n            date: vehicle.insurance_expiry_date || null,\r\n            status: getExpiryStatus(vehicle.insurance_expiry_date || null)\r\n          },\r\n          fitness: {\r\n            date: vehicle.fitness_expiry_date || null,\r\n            status: getExpiryStatus(vehicle.fitness_expiry_date || null)\r\n          },\r\n          permit: {\r\n            date: vehicle.permit_expiry_date || null,\r\n            status: getExpiryStatus(vehicle.permit_expiry_date || null)\r\n          },\r\n          puc: {\r\n            date: vehicle.puc_expiry_date || null,\r\n            status: getExpiryStatus(vehicle.puc_expiry_date || null)\r\n          },\r\n          tax: {\r\n            date: vehicle.tax_paid_upto || null,\r\n            status: getExpiryStatus(vehicle.tax_paid_upto || null)\r\n          }\r\n        },\r\n        // Add urgency data to each vehicle\r\n        __urg: rowUrgency(vehicle)\r\n      };\r\n    });\r\n  }, [filteredVehicles]);\r\n\r\n  // Apply sorting to the document matrix\r\n  const sortedDocumentMatrix = useMemo(() => {\r\n    const arr = [...documentMatrix];\r\n    switch (sort.kind) {\r\n      case \"urgency\":\r\n        return arr.sort((a,b) => b.__urg.score - a.__urg.score\r\n          || b.__urg.meta.expired - a.__urg.meta.expired\r\n          || a.__urg.meta.minDTX - b.__urg.meta.minDTX\r\n          || a.registration.localeCompare(b.registration));\r\n      \r\n      case \"expiringSoon\":\r\n        return arr.filter(r => {\r\n          const d = r.__urg.meta.minDTX;\r\n          return d !== null && d >= 0 && d <= 30;\r\n        }).sort((a,b) => (a.__urg.meta.minDTX ?? 9999) - (b.__urg.meta.minDTX ?? 9999));\r\n      \r\n      case \"missing\":\r\n        return arr.filter(r => r.__urg.meta.missing > 0)\r\n          .sort((a,b) => b.__urg.meta.missing - a.__urg.meta.missing);\r\n      \r\n      case \"legalPriority\": {\r\n        const lp = (r: any) => {\r\n          const S = (k: DocKey) => \r\n            docScore(k, r.documents[k].date, !!r.documents[k].date);\r\n          return S(\"rc\")+S(\"insurance\")+S(\"permit\");\r\n        };\r\n        return arr.sort((a,b) => lp(b)-lp(a));\r\n      }\r\n      \r\n      case \"column\": {\r\n        const {column, dir} = sort;\r\n        const val = (r: any) => daysTo(r.documents[column].date);\r\n        const cmp = (x: number|null, y: number|null) => \r\n          (x === null ? 9999 : x) - (y === null ? 9999 : y);\r\n        return arr.sort((a,b) => dir === \"asc\" ? cmp(val(a),val(b)) : cmp(val(b),val(a)));\r\n      }\r\n      default:\r\n        return arr;\r\n    }\r\n  }, [documentMatrix, sort]);\r\n\r\n  // Generate metrics data based on filtered vehicles and date range\r\n  const metrics = useMemo((): DocumentMetrics => {\r\n    const result = {\r\n      thisMonth: {\r\n        totalExpense: 0,\r\n        expectedExpense: 0,\r\n        renewalsCount: 0,\r\n        lapsedCount: 0\r\n      },\r\n      thisYear: {\r\n        totalExpense: 0\r\n      }\r\n    };\r\n\r\n    // Calculate actual monthly expenses based on renewal dates\r\n    const currentMonth = new Date();\r\n    const currentMonthStart = startOfMonth(currentMonth);\r\n    const currentMonthEnd = endOfMonth(currentMonth);\r\n    const yearStart = startOfYear(currentMonth);\r\n    \r\n    let monthlyExpense = 0;\r\n    let yearlyExpense = 0;\r\n    \r\n    filteredVehicles.forEach(vehicle => {\r\n      // Calculate monthly expense for documents expiring this month\r\n      if (vehicle.insurance_expiry_date && isWithinInterval(new Date(vehicle.insurance_expiry_date), { start: currentMonthStart, end: currentMonthEnd })) {\r\n        monthlyExpense += vehicle.insurance_premium_amount || 0;\r\n      }\r\n      if (vehicle.fitness_expiry_date && isWithinInterval(new Date(vehicle.fitness_expiry_date), { start: currentMonthStart, end: currentMonthEnd })) {\r\n        monthlyExpense += vehicle.fitness_cost || 0;\r\n      }\r\n      if (vehicle.permit_expiry_date && isWithinInterval(new Date(vehicle.permit_expiry_date), { start: currentMonthStart, end: currentMonthEnd })) {\r\n        monthlyExpense += vehicle.permit_cost || 0;\r\n      }\r\n      if (vehicle.puc_expiry_date && isWithinInterval(new Date(vehicle.puc_expiry_date), { start: currentMonthStart, end: currentMonthEnd })) {\r\n        monthlyExpense += vehicle.puc_cost || 0;\r\n      }\r\n      if (vehicle.tax_paid_upto && isWithinInterval(new Date(vehicle.tax_paid_upto), { start: currentMonthStart, end: currentMonthEnd })) {\r\n        monthlyExpense += vehicle.tax_amount || 0;\r\n      }\r\n      \r\n      // Calculate yearly expense (actual renewals within this year)\r\n      if (vehicle.insurance_expiry_date && isWithinInterval(new Date(vehicle.insurance_expiry_date), { start: yearStart, end: currentMonth })) {\r\n        yearlyExpense += vehicle.insurance_premium_amount || 0;\r\n      }\r\n      if (vehicle.fitness_expiry_date && isWithinInterval(new Date(vehicle.fitness_expiry_date), { start: yearStart, end: currentMonth })) {\r\n        yearlyExpense += vehicle.fitness_cost || 0;\r\n      }\r\n      if (vehicle.permit_expiry_date && isWithinInterval(new Date(vehicle.permit_expiry_date), { start: yearStart, end: currentMonth })) {\r\n        yearlyExpense += vehicle.permit_cost || 0;\r\n      }\r\n      if (vehicle.puc_expiry_date && isWithinInterval(new Date(vehicle.puc_expiry_date), { start: yearStart, end: currentMonth })) {\r\n        yearlyExpense += vehicle.puc_cost || 0;\r\n      }\r\n      if (vehicle.tax_paid_upto && isWithinInterval(new Date(vehicle.tax_paid_upto), { start: yearStart, end: currentMonth })) {\r\n        yearlyExpense += vehicle.tax_amount || 0;\r\n      }\r\n    });\r\n    \r\n    result.thisMonth.totalExpense = monthlyExpense;\r\n    result.thisYear.totalExpense = yearlyExpense;\r\n\r\n    // Calculate expected expense for filtered vehicles within date range\r\n    const today = new Date();\r\n    const expiringDocsInRange = filteredVehicles.flatMap(vehicle => {\r\n      const expiring = [];\r\n      \r\n      const today = new Date();\r\n      const thirtyDaysFromNow = new Date();\r\n      thirtyDaysFromNow.setDate(today.getDate() + 30);\r\n      \r\n      // Check if document expiry dates fall within the next 30 days (more realistic for \"this month\")\r\n      if (vehicle.insurance_expiry_date) {\r\n        const expiryDate = new Date(vehicle.insurance_expiry_date);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'insurance', vehicle });\r\n        }\r\n      }\r\n      \r\n      if (vehicle.fitness_expiry_date) {\r\n        const expiryDate = new Date(vehicle.fitness_expiry_date);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'fitness', vehicle });\r\n        }\r\n      }\r\n      \r\n      if (vehicle.permit_expiry_date) {\r\n        const expiryDate = new Date(vehicle.permit_expiry_date);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'permit', vehicle });\r\n        }\r\n      }\r\n      \r\n      if (vehicle.puc_expiry_date) {\r\n        const expiryDate = new Date(vehicle.puc_expiry_date);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'puc', vehicle });\r\n        }\r\n      }\r\n      \r\n      if (vehicle.tax_paid_upto) {\r\n        const expiryDate = new Date(vehicle.tax_paid_upto);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'tax', vehicle });\r\n        }\r\n      }\r\n      \r\n      if (vehicle.rc_expiry_date) {\r\n        const expiryDate = new Date(vehicle.rc_expiry_date);\r\n        if (expiryDate >= today && expiryDate <= thirtyDaysFromNow) {\r\n          expiring.push({ vehicleId: vehicle.id, type: 'rc', vehicle });\r\n        }\r\n      }\r\n      \r\n      return expiring;\r\n    });\r\n    \r\n    const expectedExpense = expiringDocsInRange.reduce((total, doc) => {\r\n      let previousCost = getLastRenewalCost(doc.vehicle, doc.type);\r\n      \r\n      // If no specific cost found, use fleet average\r\n      if (!previousCost || previousCost === 0) {\r\n        previousCost = getFleetAverageCost(doc.type, filteredVehicles);\r\n      }\r\n      \r\n      const inflationRate = getInflationRateForDocType(doc.type);\r\n      const projectedCost = previousCost * (1 + inflationRate);\r\n      \r\n      return total + projectedCost;\r\n    }, 0);\r\n    \r\n    result.thisMonth.expectedExpense = Math.round(expectedExpense);\r\n    result.thisMonth.renewalsCount = expiringDocsInRange.length;\r\n    \r\n    // Count lapsed/expired documents for filtered vehicles\r\n    const lapsedDocs = filteredVehicles.flatMap(vehicle => {\r\n      const lapsed = [];\r\n      \r\n      const checkLapsed = (dateField: string | null, type: string) => {\r\n        if (dateField && getExpiryStatus(dateField) === 'expired') {\r\n          lapsed.push({ vehicleId: vehicle.id, type });\r\n        }\r\n      };\r\n      \r\n      checkLapsed(vehicle.rc_expiry_date, 'rc');\r\n      checkLapsed(vehicle.insurance_expiry_date, 'insurance');\r\n      checkLapsed(vehicle.fitness_expiry_date, 'fitness');\r\n      checkLapsed(vehicle.permit_expiry_date, 'permit');\r\n      checkLapsed(vehicle.puc_expiry_date, 'puc');\r\n      checkLapsed(vehicle.tax_paid_upto, 'tax');\r\n      \r\n      return lapsed;\r\n    });\r\n    \r\n    result.thisMonth.lapsedCount = lapsedDocs.length;\r\n\r\n    return result;\r\n  }, [filteredVehicles, effectiveDateRange]);\r\n\r\n  // Generate monthly expenditure data for filtered vehicles based on actual renewal dates\r\n  const monthlyExpenditure = useMemo((): MonthlyExpenditure[] => {\r\n    const today = new Date();\r\n    const months: MonthlyExpenditure[] = [];\r\n    \r\n    // Generate data for the last 12 months for better visibility\r\n    for (let i = 11; i >= 0; i--) {\r\n      const month = subMonths(today, i);\r\n      const monthName = format(month, 'MMM');\r\n      const monthStart = startOfMonth(month);\r\n      const monthEnd = endOfMonth(month);\r\n      \r\n      // Initialize monthly costs\r\n      const monthData: MonthlyExpenditure = {\r\n        month: monthName,\r\n        rc: 0,\r\n        insurance: 0,\r\n        fitness: 0,\r\n        permit: 0,\r\n        puc: 0,\r\n        tax: 0,\r\n        other: 0\r\n      };\r\n      \r\n      // Calculate actual costs based on document expiry dates\r\n      filteredVehicles.forEach(vehicle => {\r\n        // Check RC renewal\r\n        if (vehicle.rc_expiry_date && isWithinInterval(new Date(vehicle.rc_expiry_date), { start: monthStart, end: monthEnd })) {\r\n          monthData.rc += getLastRenewalCost(vehicle, 'rc');\r\n        }\r\n        \r\n        // Check Insurance renewal\r\n        if (vehicle.insurance_expiry_date && isWithinInterval(new Date(vehicle.insurance_expiry_date), { start: monthStart, end: monthEnd })) {\r\n          monthData.insurance += vehicle.insurance_premium_amount || getFleetAverageCost('insurance', vehicles);\r\n        }\r\n        \r\n        // Check Fitness renewal\r\n        if (vehicle.fitness_expiry_date && isWithinInterval(new Date(vehicle.fitness_expiry_date), { start: monthStart, end: monthEnd })) {\r\n          monthData.fitness += vehicle.fitness_cost || getFleetAverageCost('fitness', vehicles);\r\n        }\r\n        \r\n        // Check Permit renewal\r\n        if (vehicle.permit_expiry_date && isWithinInterval(new Date(vehicle.permit_expiry_date), { start: monthStart, end: monthEnd })) {\r\n          monthData.permit += vehicle.permit_cost || getFleetAverageCost('permit', vehicles);\r\n        }\r\n        \r\n        // Check PUC renewal (PUC is typically renewed every 6 months)\r\n        if (vehicle.puc_expiry_date && isWithinInterval(new Date(vehicle.puc_expiry_date), { start: monthStart, end: monthEnd })) {\r\n          monthData.puc += vehicle.puc_cost || getFleetAverageCost('puc', vehicles);\r\n        }\r\n        \r\n        // Check Tax payment\r\n        if (vehicle.tax_paid_upto && isWithinInterval(new Date(vehicle.tax_paid_upto), { start: monthStart, end: monthEnd })) {\r\n          monthData.tax += vehicle.tax_amount || getFleetAverageCost('tax', vehicles);\r\n        }\r\n      });\r\n      \r\n      // Apply inflation adjustments for future months\r\n      if (month > today) {\r\n        const monthsInFuture = differenceInMonths(month, today);\r\n        Object.keys(monthData).forEach(key => {\r\n          if (key !== 'month') {\r\n            const inflationRate = getInflationRateForDocType(key);\r\n            monthData[key as keyof MonthlyExpenditure] *= Math.pow(1 + inflationRate/12, monthsInFuture);\r\n          }\r\n        });\r\n      }\r\n      \r\n      months.push(monthData);\r\n    }\r\n    \r\n    return months;\r\n  }, [filteredVehicles, vehicles]);\r\n\r\n  // Generate vehicle expenditure data for filtered vehicles\r\n  const vehicleExpenditure = useMemo((): VehicleExpenditure[] => {\r\n    return filteredVehicles.map(vehicle => {\r\n      // Calculate total document expenses for this vehicle\r\n      const totalAmount = (\r\n        (vehicle.insurance_premium_amount || 0) + \r\n        (vehicle.fitness_cost || 0) + \r\n        (vehicle.permit_cost || 0) + \r\n        (vehicle.puc_cost || 0) +\r\n        (vehicle.tax_amount || 0)\r\n      );\r\n      \r\n      return {\r\n        vehicle: vehicle.registration_number,\r\n        amount: totalAmount\r\n      };\r\n    }).sort((a, b) => b.amount - a.amount); // Sort by highest amount first\r\n  }, [filteredVehicles]);\r\n\r\n  // Format date for display\r\n  const formatDate = (dateString: string | null) => {\r\n    if (!dateString) return '—';\r\n    try {\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });\r\n    } catch (error) {\r\n      return '—';\r\n    }\r\n  };\r\n\r\n  // Print functionality\r\n  const handlePrint = useReactToPrint({\r\n    content: () => contentRef.current,\r\n    documentTitle: 'Vehicle Document Summary',\r\n    removeAfterPrint: true,\r\n    pageStyle: `\r\n      @page {\r\n        size: auto;\r\n        margin: 20mm;\r\n      }\r\n      @media print {\r\n        body * {\r\n          visibility: hidden;\r\n        }\r\n        #printable-content, #printable-content * {\r\n          visibility: visible;\r\n        }\r\n        #printable-content {\r\n          position: absolute;\r\n          left: 0;\r\n          top: 0;\r\n          width: 100%;\r\n        }\r\n        .no-print {\r\n          display: none !important;\r\n        }\r\n      }\r\n    `\r\n  });\r\n\r\n  // Handle print button click with loading check\r\n  const handlePrintClick = () => {\r\n    if (loading) {\r\n      alert('Please wait for the data to load before printing.');\r\n      return;\r\n    }\r\n    \r\n    if (!contentRef.current) {\r\n      alert('Content is not ready for printing. Please try again in a moment.');\r\n      return;\r\n    }\r\n    \r\n    handlePrint();\r\n  };\r\n\r\n  // Download as PDF functionality\r\n  const handleDownload = async () => {\r\n    if (loading) {\r\n      alert('Please wait for the data to load before downloading.');\r\n      return;\r\n    }\r\n    \r\n    if (!contentRef.current) return;\r\n    \r\n    try {\r\n      const content = contentRef.current;\r\n      const canvas = await html2canvas(content, {\r\n        scale: 2, // Higher scale for better quality\r\n        useCORS: true,\r\n        logging: false,\r\n        backgroundColor: '#ffffff'\r\n      });\r\n      \r\n      const imgData = canvas.toDataURL('image/png');\r\n      const pdf = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: 'a4'\r\n      });\r\n      \r\n      const imgWidth = 210; // A4 width in mm\r\n      const pageHeight = 297; // A4 height in mm\r\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\r\n      let heightLeft = imgHeight;\r\n      let position = 0;\r\n      \r\n      // Add first page\r\n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\r\n      heightLeft -= pageHeight;\r\n      \r\n      // Add subsequent pages if needed\r\n      while (heightLeft > 0) {\r\n        position = heightLeft - imgHeight;\r\n        pdf.addPage();\r\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\r\n        heightLeft -= pageHeight;\r\n      }\r\n      \r\n      pdf.save('Vehicle_Document_Summary.pdf');\r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n    }\r\n  };\r\n\r\n  // Export to Excel with all data\r\n  const exportToExcel = () => {\r\n    if (loading) {\r\n      alert('Please wait for the data to load before exporting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const exportData = documentMatrix.map(vehicle => ({\r\n        'Vehicle Number': vehicle.registration,\r\n        'Registration Date': formatDate(vehicle.registrationDate),\r\n        'Insurance Status': vehicle.documents.insurance.status,\r\n        'Insurance Expiry': formatDate(vehicle.documents.insurance.date),\r\n        'Fitness Status': vehicle.documents.fitness.status,\r\n        'Fitness Expiry': formatDate(vehicle.documents.fitness.date),\r\n        'Permit Status': vehicle.documents.permit.status,\r\n        'Permit Expiry': formatDate(vehicle.documents.permit.date),\r\n        'PUC Status': vehicle.documents.puc.status,\r\n        'PUC Expiry': formatDate(vehicle.documents.puc.date),\r\n        'Tax Status': vehicle.documents.tax.status,\r\n        'Tax Expiry': formatDate(vehicle.documents.tax.date),\r\n        'RC Expiry': formatDate(vehicle.documents.rc.date),\r\n        'RC Status': vehicle.documents.rc.status\r\n      }));\r\n\r\n      const ws = XLSX.utils.json_to_sheet(exportData);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Vehicle Documents');\r\n      \r\n      // Auto-size columns\r\n      const cols = Object.keys(exportData[0]).map(key => ({\r\n        wch: Math.max(key.length, ...exportData.map(row => String(row[key]).length)) + 2\r\n      }));\r\n      ws['!cols'] = cols;\r\n      \r\n      XLSX.writeFile(wb, `Vehicle_Documents_${new Date().toISOString().split('T')[0]}.xlsx`);\r\n      toast.success('Excel file exported successfully!');\r\n    } catch (error) {\r\n      console.error('Error exporting to Excel:', error);\r\n      toast.error('Failed to export Excel file');\r\n    }\r\n  };\r\n\r\n  // Export to CSV\r\n  const exportToCSV = () => {\r\n    if (loading) {\r\n      alert('Please wait for the data to load before exporting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const headers = ['Vehicle Number', 'Registration Date', 'Insurance Status', 'Insurance Expiry', \r\n                      'Fitness Status', 'Fitness Expiry', 'Permit Status', 'Permit Expiry',\r\n                      'PUC Status', 'PUC Expiry', 'Tax Status', 'Tax Expiry', 'RC Expiry', 'RC Status'];\r\n      \r\n      const rows = documentMatrix.map(vehicle => [\r\n        vehicle.registration,\r\n        formatDate(vehicle.registrationDate),\r\n        vehicle.documents.insurance.status,\r\n        formatDate(vehicle.documents.insurance.date),\r\n        vehicle.documents.fitness.status,\r\n        formatDate(vehicle.documents.fitness.date),\r\n        vehicle.documents.permit.status,\r\n        formatDate(vehicle.documents.permit.date),\r\n        vehicle.documents.puc.status,\r\n        formatDate(vehicle.documents.puc.date),\r\n        vehicle.documents.tax.status,\r\n        formatDate(vehicle.documents.tax.date),\r\n        formatDate(vehicle.documents.rc.date),\r\n        vehicle.documents.rc.status\r\n      ]);\r\n\r\n      const csvContent = [\r\n        headers.join(','),\r\n        ...rows.map(row => row.map(cell => `\"${cell}\"`).join(','))\r\n      ].join('\\n');\r\n\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = `Vehicle_Documents_${new Date().toISOString().split('T')[0]}.csv`;\r\n      link.click();\r\n      toast.success('CSV file exported successfully!');\r\n    } catch (error) {\r\n      console.error('Error exporting to CSV:', error);\r\n      toast.error('Failed to export CSV file');\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 overflow-y-auto bg-gray-900/50 flex\">\r\n      <div className=\"relative w-full max-w-7xl mx-auto bg-white shadow-xl rounded-lg flex flex-col h-[calc(100vh-40px)] my-5\">\r\n        {/* Panel Header */}\r\n        <div className=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\r\n            <FileCheck className=\"mr-2 h-5 w-5 text-primary-600\" />\r\n            Vehicle Document Summary\r\n          </h2>\r\n          <div className=\"flex items-center gap-3\">\r\n            {/* Challan Check Button */}\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={handleChallanRefresh}\r\n              disabled={isBulkChallanLoading || vehicles.length === 0}\r\n              icon={<AlertTriangle className={`h-4 w-4 ${isBulkChallanLoading ? 'animate-spin' : ''}`} />}\r\n              title=\"Check challans for all vehicles\"\r\n            >\r\n              {isBulkChallanLoading ? `Checking... ${Math.round(challanRefreshProgress)}%` : 'Check Challans'}\r\n              {vehicles.length > 0 && !isBulkChallanLoading && (\r\n                <span className=\"ml-1 bg-yellow-100 text-yellow-800 text-xs px-2 py-0.5 rounded-full\">\r\n                  {vehicles.length}\r\n                </span>\r\n              )}\r\n            </Button>\r\n            {/* Bulk Refresh Button - This is where your cursor pointed! */}\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={handleBulkRefresh}\r\n              disabled={isBulkRefreshing || vehicles.length === 0}\r\n              icon={<RefreshCw className={`h-4 w-4 ${isBulkRefreshing ? 'animate-spin' : ''}`} />}\r\n              title=\"Refresh all vehicle expiry data\"\r\n            >\r\n              {isBulkRefreshing ? `Updating... ${Object.values(refreshProgress).filter(s => s === 'success' || s === 'error').length}/${vehicles.length}` : 'Refresh All Data'}\r\n              {vehicles.length > 0 && !isBulkRefreshing && (\r\n                <span className=\"ml-1 bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full\">\r\n                  {vehicles.length}\r\n                </span>\r\n              )}\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={handlePrintClick}\r\n              icon={<Print className=\"h-4 w-4\" />}\r\n              title=\"Print Report\"\r\n              disabled={loading || isBulkRefreshing}\r\n            />\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={handleDownload}\r\n              icon={<FileTextIcon className=\"h-4 w-4\" />}\r\n              title=\"Export as PDF\"\r\n              disabled={loading || isBulkRefreshing}\r\n            />\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={exportToExcel}\r\n              icon={<FileSpreadsheet className=\"h-4 w-4\" />}\r\n              title=\"Export as Excel\"\r\n              disabled={loading || isBulkRefreshing}\r\n            />\r\n            <Button\r\n              variant=\"outline\"\r\n              inputSize=\"sm\"\r\n              onClick={exportToCSV}\r\n              icon={<FileText className=\"h-4 w-4\" />}\r\n              title=\"Export as CSV\"\r\n              disabled={loading || isBulkRefreshing}\r\n            />\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n              aria-label=\"Close panel\"\r\n            >\r\n              <X className=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Bulk Refresh Progress Indicator */}\r\n        {isBulkRefreshing && (\r\n          <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 mx-6 mt-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"flex-shrink-0\">\r\n                <RefreshCw className=\"h-5 w-5 text-blue-400 animate-spin\" />\r\n              </div>\r\n              <div className=\"ml-3 flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h3 className=\"text-sm font-medium text-blue-800\">\r\n                    Refreshing Vehicle Data\r\n                  </h3>\r\n                  <div className=\"text-sm text-blue-600\">\r\n                    {Object.values(refreshProgress).filter(s => s === 'success' || s === 'error').length} of {vehicles.length} processed\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Progress Bar */}\r\n                <div className=\"mt-2 w-full bg-blue-200 rounded-full h-2\">\r\n                  <div \r\n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                    style={{ \r\n                      width: `${Math.round((Object.values(refreshProgress).filter(s => s === 'success' || s === 'error').length / vehicles.length) * 100)}%` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                \r\n                <div className=\"mt-2 text-xs text-blue-700\">\r\n                  ✅ {Object.values(refreshProgress).filter(s => s === 'success').length} successful • \r\n                  ❌ {Object.values(refreshProgress).filter(s => s === 'error').length} failed • \r\n                  🔄 {Object.values(refreshProgress).filter(s => s === 'processing').length} processing • \r\n                  ⏳ {Object.values(refreshProgress).filter(s => s === 'pending').length} waiting\r\n                </div>\r\n                \r\n                <p className=\"mt-1 text-xs text-blue-600\">\r\n                  You can close this panel and the refresh will continue in the background.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Challan Check Progress Indicator */}\r\n        {isBulkChallanLoading && (\r\n          <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 mx-6 mt-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"flex-shrink-0\">\r\n                <AlertTriangle className=\"h-5 w-5 text-yellow-400 animate-spin\" />\r\n              </div>\r\n              <div className=\"ml-3 flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h3 className=\"text-sm font-medium text-yellow-800\">\r\n                    Checking Challans\r\n                  </h3>\r\n                  <div className=\"text-sm text-yellow-600\">\r\n                    {Math.round(challanRefreshProgress)}% complete\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Progress Bar */}\r\n                <div className=\"mt-2 w-full bg-yellow-200 rounded-full h-2\">\r\n                  <div \r\n                    className=\"bg-yellow-600 h-2 rounded-full transition-all duration-300\"\r\n                    style={{ \r\n                      width: `${challanRefreshProgress}%` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                \r\n                <p className=\"mt-1 text-xs text-yellow-600\">\r\n                  Checking challan information for all vehicles. This may take a few minutes.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Panel Content */}\r\n        <div className=\"flex-grow overflow-y-auto p-6 space-y-6\" ref={contentRef} id=\"printable-content\">\r\n          {loading ? (\r\n            <div className=\"flex justify-center items-center h-32\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\r\n              <p className=\"ml-2 text-gray-600\">Loading document data...</p>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {/* Date Range Filter - Made Sticky */}\r\n              <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200 sticky top-0 z-10 no-print\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                  <div>\r\n                    <Select\r\n                      label=\"Date Range\"\r\n                      options={[\r\n                        { value: 'allTime', label: 'All Time' },\r\n                        { value: 'thisMonth', label: 'This Month' },\r\n                        { value: 'lastMonth', label: 'Last Month' },\r\n                        { value: 'thisYear', label: 'This Year' },\r\n                        { value: 'lastYear', label: 'Last Year' },\r\n                        { value: 'custom', label: 'Custom Range' }\r\n                      ]}\r\n                      value={dateRange}\r\n                      onChange={(e) => setDateRange(e.target.value as any)}\r\n                    />\r\n                  </div>\r\n                  \r\n                  {dateRange === 'custom' && (\r\n                    <>\r\n                      <div>\r\n                        <Input\r\n                          type=\"date\"\r\n                          label=\"Start Date\"\r\n                          value={customStartDate}\r\n                          onChange={(e) => setCustomStartDate(e.target.value)}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Input\r\n                          type=\"date\"\r\n                          label=\"End Date\"\r\n                          value={customEndDate}\r\n                          onChange={(e) => setCustomEndDate(e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  <div>\r\n                    <Select\r\n                      label=\"Vehicle\"\r\n                      options={[\r\n                        { value: 'all', label: 'All Vehicles' },\r\n                        ...vehicles.map(v => ({ value: v.id, label: v.registration_number }))\r\n                      ]}\r\n                      value={vehicleFilter}\r\n                      onChange={(e) => setVehicleFilter(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Compact Metrics Bar - Space Optimized */}\r\n              <div className=\"flex items-center justify-between bg-white p-3 rounded-lg shadow-sm border border-gray-200\">\r\n                <div className=\"flex gap-6 text-sm\">\r\n                  <span className=\"flex items-center gap-1\">\r\n                    <IndianRupee className=\"h-4 w-4 text-primary-600\" />\r\n                    Monthly: <b>₹{metrics.thisMonth.expectedExpense.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</b>\r\n                  </span>\r\n                  <span className=\"flex items-center gap-1\">\r\n                    <Calendar className=\"h-4 w-4 text-primary-600\" />\r\n                    Yearly: <b>₹{metrics.thisYear.totalExpense.toLocaleString('en-IN', { maximumFractionDigits: 0 })}</b>\r\n                  </span>\r\n                  <span className=\"flex items-center gap-1 text-green-600\">\r\n                    <FileCheck className=\"h-4 w-4\" />\r\n                    Renewals: <b>{metrics.thisMonth.renewalsCount}</b>\r\n                  </span>\r\n                  <span className=\"flex items-center gap-1 text-red-600\">\r\n                    <AlertCircle className=\"h-4 w-4\" />\r\n                    Expired: <b>{metrics.thisMonth.lapsedCount}</b>\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <button\r\n                    onClick={() => toggleSection('stats')}\r\n                    className=\"p-1 rounded hover:bg-gray-100 transition-colors\"\r\n                    title={expandedSections.stats ? 'Hide stats' : 'Show stats'}\r\n                  >\r\n                    {expandedSections.stats ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Matrix Table - Document Status */}\r\n              <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n                <div className=\"px-4 py-3 border-b border-gray-200 bg-gray-50 flex justify-between items-center\">\r\n                  <h3 className=\"font-medium text-gray-700 border-l-2 border-blue-500 pl-2\">Document Status Matrix</h3>\r\n                  <div className=\"flex items-center gap-3 no-print\">\r\n                    <Input\r\n                      placeholder=\"Search vehicles...\"\r\n                      icon={<Search className=\"h-4 w-4\" />}\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      className=\"w-60\"\r\n                      inputSize=\"sm\"\r\n                    />\r\n                    <Select\r\n                      options={[\r\n                        { value: 'all', label: 'All Documents' },\r\n                        { value: 'rc', label: 'RC Only' },\r\n                        { value: 'insurance', label: 'Insurance Only' },\r\n                        { value: 'fitness', label: 'Fitness Only' },\r\n                        { value: 'permit', label: 'Permit Only' },\r\n                        { value: 'puc', label: 'PUC Only' },\r\n                        { value: 'tax', label: 'Tax Only' }\r\n                      ]}\r\n                      value={documentTypeFilter}\r\n                      onChange={(e) => setDocumentTypeFilter(e.target.value)}\r\n                      className=\"w-40\"\r\n                      inputSize=\"sm\"\r\n                    />\r\n                    \r\n                    {/* Urgency Filter Chips */}\r\n                    <div className=\"flex gap-2 ml-2\">\r\n                      <button\r\n                        className={sort.kind === \"urgency\" ? \"chip active\" : \"chip\"}\r\n                        onClick={() => setSort({ kind: \"urgency\" })}\r\n                        style={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '4px',\r\n                          padding: '5px 10px',\r\n                          fontSize: '13px',\r\n                          fontWeight: 500,\r\n                          border: '1px solid #e5e7eb',\r\n                          borderRadius: '16px',\r\n                          background: sort.kind === \"urgency\" ? '#eef2ff' : 'white',\r\n                          color: sort.kind === \"urgency\" ? '#4f46e5' : '#6b7280',\r\n                          borderTop: sort.kind === \"urgency\" ? '2px solid #6366f1' : '2px solid transparent',\r\n                          cursor: 'pointer',\r\n                          height: '30px'\r\n                        }}\r\n                      >\r\n                        <AlertTriangle size={14} />\r\n                        Urgency\r\n                      </button>\r\n                      \r\n                      <button\r\n                        className={sort.kind === \"expiringSoon\" ? \"chip active\" : \"chip\"}\r\n                        onClick={() => setSort({ kind: \"expiringSoon\" })}\r\n                        style={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '4px',\r\n                          padding: '5px 10px',\r\n                          fontSize: '13px',\r\n                          fontWeight: 500,\r\n                          border: '1px solid #e5e7eb',\r\n                          borderRadius: '16px',\r\n                          background: sort.kind === \"expiringSoon\" ? '#fffbeb' : 'white',\r\n                          color: sort.kind === \"expiringSoon\" ? '#d97706' : '#6b7280',\r\n                          borderTop: sort.kind === \"expiringSoon\" ? '2px solid #f59e0b' : '2px solid transparent',\r\n                          cursor: 'pointer',\r\n                          height: '30px'\r\n                        }}\r\n                      >\r\n                        <Clock size={14} />\r\n                        ≤30d\r\n                      </button>\r\n                      \r\n                      <button\r\n                        className={sort.kind === \"missing\" ? \"chip active\" : \"chip\"}\r\n                        onClick={() => setSort({ kind: \"missing\" })}\r\n                        style={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '4px',\r\n                          padding: '5px 10px',\r\n                          fontSize: '13px',\r\n                          fontWeight: 500,\r\n                          border: '1px solid #e5e7eb',\r\n                          borderRadius: '16px',\r\n                          background: sort.kind === \"missing\" ? '#fef2f2' : 'white',\r\n                          color: sort.kind === \"missing\" ? '#dc2626' : '#6b7280',\r\n                          borderTop: sort.kind === \"missing\" ? '2px solid #ef4444' : '2px solid transparent',\r\n                          cursor: 'pointer',\r\n                          height: '30px'\r\n                        }}\r\n                      >\r\n                        <FileX size={14} />\r\n                        Missing\r\n                      </button>\r\n                      \r\n                      <button\r\n                        className={sort.kind === \"legalPriority\" ? \"chip active\" : \"chip\"}\r\n                        onClick={() => setSort({ kind: \"legalPriority\" })}\r\n                        style={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '4px',\r\n                          padding: '5px 10px',\r\n                          fontSize: '13px',\r\n                          fontWeight: 500,\r\n                          border: '1px solid #e5e7eb',\r\n                          borderRadius: '16px',\r\n                          background: sort.kind === \"legalPriority\" ? '#f0f9ff' : 'white',\r\n                          color: sort.kind === \"legalPriority\" ? '#0369a1' : '#6b7280',\r\n                          borderTop: sort.kind === \"legalPriority\" ? '2px solid #0ea5e9' : '2px solid transparent',\r\n                          cursor: 'pointer',\r\n                          height: '30px'\r\n                        }}\r\n                      >\r\n                        <Shield size={14} />\r\n                        Legal\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"overflow-x-auto\">\r\n                  {sortedDocumentMatrix.length > 50 && FixedSizeList ? (\r\n                    // Virtual scrolling for large datasets\r\n                    <div className=\"h-96\">\r\n                      <FixedSizeList\r\n                        height={384}\r\n                        itemCount={sortedDocumentMatrix.length}\r\n                        itemSize={48}\r\n                        width=\"100%\"\r\n                      >\r\n                        {({ index, style }) => {\r\n                          const vehicle = sortedDocumentMatrix[index];\r\n                          return (\r\n                            <div \r\n                              style={{\r\n                                ...style,\r\n                                background: vehicle.__urg.score > 2 \r\n                                  ? 'linear-gradient(90deg, #fef2f2 0%, transparent 100%)'\r\n                                  : vehicle.__urg.meta.minDTX <= 30 && vehicle.__urg.meta.minDTX >= 0\r\n                                    ? 'linear-gradient(90deg, #fffbeb 0%, transparent 100%)'\r\n                                    : 'transparent'\r\n                              }} \r\n                              className=\"flex items-center border-b border-gray-200 hover:bg-gray-50\"\r\n                            >\r\n                              <div className=\"px-3 py-2 w-40 flex-shrink-0\">\r\n                                <div className=\"text-sm font-medium text-gray-900 truncate\">\r\n                                  {vehicle.registration}\r\n                                </div>\r\n                                {vehicles.find(v => v.id === vehicle.id)?.vahan_last_fetched_at && (\r\n                                  <div className=\"text-xs text-blue-600\">\r\n                                    {format(parseISO(vehicles.find(v => v.id === vehicle.id)!.vahan_last_fetched_at!), 'MMM d, HH:mm')}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                              \r\n                              {visibleColumns.includes('insurance') && (documentTypeFilter === 'all' || documentTypeFilter === 'insurance') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"insurance\"\r\n                                    expiryDate={vehicle.documents.insurance.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.insurance_document_url ? [vehicles.find(v => v.id === vehicle.id)!.insurance_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </div>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('fitness') && (documentTypeFilter === 'all' || documentTypeFilter === 'fitness') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"fitness\"\r\n                                    expiryDate={vehicle.documents.fitness.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.fitness_document_url ? [vehicles.find(v => v.id === vehicle.id)!.fitness_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </div>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('permit') && (documentTypeFilter === 'all' || documentTypeFilter === 'permit') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"permit\"\r\n                                    expiryDate={vehicle.documents.permit.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.permit_document_url ? [vehicles.find(v => v.id === vehicle.id)!.permit_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </div>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('puc') && (documentTypeFilter === 'all' || documentTypeFilter === 'puc') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"puc\"\r\n                                    expiryDate={vehicle.documents.puc.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.puc_document_url ? [vehicles.find(v => v.id === vehicle.id)!.puc_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </div>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('tax') && (documentTypeFilter === 'all' || documentTypeFilter === 'tax') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"tax\"\r\n                                    expiryDate={vehicle.documents.tax.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.tax_document_url ? [vehicles.find(v => v.id === vehicle.id)!.tax_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </div>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('rc_expiry') && (documentTypeFilter === 'all' || documentTypeFilter === 'rc') && (\r\n                                <div className=\"px-2 py-2 w-24 flex-shrink-0 text-center bg-blue-50\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"rc\"\r\n                                    expiryDate={vehicle.documents.rc.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.rc_document_url ? [vehicles.find(v => v.id === vehicle.id)!.rc_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                  {vehicle.registrationDate && (\r\n                                    <div className=\"text-xs text-gray-400\">\r\n                                      (15y)\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          );\r\n                        }}\r\n                      </FixedSizeList>\r\n                    </div>\r\n                  ) : (\r\n                    // Regular table for smaller datasets\r\n                    <table className=\"min-w-full divide-y divide-gray-200\">\r\n                      <thead className=\"bg-gray-50\">\r\n                        <tr>\r\n                          <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[140px] sticky left-0 bg-gray-50 z-10\">\r\n                            Vehicle Number\r\n                          </th>\r\n                          {visibleColumns.includes('insurance') && (documentTypeFilter === 'all' || documentTypeFilter === 'insurance') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"insurance\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-gray-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"insurance\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              Insurance\r\n                              {sort.kind === \"column\" && sort.column === \"insurance\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                          {visibleColumns.includes('fitness') && (documentTypeFilter === 'all' || documentTypeFilter === 'fitness') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"fitness\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-gray-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"fitness\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              Fitness\r\n                              {sort.kind === \"column\" && sort.column === \"fitness\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                          {visibleColumns.includes('permit') && (documentTypeFilter === 'all' || documentTypeFilter === 'permit') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"permit\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-gray-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"permit\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              Permit\r\n                              {sort.kind === \"column\" && sort.column === \"permit\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                          {visibleColumns.includes('puc') && (documentTypeFilter === 'all' || documentTypeFilter === 'puc') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"puc\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-gray-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"puc\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              PUC\r\n                              {sort.kind === \"column\" && sort.column === \"puc\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                          {visibleColumns.includes('tax') && (documentTypeFilter === 'all' || documentTypeFilter === 'tax') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"tax\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] cursor-pointer hover:bg-gray-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"tax\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              Tax\r\n                              {sort.kind === \"column\" && sort.column === \"tax\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                          {visibleColumns.includes('rc_expiry') && (documentTypeFilter === 'all' || documentTypeFilter === 'rc') && (\r\n                            <th \r\n                              onClick={() => handleColumnSort(\"rc\")}\r\n                              className=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px] bg-blue-50 cursor-pointer hover:bg-blue-100 transition-colors\"\r\n                              style={{\r\n                                textDecoration: \r\n                                  sort.kind === \"column\" && sort.column === \"rc\" \r\n                                    ? 'underline' \r\n                                    : 'none'\r\n                              }}\r\n                            >\r\n                              RC Expiry\r\n                              {sort.kind === \"column\" && sort.column === \"rc\" && (\r\n                                <span style={{ marginLeft: '4px', fontSize: '12px' }}>\r\n                                  {sort.dir === \"asc\" ? '↑' : '↓'}\r\n                                </span>\r\n                              )}\r\n                            </th>\r\n                          )}\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                        <AnimatePresence mode=\"popLayout\">\r\n                          {sortedDocumentMatrix.length > 0 ? (\r\n                            sortedDocumentMatrix.map((vehicle) => (\r\n                              <motion.tr \r\n                                key={vehicle.id} \r\n                                layout\r\n                                initial={{ opacity: 0.95 }}\r\n                                animate={{ opacity: 1 }}\r\n                                exit={{ opacity: 0 }}\r\n                                transition={{\r\n                                  layout: {\r\n                                    type: \"spring\",\r\n                                    stiffness: 400,\r\n                                    damping: 34\r\n                                  },\r\n                                  opacity: { duration: 0.18 }\r\n                                }}\r\n                                style={{\r\n                                  background: vehicle.__urg.score > 2 \r\n                                    ? 'linear-gradient(90deg, #fef2f2 0%, transparent 100%)'\r\n                                    : vehicle.__urg.meta.minDTX <= 30 && vehicle.__urg.meta.minDTX >= 0\r\n                                      ? 'linear-gradient(90deg, #fffbeb 0%, transparent 100%)'\r\n                                      : 'transparent'\r\n                                }}\r\n                                className=\"hover:bg-gray-50\"\r\n                              >\r\n                              {/* Enhanced Vehicle Number Cell with Refresh Button */}\r\n                              <td className=\"px-3 py-2 whitespace-nowrap sticky left-0 bg-white z-10 border-r border-gray-100\">\r\n                                <div className=\"flex items-center justify-between group\">\r\n                                  {/* Vehicle Info */}\r\n                                  <div className=\"flex-1\">\r\n                                    <div className=\"text-sm font-medium text-gray-900\">\r\n                                      {vehicle.registration}\r\n                                    </div>\r\n                                    {/* Show last updated info if available */}\r\n                                    {vehicles.find(v => v.id === vehicle.id)?.vahan_last_fetched_at && (\r\n                                      <div className=\"text-xs text-blue-600 mt-1\">\r\n                                        Updated: {format(parseISO(vehicles.find(v => v.id === vehicle.id)!.vahan_last_fetched_at!), 'MMM d, HH:mm')}\r\n                                      </div>\r\n                                    )}\r\n                                    \r\n                                    {/* Show refresh status */}\r\n                                    {refreshProgress[vehicle.id] && (\r\n                                      <div className={`text-xs mt-1 ${\r\n                                        refreshProgress[vehicle.id] === 'success' ? 'text-green-600' :\r\n                                        refreshProgress[vehicle.id] === 'error' ? 'text-red-600' :\r\n                                        refreshProgress[vehicle.id] === 'processing' ? 'text-blue-600' :\r\n                                        'text-gray-500'\r\n                                      }`}>\r\n                                        {refreshProgress[vehicle.id] === 'pending' && '⏳ Queued'}\r\n                                        {refreshProgress[vehicle.id] === 'processing' && '🔄 Updating...'}\r\n                                        {refreshProgress[vehicle.id] === 'success' && '✅ Updated'}\r\n                                        {refreshProgress[vehicle.id] === 'error' && '❌ Failed'}\r\n                                      </div>\r\n                                    )}\r\n                                  </div>\r\n\r\n                                  {/* Action Buttons */}\r\n                                  <div className=\"flex gap-1\">\r\n                                    {/* Individual Challan Check Button */}\r\n                                    <button\r\n                                      onClick={() => handleIndividualChallan(vehicles.find(v => v.id === vehicle.id)!)}\r\n                                      disabled={isBulkChallanLoading || challanLoading}\r\n                                      className=\"\r\n                                        p-1.5 rounded-md transition-all duration-200 opacity-0 group-hover:opacity-100\r\n                                        focus:opacity-100 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-1\r\n                                        hover:bg-yellow-50 text-gray-500 hover:text-yellow-600\r\n                                        disabled:cursor-not-allowed disabled:opacity-50\r\n                                      \"\r\n                                      title={`Check challans for ${vehicle.registration}`}\r\n                                    >\r\n                                      <AlertTriangle className=\"h-3 w-3\" />\r\n                                    </button>\r\n                                    \r\n                                    {/* Individual Refresh Button */}\r\n                                    <button\r\n                                      onClick={() => handleIndividualRefresh(vehicles.find(v => v.id === vehicle.id)!)}\r\n                                      disabled={isBulkRefreshing || refreshProgress[vehicle.id] === 'processing'}\r\n                                      className={`\r\n                                        p-1.5 rounded-md transition-all duration-200 opacity-0 group-hover:opacity-100\r\n                                        focus:opacity-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1\r\n                                        ${refreshProgress[vehicle.id] === 'processing' ? 'opacity-100' : ''}\r\n                                        ${refreshProgress[vehicle.id] === 'success' ? 'bg-green-50 text-green-600 opacity-100' :\r\n                                          refreshProgress[vehicle.id] === 'error' ? 'bg-red-50 text-red-600 opacity-100' :\r\n                                          'hover:bg-gray-100 text-gray-500 hover:text-blue-600'}\r\n                                        ${isBulkRefreshing || refreshProgress[vehicle.id] === 'processing' ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}\r\n                                      `}\r\n                                      title={`Refresh ${vehicle.registration} data`}\r\n                                    >\r\n                                      {refreshProgress[vehicle.id] === 'processing' ? (\r\n                                        <RefreshCw className=\"h-3 w-3 animate-spin\" />\r\n                                      ) : refreshProgress[vehicle.id] === 'success' ? (\r\n                                        <CheckCircle className=\"h-3 w-3\" />\r\n                                      ) : refreshProgress[vehicle.id] === 'error' ? (\r\n                                        <AlertCircle className=\"h-3 w-3\" />\r\n                                      ) : (\r\n                                        <RotateCcw className=\"h-3 w-3\" />\r\n                                      )}\r\n                                    </button>\r\n                                  </div>\r\n                                </div>\r\n                              </td>\r\n                              \r\n                              {visibleColumns.includes('insurance') && (documentTypeFilter === 'all' || documentTypeFilter === 'insurance') && (\r\n                                <td className=\"px-2 py-2 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"insurance\"\r\n                                    expiryDate={vehicle.documents.insurance.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.insurance_document_url ? [vehicles.find(v => v.id === vehicle.id)!.insurance_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </td>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('fitness') && (documentTypeFilter === 'all' || documentTypeFilter === 'fitness') && (\r\n                                <td className=\"px-2 py-2 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"fitness\"\r\n                                    expiryDate={vehicle.documents.fitness.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.fitness_document_url ? [vehicles.find(v => v.id === vehicle.id)!.fitness_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </td>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('permit') && (documentTypeFilter === 'all' || documentTypeFilter === 'permit') && (\r\n                                <td className=\"px-2 py-2 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"permit\"\r\n                                    expiryDate={vehicle.documents.permit.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.permit_document_url ? [vehicles.find(v => v.id === vehicle.id)!.permit_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </td>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('puc') && (documentTypeFilter === 'all' || documentTypeFilter === 'puc') && (\r\n                                <td className=\"px-2 py-2 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"puc\"\r\n                                    expiryDate={vehicle.documents.puc.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.puc_document_url ? [vehicles.find(v => v.id === vehicle.id)!.puc_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </td>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('tax') && (documentTypeFilter === 'all' || documentTypeFilter === 'tax') && (\r\n                                <td className=\"px-2 py-2 text-center\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"tax\"\r\n                                    expiryDate={vehicle.documents.tax.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.tax_document_url ? [vehicles.find(v => v.id === vehicle.id)!.tax_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                </td>\r\n                              )}\r\n                              \r\n                              {visibleColumns.includes('rc_expiry') && (documentTypeFilter === 'all' || documentTypeFilter === 'rc') && (\r\n                                <td className=\"px-2 py-2 text-center bg-blue-50\">\r\n                                  <DocumentCell\r\n                                    vehicleId={vehicle.id}\r\n                                    vehicleNumber={vehicle.registration}\r\n                                    docKind=\"rc\"\r\n                                    expiryDate={vehicle.documents.rc.date}\r\n                                    docPaths={vehicles.find(v => v.id === vehicle.id)?.rc_document_url ? [vehicles.find(v => v.id === vehicle.id)!.rc_document_url!] : null}\r\n                                    preferredFormat=\"short\"\r\n                                  />\r\n                                  {vehicle.registrationDate && (\r\n                                    <div className=\"text-xs text-gray-400 mt-1\">\r\n                                      (15y)\r\n                                    </div>\r\n                                  )}\r\n                                </td>\r\n                              )}\r\n                              </motion.tr>\r\n                            ))\r\n                          ) : (\r\n                            <motion.tr\r\n                              initial={{ opacity: 0 }}\r\n                              animate={{ opacity: 1 }}\r\n                              exit={{ opacity: 0 }}\r\n                            >\r\n                              <td colSpan={7} className=\"px-3 py-8 text-center text-sm text-gray-500\">\r\n                                {searchTerm ? 'No vehicles found matching your search criteria' : 'No vehicle documents found'}\r\n                              </td>\r\n                            </motion.tr>\r\n                          )}\r\n                        </AnimatePresence>\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Expenditure Over Time Chart - Collapsible */}\r\n              <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\r\n                <div className=\"flex justify-between items-center p-4 border-b border-gray-200\">\r\n                  <h3 className=\"font-semibold text-gray-900 text-lg\">Documentation Expenditure Over Time</h3>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"flex items-center space-x-2 no-print\">\r\n                      <button \r\n                        onClick={() => setChartView('monthly')}\r\n                        className={`px-3 py-1 text-xs rounded-md ${\r\n                          chartView === 'monthly' \r\n                            ? 'bg-primary-100 text-primary-700 font-medium' \r\n                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                        }`}\r\n                      >\r\n                        Monthly\r\n                      </button>\r\n                      <button \r\n                        onClick={() => setChartView('yearly')}\r\n                        className={`px-3 py-1 text-xs rounded-md ${\r\n                          chartView === 'yearly' \r\n                            ? 'bg-primary-100 text-primary-700 font-medium' \r\n                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                        }`}\r\n                      >\r\n                        Yearly\r\n                      </button>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => toggleSection('charts')}\r\n                      className=\"p-1 rounded hover:bg-gray-100 transition-colors\"\r\n                      title={expandedSections.charts ? 'Hide charts' : 'Show charts'}\r\n                    >\r\n                      {expandedSections.charts ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                {expandedSections.charts && (\r\n                  <div className=\"p-6\">\r\n                \r\n                <div className=\"h-80\">\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart\r\n                      data={monthlyExpenditure}\r\n                      margin={{ top: 20, right: 30, left: 50, bottom: 40 }}\r\n                    >\r\n                      <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n                      <XAxis \r\n                        dataKey=\"month\" \r\n                        tick={{ fontSize: 11 }}\r\n                        tickLine={false}\r\n                        angle={-45}\r\n                        textAnchor=\"end\"\r\n                        height={60}\r\n                      />\r\n                      <YAxis \r\n                        tickFormatter={(value) => {\r\n                          if (value === 0) return '₹0';\r\n                          if (value >= 100000) return `₹${(value/100000).toFixed(1)}L`;\r\n                          if (value >= 1000) return `₹${(value/1000).toFixed(0)}k`;\r\n                          return `₹${value}`;\r\n                        }} \r\n                        tick={{ fontSize: 11 }}\r\n                        axisLine={false}\r\n                        tickLine={false}\r\n                      />\r\n                      <Tooltip \r\n                        formatter={(value: any, name: string) => {\r\n                          const formattedValue = Number(value).toLocaleString('en-IN', { \r\n                            style: 'currency', \r\n                            currency: 'INR',\r\n                            maximumFractionDigits: 0 \r\n                          });\r\n                          return [formattedValue, name];\r\n                        }}\r\n                        labelFormatter={(label) => `Month: ${label}`}\r\n                        contentStyle={{ \r\n                          backgroundColor: 'white', \r\n                          borderRadius: '0.5rem',\r\n                          border: '1px solid #e5e7eb',\r\n                          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\r\n                        }}\r\n                      />\r\n                      <Legend \r\n                        wrapperStyle={{ paddingTop: '20px' }}\r\n                        iconType=\"rect\"\r\n                      />\r\n                      <Bar dataKey=\"rc\" stackId=\"a\" fill={DOC_TYPE_COLORS.rc} name=\"RC\" />\r\n                      <Bar dataKey=\"insurance\" stackId=\"a\" fill={DOC_TYPE_COLORS.insurance} name=\"Insurance\" />\r\n                      <Bar dataKey=\"fitness\" stackId=\"a\" fill={DOC_TYPE_COLORS.fitness} name=\"Fitness\" />\r\n                      <Bar dataKey=\"permit\" stackId=\"a\" fill={DOC_TYPE_COLORS.permit} name=\"Permit\" />\r\n                      <Bar dataKey=\"puc\" stackId=\"a\" fill={DOC_TYPE_COLORS.puc} name=\"PUC\" />\r\n                      <Bar dataKey=\"tax\" stackId=\"a\" fill={DOC_TYPE_COLORS.tax} name=\"Tax\" />\r\n                      <Bar dataKey=\"other\" stackId=\"a\" fill={DOC_TYPE_COLORS.other} name=\"Other\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n                \r\n                {/* Summary Stats for the Chart */}\r\n                <div className=\"mt-4 grid grid-cols-3 gap-4 text-center\">\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Total (12 months)</p>\r\n                    <p className=\"text-sm font-semibold text-gray-900\">\r\n                      ₹{monthlyExpenditure.reduce((sum, month) => \r\n                        sum + month.rc + month.insurance + month.fitness + month.permit + month.puc + month.tax + month.other, 0\r\n                      ).toLocaleString('en-IN', { maximumFractionDigits: 0 })}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Average/Month</p>\r\n                    <p className=\"text-sm font-semibold text-gray-900\">\r\n                      ₹{(monthlyExpenditure.reduce((sum, month) => \r\n                        sum + month.rc + month.insurance + month.fitness + month.permit + month.puc + month.tax + month.other, 0\r\n                      ) / 12).toLocaleString('en-IN', { maximumFractionDigits: 0 })}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Peak Month</p>\r\n                    <p className=\"text-sm font-semibold text-gray-900\">\r\n                      {(() => {\r\n                        const maxMonth = monthlyExpenditure.reduce((max, month) => {\r\n                          const monthTotal = month.rc + month.insurance + month.fitness + month.permit + month.puc + month.tax + month.other;\r\n                          const maxTotal = max.rc + max.insurance + max.fitness + max.permit + max.puc + max.tax + max.other;\r\n                          return monthTotal > maxTotal ? month : max;\r\n                        });\r\n                        return maxMonth.month;\r\n                      })()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Expenditure by Vehicle Chart */}\r\n              <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <h3 className=\"font-semibold text-gray-900 text-lg\">Documentation Cost by Vehicle</h3>\r\n                </div>\r\n                \r\n                <div className=\"h-80\">\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart\r\n                      data={vehicleExpenditure}\r\n                      layout=\"vertical\"\r\n                      margin={{ top: 5, right: 30, left: 70, bottom: 5 }}\r\n                    >\r\n                      <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false}/>\r\n                      <XAxis\r\n                        type=\"number\" \r\n                        axisLine={false}\r\n                        tickLine={false}\r\n                        tickFormatter={(value) => `₹${(value/1000).toFixed(0)}k`}\r\n                        tick={{ fontSize: 10 }}\r\n                      />\r\n                      <YAxis\r\n                        type=\"category\" \r\n                        dataKey=\"vehicle\" \r\n                        axisLine={false}\r\n                        tickLine={false}\r\n                        width={60}\r\n                        tick={{ fontSize: 10 }}\r\n                      />\r\n                      <Tooltip formatter={(value: any) => [`₹${value.toLocaleString('en-IN')}`, 'Total Expense']} />\r\n                      <Bar dataKey=\"amount\" name=\"Amount\">\r\n                        {vehicleExpenditure.map((entry, index) => (\r\n                          <Cell key={`cell-${index}`} fill={`hsl(${index * 40}, 70%, 50%)`} />\r\n                        ))}\r\n                      </Bar>\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Legend for document status */}\r\n              <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-4 border-l-2 border-blue-500 pl-2\">\r\n                <h3 className=\"font-medium text-gray-700 mb-3\">Document Status Legend</h3>\r\n                <div className=\"flex flex-wrap gap-4\">\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"w-4 h-4 rounded bg-success-100 border border-success-200 mr-2\"></div>\r\n                    <span className=\"text-sm text-gray-600\">Valid</span>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"w-4 h-4 rounded bg-warning-100 border border-warning-200 mr-2\"></div>\r\n                    <span className=\"text-sm text-gray-600\">Expiring Soon (within 30 days)</span>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"w-4 h-4 rounded bg-error-100 border border-error-200 mr-2\"></div>\r\n                    <span className=\"text-sm text-gray-600\">Expired</span>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"w-4 h-4 rounded bg-gray-100 border border-gray-200 mr-2\"></div>\r\n                    <span className=\"text-sm text-gray-600\">Missing/Not Available</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Challan Info Modal */}\r\n      <ChallanInfoModal\r\n        isOpen={showChallanModal}\r\n        onClose={() => setShowChallanModal(false)}\r\n        challanData={currentChallanData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentSummaryPanel;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\DocumentViewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'document'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [document, onClose]","fix":{"range":[1055,1064],"text":"[document, onClose]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { X, Download, Share2, ZoomIn, ZoomOut, RotateCw, Maximize2 } from 'lucide-react';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface DocumentViewerProps {\r\n  document: {\r\n    type: string;\r\n    url: string;\r\n  };\r\n  onClose: () => void;\r\n}\r\n\r\nconst DocumentViewer: React.FC<DocumentViewerProps> = ({ document, onClose }) => {\r\n  const [zoom, setZoom] = useState(1);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const isImage = document.url.match(/\\.(jpg|jpeg|png|gif|webp)$/i);\r\n  const isPDF = document.url.match(/\\.pdf$/i);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [onClose]);\r\n\r\n  const handleZoomIn = () => {\r\n    setZoom(prev => Math.min(prev + 0.25, 3));\r\n  };\r\n\r\n  const handleZoomOut = () => {\r\n    setZoom(prev => Math.max(prev - 0.25, 0.5));\r\n  };\r\n\r\n  const handleRotate = () => {\r\n    setRotation(prev => (prev + 90) % 360);\r\n  };\r\n\r\n  const handleFullscreen = () => {\r\n    if (!document.fullscreenElement) {\r\n      document.documentElement.requestFullscreen();\r\n      setIsFullscreen(true);\r\n    } else {\r\n      document.exitFullscreen();\r\n      setIsFullscreen(false);\r\n    }\r\n  };\r\n\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch(document.url);\r\n      const blob = await response.blob();\r\n      const downloadUrl = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.download = `${document.type}_document`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(downloadUrl);\r\n      toast.success('Document downloaded successfully');\r\n    } catch (error) {\r\n      console.error('Download failed:', error);\r\n      toast.error('Failed to download document');\r\n    }\r\n  };\r\n\r\n  const handleShare = async () => {\r\n    if (navigator.share) {\r\n      try {\r\n        await navigator.share({\r\n          title: `${document.type} Document`,\r\n          text: `View this ${document.type} document`,\r\n          url: document.url\r\n        });\r\n      } catch (error) {\r\n        console.log('Share failed:', error);\r\n      }\r\n    } else {\r\n      // Fallback: Copy to clipboard\r\n      navigator.clipboard.writeText(document.url);\r\n      toast.success('Link copied to clipboard');\r\n    }\r\n  };\r\n\r\n  const handleImageLoad = () => {\r\n    setIsLoading(false);\r\n    setError(null);\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    setIsLoading(false);\r\n    setError('Failed to load document');\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 bg-black bg-opacity-75 flex items-center justify-center p-4\">\r\n      <div className=\"relative w-full h-full max-w-6xl max-h-full bg-white rounded-lg overflow-hidden\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 bg-white\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">\r\n            {document.type} Document\r\n          </h3>\r\n          <div className=\"flex items-center gap-2\">\r\n            {/* Zoom Controls */}\r\n            <div className=\"flex items-center gap-1\">\r\n              <button\r\n                onClick={handleZoomOut}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n                disabled={zoom <= 0.5}\r\n              >\r\n                <ZoomOut className=\"h-4 w-4\" />\r\n              </button>\r\n              <span className=\"text-sm text-gray-600 min-w-[3rem] text-center\">\r\n                {Math.round(zoom * 100)}%\r\n              </span>\r\n              <button\r\n                onClick={handleZoomIn}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n                disabled={zoom >= 3}\r\n              >\r\n                <ZoomIn className=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Rotate Button (for images) */}\r\n            {isImage && (\r\n              <button\r\n                onClick={handleRotate}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n              >\r\n                <RotateCw className=\"h-4 w-4\" />\r\n              </button>\r\n            )}\r\n\r\n            {/* Fullscreen Button */}\r\n            <button\r\n              onClick={handleFullscreen}\r\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n            >\r\n              <Maximize2 className=\"h-4 w-4\" />\r\n            </button>\r\n\r\n            {/* Download Button */}\r\n            <button\r\n              onClick={handleDownload}\r\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n            >\r\n              <Download className=\"h-4 w-4\" />\r\n            </button>\r\n\r\n            {/* Share Button */}\r\n            <button\r\n              onClick={handleShare}\r\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n            >\r\n              <Share2 className=\"h-4 w-4\" />\r\n            </button>\r\n\r\n            {/* Close Button */}\r\n            <button\r\n              onClick={onClose}\r\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n            >\r\n              <X className=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Document Content */}\r\n        <div className=\"flex-1 overflow-auto bg-gray-100\">\r\n          {isLoading && (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center\">\r\n                <p className=\"text-red-600 mb-4\">{error}</p>\r\n                <button\r\n                  onClick={() => window.open(document.url, '_blank')}\r\n                  className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors\"\r\n                >\r\n                  Open in New Tab\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isImage && (\r\n            <div className=\"flex items-center justify-center p-4 min-h-full\">\r\n              <img\r\n                src={document.url}\r\n                alt={`${document.type} document`}\r\n                className=\"max-w-full max-h-full object-contain transition-transform duration-200\"\r\n                style={{\r\n                  transform: `scale(${zoom}) rotate(${rotation}deg)`,\r\n                }}\r\n                onLoad={handleImageLoad}\r\n                onError={handleImageError}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {isPDF && (\r\n            <div className=\"h-full\">\r\n              <iframe\r\n                src={document.url}\r\n                className=\"w-full h-full border-0\"\r\n                onLoad={handleImageLoad}\r\n                onError={handleImageError}\r\n                title={`${document.type} document`}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {!isImage && !isPDF && (\r\n            <div className=\"flex items-center justify-center h-full\">\r\n              <div className=\"text-center\">\r\n                <p className=\"text-gray-600 mb-4\">Unsupported document type</p>\r\n                <button\r\n                  onClick={() => window.open(document.url, '_blank')}\r\n                  className=\"px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors\"\r\n                >\r\n                  Open in New Tab\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Mobile Touch Instructions */}\r\n        <div className=\"md:hidden p-4 bg-gray-50 border-t border-gray-200\">\r\n          <p className=\"text-xs text-gray-500 text-center\">\r\n            Pinch to zoom • Double tap to reset zoom • Swipe to close\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentViewer;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\DocumentViewerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\TopDriversModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleDetailsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleDetailsTabMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleMaintenanceTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehiclePhotoUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleSummaryChips.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleTripsTab.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVehicleTrips'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadVehicleTrips, vehicleId]","fix":{"range":[1428,1439],"text":"[loadVehicleTrips, vehicleId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { \r\n  MapPin, Calendar, User, Fuel, TrendingUp, \r\n  Package, Clock, DollarSign, AlertCircle \r\n} from 'lucide-react';\r\nimport { getTrips } from '../../utils/storage';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport { getMileageBadge, vehicleColors } from '../../utils/vehicleColors';\r\nimport { getVehicleTrips } from '../../utils/api/vehicles';\r\nimport { supabase } from '../../utils/supabaseClient';\r\n\r\ninterface VehicleTripsTabProps {\r\n  vehicleId: string;\r\n}\r\n\r\ninterface Trip {\r\n  id: string;\r\n  trip_number?: string;\r\n  trip_date: string;\r\n  start_location?: string;\r\n  end_location?: string;\r\n  driver_name?: string;\r\n  mileage?: number;\r\n  distance?: number;\r\n  cargo_weight?: number;\r\n  revenue?: number;\r\n  fuel_quantity?: number;\r\n  fuel_cost?: number;\r\n  profit?: number;\r\n}\r\n\r\nconst VehicleTripsTab: React.FC<VehicleTripsTabProps> = ({ vehicleId }) => {\r\n  const navigate = useNavigate();\r\n  const [trips, setTrips] = useState<Trip[]>([]);\r\n  const [stats, setStats] = useState({\r\n    totalTrips: 0,\r\n    avgMileage: 0,\r\n    totalDistance: 0,\r\n    bestDriver: '',\r\n    totalFuel: 0,\r\n    totalRevenue: 0,\r\n    totalProfit: 0\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadVehicleTrips();\r\n  }, [vehicleId]);\r\n\r\n  const loadVehicleTrips = async () => {\r\n    console.log('🔍 Loading trips for vehicle:', vehicleId);\r\n    \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Check if vehicle exists first\r\n      const { data: vehicleCheck } = await supabase\r\n        .from('vehicles')\r\n        .select('id, registration_number')\r\n        .eq('id', vehicleId)\r\n        .single();\r\n      \r\n      console.log('Vehicle found:', vehicleCheck);\r\n      \r\n      if (!vehicleCheck) {\r\n        console.warn('⚠️ Vehicle not found:', vehicleId);\r\n        setError('Vehicle not found');\r\n        return;\r\n      }\r\n      \r\n      // Get raw trips data first for debugging\r\n      const { data: rawTrips, error: rawError } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .eq('vehicle_id', vehicleId)\r\n        .limit(10);\r\n      \r\n      console.log('Raw trips data:', rawTrips);\r\n      console.log('Raw trips error:', rawError);\r\n      \r\n      if (rawError) {\r\n        console.error('❌ Error fetching raw trips:', rawError);\r\n        setError(`Database error: ${rawError.message}`);\r\n        return;\r\n      }\r\n      \r\n      if (!rawTrips || rawTrips.length === 0) {\r\n        console.log('📭 No trips found for vehicle:', vehicleId);\r\n        setTrips([]);\r\n        setStats({\r\n          totalTrips: 0,\r\n          avgMileage: 0,\r\n          totalDistance: 0,\r\n          bestDriver: 'No trips recorded',\r\n          totalFuel: 0\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Now get processed data with relations\r\n      const processedData = await getVehicleTrips(vehicleId, 10);\r\n      console.log('Processed trips data:', processedData);\r\n      \r\n      setTrips(processedData.trips);\r\n      setStats(processedData.stats);\r\n      \r\n    } catch (err) {\r\n      console.error('❌ Error loading trips:', err);\r\n      setError('Failed to load trip data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatTime = (timeString?: string) => {\r\n    if (!timeString) return '';\r\n    try {\r\n      return new Date(timeString).toLocaleTimeString('en-US', { \r\n        hour: '2-digit', \r\n        minute: '2-digit',\r\n        hour12: true \r\n      });\r\n    } catch {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center py-8\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\r\n        <span className=\"ml-2\">Loading trips...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-center py-8\">\r\n        <div className=\"text-red-600 mb-4\">\r\n          <AlertCircle className=\"h-12 w-12 mx-auto mb-2\" />\r\n          <p className=\"font-medium\">{error}</p>\r\n        </div>\r\n        <button \r\n          onClick={loadVehicleTrips}\r\n          className=\"px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600\"\r\n        >\r\n          Retry\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n              {/* Summary Stats Bar */}\r\n              <div className=\"bg-gradient-to-r from-primary-50 to-primary-100 rounded-lg p-4\">\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-xs text-primary-600 font-medium\">Total Trips</p>\r\n                    <p className=\"text-2xl font-bold text-primary-900\">{stats.totalTrips}</p>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-xs text-primary-600 font-medium\">Total Distance</p>\r\n                    <p className=\"text-2xl font-bold text-primary-900\">{stats.totalDistance} km</p>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-xs text-primary-600 font-medium\">Avg Mileage</p>\r\n                    <p className=\"text-2xl font-bold text-primary-900\">{stats.avgMileage} KMPL</p>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-xs text-primary-600 font-medium\">Total Revenue</p>\r\n                    <p className=\"text-2xl font-bold text-primary-900\">₹{stats.totalRevenue?.toLocaleString()}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3 pt-3 border-t border-primary-200\">\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-primary-600 font-medium\">Fuel Used</p>\r\n                      <p className=\"text-lg font-bold text-primary-900\">{stats.totalFuel}L</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-primary-600 font-medium\">Total Profit</p>\r\n                      <p className=\"text-lg font-bold text-primary-900\">₹{stats.totalProfit?.toLocaleString()}</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-primary-600 font-medium\">Best Driver</p>\r\n                      <p className=\"text-lg font-bold text-primary-900 truncate\">{stats.bestDriver}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n      {/* Trip Cards */}\r\n      <div className=\"space-y-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900\">Latest Trips</h3>\r\n        \r\n        {trips.map((trip, index) => (\r\n          <div \r\n            key={trip.id}\r\n            className=\"bg-white rounded-lg border border-gray-200 hover:shadow-md transition-all duration-200 overflow-hidden\"\r\n          >\r\n            {/* Trip Header with Color Strip */}\r\n            <div className={`h-1 bg-gradient-to-r ${\r\n              index === 0 ? 'from-green-400 to-green-500' :\r\n              index === 1 ? 'from-blue-400 to-blue-500' :\r\n              index === 2 ? 'from-purple-400 to-purple-500' :\r\n              'from-gray-400 to-gray-500'\r\n            }`} />\r\n            \r\n            <div className=\"p-4\">\r\n              <div className=\"flex justify-between items-start mb-3\">\r\n                {/* Trip Number & Date */}\r\n                <div>\r\n                  <h4 className=\"font-semibold text-gray-900 text-lg\">\r\n                    {trip.trip_number || `Trip #${trips.length - index}`}\r\n                  </h4>\r\n                  <div className=\"flex items-center gap-2 mt-1 text-sm text-gray-600\">\r\n                    <Calendar className=\"h-4 w-4\" />\r\n                    <span>{formatDate(trip.trip_date)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Mileage Badge */}\r\n                <div className={`px-3 py-1.5 rounded-full border ${getMileageBadge(trip.mileage || 0, stats.avgMileage)}`}>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Fuel className=\"h-4 w-4\" />\r\n                    <span className=\"font-semibold\">{trip.mileage || 0} KMPL</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Route Information */}\r\n              <div className=\"bg-gray-50 rounded-lg p-3 mb-3\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5\" />\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm font-medium text-gray-900\">\r\n                      {trip.start_location || 'Loading Point'} → {trip.end_location || 'Destination'}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Trip Metrics */}\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <User className=\"h-4 w-4 text-blue-500\" />\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Driver</p>\r\n                    <p className=\"text-sm font-medium text-gray-900\">{trip.driver_name || 'Not assigned'}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Distance</p>\r\n                    <p className=\"text-sm font-medium text-gray-900\">{trip.distance || 0} km</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Package className=\"h-4 w-4 text-orange-500\" />\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Load</p>\r\n                    <p className=\"text-sm font-medium text-gray-900\">{trip.cargo_weight || 0} kg</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  <DollarSign className=\"h-4 w-4 text-purple-500\" />\r\n                  <div>\r\n                    <p className=\"text-xs text-gray-500\">Revenue</p>\r\n                    <p className=\"text-sm font-medium text-gray-900\">₹{(trip.revenue || 0).toLocaleString()}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Performance Indicators */}\r\n              {trip.mileage && trip.mileage > 0 && (\r\n                <div className=\"mt-3 pt-3 border-t\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {trip.mileage > stats.avgMileage ? (\r\n                        <>\r\n                          <div className=\"h-2 w-2 rounded-full bg-green-500 animate-pulse\" />\r\n                          <span className=\"text-xs text-green-600 font-medium\">\r\n                            Above average efficiency (+{((trip.mileage - stats.avgMileage) / stats.avgMileage * 100).toFixed(0)}%)\r\n                          </span>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\r\n                          <span className=\"text-xs text-yellow-600 font-medium\">\r\n                            Below average efficiency\r\n                          </span>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n\r\n                    <button\r\n                      onClick={() => navigate(`/trips/${trip.id}`)}\r\n                      className=\"text-primary-600 hover:text-primary-700 text-sm font-medium\"\r\n                    >\r\n                      View Details →\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {trips.length === 0 && (\r\n          <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n            <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\r\n            <p className=\"text-gray-500\">No trips recorded yet</p>\r\n            <p className=\"text-sm text-gray-400 mt-1\">Trips will appear here once recorded</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VehicleTripsTab;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\VehicleWhatsAppShareModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\components\\vehicles\\WhatsAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\constants\\fleetParts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\contexts\\OrganizationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":124,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":124,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { supabase } from '@/utils/supabaseClient';\r\nimport { getCurrentUserId } from '@/utils/supaHelpers';\r\n\r\ninterface OrganizationContextType {\r\n  currentOrganizationId: string | null;\r\n  setCurrentOrganization: (orgId: string) => Promise<void>;\r\n  organizations: Array<{ id: string; name: string; role: string }>;\r\n  loading: boolean;\r\n}\r\n\r\nconst OrganizationContext = createContext<OrganizationContextType | undefined>(undefined);\r\n\r\nexport function OrganizationProvider({ children }: { children: React.ReactNode }) {\r\n  const [currentOrganizationId, setCurrentOrganizationId] = useState<string | null>(null);\r\n  const [organizations, setOrganizations] = useState<Array<{ id: string; name: string; role: string }>>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadUserOrganizations();\r\n  }, []);\r\n\r\n  const loadUserOrganizations = async () => {\r\n    try {\r\n      const userId = await getCurrentUserId();\r\n      if (!userId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Get user's organizations from organization_users table\r\n      const { data: orgs, error } = await supabase\r\n        .from('organization_users')\r\n        .select('organization_id, role, organizations(id, name)')\r\n        .eq('user_id', userId);\r\n\r\n      if (error) {\r\n        console.error('Error fetching organizations:', error);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      let formattedOrgs = orgs?.map(org => ({\r\n        id: org.organization_id,\r\n        name: org.organizations?.name || 'Unknown Organization',\r\n        role: org.role\r\n      })) || [];\r\n\r\n      // ✅ FALLBACK: If no organizations found in organization_users, check if user owns any organizations directly\r\n      if (formattedOrgs.length === 0) {\r\n        const { data: ownedOrgs, error: ownedError } = await supabase\r\n          .from('organizations')\r\n          .select('id, name')\r\n          .eq('owner_id', userId);\r\n\r\n        if (!ownedError && ownedOrgs && ownedOrgs.length > 0) {\r\n          formattedOrgs = ownedOrgs.map(org => ({\r\n            id: org.id,\r\n            name: org.name,\r\n            role: 'owner'\r\n          }));\r\n\r\n          // ✅ AUTO-CREATE organization_users record for the owned organization\r\n          const orgToCreate = ownedOrgs[0]; // Use the first owned organization\r\n          const { error: createError } = await supabase\r\n            .from('organization_users')\r\n            .insert([{\r\n              user_id: userId,\r\n              organization_id: orgToCreate.id,\r\n              role: 'owner'\r\n            }]);\r\n\r\n          if (createError) {\r\n            console.error('Error auto-creating organization_users record:', createError);\r\n          }\r\n        }\r\n      }\r\n\r\n      setOrganizations(formattedOrgs);\r\n      \r\n      // Get active organization\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('active_organization_id')\r\n        .eq('id', userId)\r\n        .single();\r\n      \r\n      setCurrentOrganizationId(profile?.active_organization_id || formattedOrgs[0]?.id || null);\r\n    } catch (error) {\r\n      console.error('Error loading user organizations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const setCurrentOrganization = async (orgId: string) => {\r\n    try {\r\n      const userId = await getCurrentUserId();\r\n      if (!userId) return;\r\n\r\n      await supabase\r\n        .from('profiles')\r\n        .update({ active_organization_id: orgId })\r\n        .eq('id', userId);\r\n      \r\n      setCurrentOrganizationId(orgId);\r\n    } catch (error) {\r\n      console.error('Error setting current organization:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <OrganizationContext.Provider value={{\r\n      currentOrganizationId,\r\n      setCurrentOrganization,\r\n      organizations,\r\n      loading\r\n    }}>\r\n      {children}\r\n    </OrganizationContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useOrganization = () => {\r\n  const context = useContext(OrganizationContext);\r\n  if (!context) {\r\n    throw new Error('useOrganization must be used within OrganizationProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useChallanInfo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useHeroFeed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useInfiniteScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\useMobileOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\hooks\\usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\i18n\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\lib\\destinationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\lib\\testDestinationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\AIAlertsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\ActivityLogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\DashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\DocumentRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\DriverPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\DriversPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\EnhancedMaintenanceDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\EnhancedSelectionDemoPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\LoginPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'welcomeMessages.length'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [welcomeMessages.length]","fix":{"range":[1980,1982],"text":"[welcomeMessages.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport LoginForm from '../components/auth/LoginForm';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTheme } from '../utils/themeContext';\r\nimport ThemeToggle from '../components/ui/ThemeToggle';\r\nimport { Eye, EyeOff, Truck, Lock } from 'lucide-react';\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const { theme } = useTheme();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  \r\n  const welcomeMessages = [\r\n    { text: \"Welcome back!\", color: \"from-emerald-600 to-teal-600\", font: \"'Great Vibes', 'Satisfy', 'Dancing Script', cursive\", scale: 1.2544 },\r\n    { text: \"वापसी पर स्वागत है!\", color: \"from-orange-500 to-pink-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"மீண்டும் வரவேற்கிறோம்!\", color: \"from-purple-600 to-blue-600\", font: \"'Pacifico', cursive\", scale: 0.85 },\r\n    { text: \"फेर से स्वागत बा!\", color: \"from-rose-600 to-orange-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"পুনরায় স্বাগতম!\", color: \"from-blue-600 to-indigo-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"తిరిగి స్వాగతం!\", color: \"from-violet-600 to-purple-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"पुन्हा स्वागत आहे!\", color: \"from-amber-600 to-orange-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"ફરી સ્વાગત છે!\", color: \"from-teal-600 to-cyan-600\", font: \"'Pacifico', cursive\", scale: 1 },\r\n    { text: \"خوش آمدید دوبارہ!\", color: \"from-cyan-600 to-emerald-600\", font: \"'Pacifico', cursive\", scale: 1 }\r\n  ];\r\n  \r\n  const [currentMessage, setCurrentMessage] = useState(0);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setIsAnimating(true);\r\n      setTimeout(() => {\r\n        setCurrentMessage((prev) => (prev + 1) % welcomeMessages.length);\r\n        setIsAnimating(false);\r\n      }, 400);\r\n    }, 3500);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* Aurora Background - Simple and Direct */}\r\n      <div className=\"aurora-background\" />\r\n      \r\n      {/* Main Content with Higher Z-Index */}\r\n      <div className=\"min-h-screen flex items-center justify-center p-4 relative z-10\">\r\n        <style>{`\r\n          @import url('https://fonts.googleapis.com/css2?family=Great+Vibes&family=Satisfy&family=Dancing+Script:wght@600;700&family=Pacifico&display=swap');\r\n          \r\n          .welcome-text {\r\n            background: linear-gradient(135deg, var(--tw-gradient-stops));\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            line-height: 1.2;\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n          }\r\n          \r\n          .fade-slide-up {\r\n            animation: fadeSlideUp 0.6s cubic-bezier(0.22, 1, 0.36, 1);\r\n          }\r\n          \r\n          .fade-slide-down {\r\n            animation: fadeSlideDown 0.4s cubic-bezier(0.22, 1, 0.36, 1);\r\n          }\r\n          \r\n          @keyframes fadeSlideUp {\r\n            0% {\r\n              opacity: 0;\r\n              transform: translateY(15px) scale(0.96) rotate(-1deg);\r\n            }\r\n            100% {\r\n              opacity: 1;\r\n              transform: translateY(0) scale(1) rotate(0deg);\r\n            }\r\n          }\r\n          \r\n          @keyframes fadeSlideDown {\r\n            0% {\r\n              opacity: 1;\r\n              transform: translateY(0) scale(1) rotate(0deg);\r\n            }\r\n            100% {\r\n              opacity: 0;\r\n              transform: translateY(-15px) scale(0.96) rotate(1deg);\r\n            }\r\n          }\r\n          \r\n          .sparkle {\r\n            animation: sparkle 0.6s ease-out;\r\n          }\r\n          \r\n          @keyframes sparkle {\r\n            0%, 100% { opacity: 0; transform: scale(0); }\r\n            50% { opacity: 1; transform: scale(1); }\r\n          }\r\n        .brand-logo-frame {\r\n          width: 5.4rem;\r\n          height: 5.4rem;\r\n          padding: 0.55rem;\r\n          border-radius: 1.5rem;\r\n          position: relative;\r\n          background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(236, 253, 245, 0.94));\r\n          box-shadow: 0 18px 38px -18px rgba(16, 185, 129, 0.52), 0 0 0 3px rgba(134, 239, 172, 0.45);\r\n          border: 1px solid rgba(209, 250, 229, 0.82);\r\n          display: inline-flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          overflow: hidden;\r\n          transition: transform 0.4s ease, box-shadow 0.4s ease;\r\n        }\r\n\r\n        .brand-logo-frame::before {\r\n          content: '';\r\n          position: absolute;\r\n          inset: -12%;\r\n          border-radius: inherit;\r\n          background: radial-gradient(circle, rgba(167, 243, 208, 0.45) 0%, rgba(16, 185, 129, 0.22) 55%, transparent 78%);\r\n          z-index: 0;\r\n          filter: blur(12px);\r\n          opacity: 0.85;\r\n          transition: opacity 0.4s ease, transform 0.4s ease;\r\n        }\r\n\r\n        .brand-logo-frame:hover {\r\n          transform: translateY(-2px) scale(1.02);\r\n          box-shadow: 0 22px 46px -18px rgba(16, 185, 129, 0.65), 0 0 0 4px rgba(74, 222, 128, 0.35);\r\n        }\r\n\r\n        .brand-logo-frame:hover::before {\r\n          opacity: 1;\r\n          transform: scale(1.04);\r\n        }\r\n\r\n        .brand-logo-surface {\r\n          position: relative;\r\n          z-index: 1;\r\n          width: 100%;\r\n          height: 100%;\r\n          border-radius: 1.35rem;\r\n          background: linear-gradient(135deg, #ffffff 15%, #f0fdf4 100%);\r\n          padding: 0.05rem;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          box-shadow: inset 0 4px 14px rgba(16, 185, 129, 0.08), inset 0 -2px 6px rgba(45, 212, 191, 0.08);\r\n          transition: box-shadow 0.4s ease;\r\n        }\r\n\r\n        .brand-logo-frame:hover .brand-logo-surface {\r\n          box-shadow: inset 0 6px 18px rgba(16, 185, 129, 0.12), inset 0 -3px 8px rgba(45, 212, 191, 0.12);\r\n        }\r\n\r\n        .brand-logo {\r\n          width: 100%;\r\n          height: 100%;\r\n          object-fit: contain;\r\n          transition: transform 0.3s ease;\r\n        }\r\n\r\n        .brand-logo-frame:hover .brand-logo {\r\n          transform: scale(1.01);\r\n        }\r\n\r\n        @media (max-width: 640px) {\r\n          .brand-logo-frame {\r\n            width: 4.8rem;\r\n            height: 4.8rem;\r\n            padding: 0.48rem;\r\n          }\r\n\r\n          .brand-logo-surface {\r\n            border-radius: 1.1rem;\r\n            padding: 0.22rem;\r\n          }\r\n\r\n          .brand-logo {\r\n            width: 88%;\r\n            height: 88%;\r\n          }\r\n\r\n          .welcome-text {\r\n            font-size: clamp(1.4rem, 7vw, 1.75rem);\r\n          }\r\n        }\r\n\r\n        @media (max-width: 420px) {\r\n          .brand-logo-frame {\r\n            width: 4.2rem;\r\n            height: 4.2rem;\r\n            padding: 0.38rem;\r\n          }\r\n\r\n          .brand-logo-surface {\r\n            border-radius: 0.95rem;\r\n            padding: 0.05rem;\r\n          }\r\n\r\n          .brand-logo {\r\n            width: 90%;\r\n            height: 90%;\r\n          }\r\n        }\r\n\r\n\r\n\r\n        `}</style>\r\n        \r\n        {/* Theme Toggle */}\r\n        <div className=\"absolute top-4 right-4 z-20\">\r\n          <ThemeToggle />\r\n        </div>\r\n        \r\n        <div className=\"w-full max-w-md relative z-10\">\r\n          {/* Logo and Brand */}\r\n          <div className=\"text-center mb-6 sm:mb-8\">\r\n            {/* Brand Logo */}\r\n            <div className=\"brand-logo-frame mx-auto mb-5\">\r\n              <div className=\"brand-logo-surface\">\r\n                <img\r\n                  src=\"/assets/avs-logo.png\"\r\n                  alt=\"Auto Vital Solution logo\"\r\n                  className=\"brand-logo\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Static Brand Name */}\r\n            <h1 className=\"font-bold tracking-tight mb-1.5 text-[1.85rem] sm:text-[2.06rem]\">\r\n              <span className=\"text-gray-900\">Auto Vital</span>\r\n              <span className=\"text-emerald-600\"> Solution</span>\r\n            </h1>\r\n            \r\n            {/* Divider Line */}\r\n            <div className=\"flex items-center justify-center mb-2\">\r\n              <div className=\"w-16 h-0.5 bg-gradient-to-r from-transparent via-emerald-600 to-transparent\"></div>\r\n            </div>\r\n            \r\n            {/* Static Tagline - No Language Changes */}\r\n            <p className=\"text-sm text-gray-600 font-medium\">\r\n              Smarter Fleet. Less Stress.\r\n            </p>\r\n          </div>\r\n\r\n          {/* Login Card */}\r\n          <div className=\"bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl shadow-gray-300/60 p-6 sm:p-8 border border-gray-100 transform hover:shadow-3xl hover:shadow-gray-400/50 transition-all duration-300\" style={{ boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.15), 0 10px 20px -8px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 0, 0, 0.05)' }}>\r\n            {/* Animated Welcome Message - Fixed Height */}\r\n            <div className=\"mb-6\">\r\n              <div className=\"min-h-[3.65rem] sm:min-h-[4rem] flex items-start justify-center overflow-visible px-3 pt-1\">\r\n                <h2 \r\n                  key={`welcome-${currentMessage}`}\r\n                  className={`welcome-text text-3xl ${welcomeMessages[currentMessage].color} ${!isAnimating ? 'fade-slide-up' : 'fade-slide-down'} text-center`}\r\n                  style={{ \r\n                    fontFamily: welcomeMessages[currentMessage].font,\r\n                    fontWeight: 600,\r\n                    fontSize: `${1.875 * welcomeMessages[currentMessage].scale}rem`\r\n                  }}\r\n                >\r\n                  {welcomeMessages[currentMessage].text}\r\n                </h2>\r\n                {!isAnimating && (\r\n                  <span className=\"ml-2 inline-block flex-shrink-0\">\r\n                    <span className=\"inline-block h-2 w-2 rounded-full bg-emerald-500 sparkle\" />\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"mt-3 flex items-center justify-center gap-1\">\r\n                <span className=\"h-[2px] w-4 rounded-full bg-gradient-to-r from-transparent via-emerald-300/50 to-emerald-500/70\" />\r\n                <div\r\n                  className={`h-0.5 w-20 sm:w-24 bg-gradient-to-r opacity-80 transition-all duration-500 ${welcomeMessages[currentMessage].color}`}\r\n                />\r\n                <span className=\"h-[2px] w-4 rounded-full bg-gradient-to-r from-emerald-500/70 via-emerald-300/50 to-transparent\" />\r\n              </div>\r\n              <p className=\"text-sm text-gray-500 mt-2\">\r\n                Sign in to manage your fleet like a pro\r\n              </p>\r\n            </div>\r\n\r\n            <LoginForm showPassword={showPassword} setShowPassword={setShowPassword} />\r\n\r\n            {/* Links */}\r\n            <div className=\"mt-6 text-center text-sm space-y-2\">\r\n              <Link\r\n                to=\"/reset-password\"\r\n                className=\"block text-emerald-600 hover:text-emerald-700 font-medium transition-colors\"\r\n              >\r\n                Forgot password?\r\n              </Link>\r\n              <p className=\"text-gray-500 hover:text-gray-700 font-medium transition-colors\">\r\n                Don't have an account?{' '}\r\n                <Link to=\"/register\" className=\"text-emerald-600 hover:text-emerald-700 font-medium transition-colors\">\r\n                  Register your organization\r\n                </Link>\r\n              </p>\r\n            </div>\r\n\r\n            {/* Security Badge */}\r\n            <div className=\"mt-6 pt-6 border-t border-gray-100\">\r\n              <div className=\"flex items-center justify-center gap-2 text-gray-400\">\r\n                <Lock className=\"w-4 h-4\" />\r\n                <span className=\"text-xs font-medium\">\r\n                  Your credentials are encrypted and secure\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Footer */}\r\n          <p className=\"text-center text-xs text-gray-400 mt-6\">\r\n            &copy; {new Date().getFullYear()} Auto Vital Solution. All rights reserved. &bull; Built with &#10084;&#65039;\r\n          </p>\r\n          \r\n          {/* Decorative Clickable Truck Icon */}\r\n          <button\r\n            onClick={() => console.log('Truck icon clicked - add your custom action here')}\r\n            className=\"fixed bottom-8 right-8 group cursor-pointer\"\r\n            aria-label=\"Fleet icon\"\r\n          >\r\n            <div className=\"bg-gradient-to-br from-emerald-500 to-emerald-600 p-4 rounded-2xl shadow-lg shadow-emerald-500/30 hover:shadow-emerald-500/50 hover:scale-110 transition-all duration-300 border border-emerald-400/20\">\r\n              <Truck className=\"w-7 h-7 text-white\" strokeWidth={2.5} fill=\"white\" />\r\n            </div>\r\n            <div className=\"absolute -bottom-8 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\r\n              <span className=\"text-xs text-gray-500 font-medium whitespace-nowrap\">Fleet Manager</span>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\MaintenancePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateMetrics'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [dateRangeFilter, customDateRange, tasks, vehicles, tasksLoading, vehiclesLoading, calculateMetrics]","fix":{"range":[3085,3203],"text":"[dateRangeFilter, customDateRange, tasks, vehicles, tasksLoading, vehiclesLoading, calculateMetrics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Layout from \"../components/layout/Layout\";\r\nimport { MaintenanceTask, Vehicle } from \"@/types\";\r\nimport {\r\n  getDateRangeForFilter,\r\n  getMaintenanceMetricsWithComparison,\r\n} from \"../utils/maintenanceAnalytics\";\r\nimport { getTasks } from \"../utils/maintenanceStorage\";\r\nimport { getVehicles } from \"../utils/storage\";\r\nimport { PlusCircle, BarChart3, Wrench, Calendar } from \"lucide-react\";\r\nimport Button from \"../components/ui/Button\";\r\nimport KPIPanel from \"../components/maintenance/KPIPanel\";\r\nimport MaintenanceCalendar from \"../components/maintenance/MaintenanceCalendar\";\r\nimport MaintenanceTaskList from \"../components/maintenance/MaintenanceTaskList\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nconst MaintenancePage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { t } = useTranslation();\r\n  const [dateRangeFilter] = useState(\"allTime\");\r\n  const [customDateRange, setCustomDateRange] = useState({\r\n    start: \"\",\r\n    end: \"\",\r\n  });\r\n  const [viewMode, setViewMode] = useState<\"calendar\" | \"list\">(\"calendar\");\r\n  const [metrics, setMetrics] = useState<any>({\r\n    totalTasks: 0,\r\n    pendingTasks: 0,\r\n    completedTasksThisMonth: 0,\r\n    averageCompletionTime: 0,\r\n    averageCost: 0,\r\n    totalExpenditure: 0,\r\n    monthlyExpenditure: [],\r\n    expenditureByVehicle: [],\r\n    expenditureByVendor: [],\r\n    taskTypeDistribution: [],\r\n    vehicleDowntime: [],\r\n    kmBetweenMaintenance: [],\r\n    previousPeriodComparison: {\r\n      totalTasks: 0,\r\n      totalExpenditure: 0,\r\n      percentChange: 0,\r\n    },\r\n  });\r\n  // Initialize custom date range values and handle action=new\r\n  useEffect(() => {\r\n    const today = new Date();\r\n    setCustomDateRange({\r\n      start: \"2020-01-01\",\r\n      end: today.toISOString().split(\"T\")[0],\r\n    });\r\n    // Check query parameters for action=new\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const action = searchParams.get(\"action\");\r\n    if (action === \"new\") {\r\n      // Navigate to new maintenance task page\r\n      navigate(\"/maintenance/new\");\r\n      // Clear query params\r\n      const newUrl = window.location.pathname;\r\n      window.history.replaceState({}, document.title, newUrl);\r\n    }\r\n  }, [location.search, navigate]);\r\n  // Use React Query to fetch tasks\r\n  const { data: tasks, isLoading: tasksLoading } = useQuery({\r\n    queryKey: [\"maintenanceTasks\"],\r\n    queryFn: getTasks,\r\n    staleTime: 30 * 1000, // 30 seconds\r\n  });\r\n  // Use React Query to fetch vehicles\r\n  const { data: vehicles, isLoading: vehiclesLoading } = useQuery({\r\n    queryKey: [\"vehicles\"],\r\n    queryFn: getVehicles,\r\n    staleTime: 30 * 1000, // 30 seconds\r\n  });\r\n  // Calculate metrics whenever date range changes or data is loaded\r\n  useEffect(() => {\r\n    if (!tasksLoading && !vehiclesLoading && tasks && vehicles) {\r\n      calculateMetrics(tasks, vehicles, dateRangeFilter);\r\n    }\r\n  }, [\r\n    dateRangeFilter,\r\n    customDateRange,\r\n    tasks,\r\n    vehicles,\r\n    tasksLoading,\r\n    vehiclesLoading,\r\n  ]);\r\n  const calculateMetrics = async (\r\n    tasksData: MaintenanceTask[],\r\n    vehiclesData: Vehicle[],\r\n    filter: string,\r\n  ) => {\r\n    try {\r\n      const dateRange = getDateRangeForFilter(\r\n        filter,\r\n        customDateRange.start,\r\n        customDateRange.end,\r\n      );\r\n      // Get metrics with comparison to previous period\r\n      const metricsData = await getMaintenanceMetricsWithComparison(\r\n        dateRange,\r\n        tasksData,\r\n        vehiclesData,\r\n      );\r\n      setMetrics(metricsData);\r\n    } catch (error) {\r\n      console.error(\"Error calculating maintenance metrics:\", error);\r\n    }\r\n  };\r\n  const handleViewTask = (task: MaintenanceTask) => {\r\n    navigate(`/maintenance/${task.id}?mode=view`, { state: { task, mode: 'view' } });\r\n  };\r\n\r\n  const handleEditTask = (task: MaintenanceTask) => {\r\n    navigate(`/maintenance/${task.id}`, { state: { task, mode: 'edit' } });\r\n  };\r\n\r\n  const loading = tasksLoading || vehiclesLoading;\r\n  return (\r\n    <Layout>\r\n      {/* Page Header */}\r\n      <div className=\"rounded-xl border bg-white dark:bg-white px-4 py-3 shadow-sm mb-6\">\r\n        <div className=\"flex items-center group\">\r\n          <Wrench className=\"h-5 w-5 mr-2 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 transition\" />\r\n          <h1 className=\"text-2xl font-display font-semibold tracking-tight-plus text-gray-900 dark:text-gray-100\">\r\n            {t(\"maintenance.title\")}\r\n          </h1>\r\n        </div>\r\n        <p className=\"text-sm font-sans text-gray-500 dark:text-gray-400 mt-1 ml-7\">\r\n          {t(\"maintenance.description\")}\r\n        </p>\r\n        <div className=\"mt-4 flex flex-wrap gap-2\">\r\n          <Button\r\n            onClick={() => navigate(\"/maintenance/new\")}\r\n            icon={<PlusCircle className=\"h-4 w-4\" />}\r\n            inputSize=\"sm\"\r\n          >\r\n            {t(\"maintenance.newTask\")}\r\n          </Button>\r\n          <Button\r\n            onClick={() => navigate(\"/parts-health-analytics\")}\r\n            icon={<BarChart3 className=\"h-4 w-4\" />}\r\n            variant=\"outline\"\r\n            inputSize=\"sm\"\r\n          >\r\n            {t(\"maintenance.partsHealthAnalytics\")}\r\n          </Button>\r\n          {/* View Toggle */}\r\n          <div className=\"flex border border-gray-200 rounded-lg overflow-hidden\">\r\n            <Button\r\n              onClick={() => setViewMode(\"calendar\")}\r\n              variant={viewMode === \"calendar\" ? \"default\" : \"outline\"}\r\n              inputSize=\"sm\"\r\n              icon={<Calendar className=\"h-4 w-4\" />}\r\n              className=\"rounded-none border-0\"\r\n            >\r\n              {t(\"maintenance.calendar\")}\r\n            </Button>\r\n            <Button\r\n              onClick={() => setViewMode(\"list\")}\r\n              variant={viewMode === \"list\" ? \"default\" : \"outline\"}\r\n              inputSize=\"sm\"\r\n              icon={<Wrench className=\"h-4 w-4\" />}\r\n              className=\"rounded-none border-0\"\r\n            >\r\n              Task List\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {loading ? (\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n          <p className=\"ml-3 font-sans text-gray-600\">\r\n            Loading maintenance analytics...\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          {/* KPI Panel */}\r\n          <KPIPanel\r\n            totalTasks={metrics.totalTasks}\r\n            pendingTasks={metrics.pendingTasks}\r\n            averageCompletionTime={metrics.averageCompletionTime}\r\n            completedTasksThisMonth={metrics.completedTasksThisMonth}\r\n            averageCost={metrics.averageCost}\r\n            totalExpenditure={metrics.totalExpenditure}\r\n            previousPeriodComparison={metrics.previousPeriodComparison}\r\n          />\r\n          \r\n          {/* View Content */}\r\n          {viewMode === \"calendar\" ? (\r\n            <MaintenanceCalendar\r\n              tasks={tasks || []}\r\n              vehicles={vehicles || []}\r\n            />\r\n          ) : (\r\n            <MaintenanceTaskList\r\n              tasks={tasks || []}\r\n              vehicles={vehicles || []}\r\n              onViewTask={handleViewTask}\r\n              onEditTask={handleEditTask}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\nexport default MaintenancePage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\MaintenanceTaskPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\MobileTripPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\NotificationsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'events' logical expression could make the dependencies of useMemo Hook (at line 95) change on every render. To fix this, wrap the initialization of 'events' in its own useMemo() Hook.","line":49,"column":9,"nodeType":"VariableDeclarator","endLine":49,"endColumn":42},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'events' logical expression could make the dependencies of useEffect Hook (at line 134) change on every render. To fix this, wrap the initialization of 'events' in its own useMemo() Hook.","line":49,"column":9,"nodeType":"VariableDeclarator","endLine":49,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useMemo } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport Layout from '../components/layout/Layout';\r\nimport MediaCard from '../components/HeroFeed/MediaCard';\r\nimport { usePermissions } from '../hooks/usePermissions';\r\nimport { useHeroFeed, useKPICards } from '../hooks/useHeroFeed';\r\nimport LoadingScreen from '../components/LoadingScreen';\r\nimport { RefreshCw, Sparkles, Play } from 'lucide-react';\r\n\r\n// Fleet-relevant YouTube videos\r\nconst FLEET_VIDEOS = [\r\n  { id: 'L2ZM0j0KDr4', title: 'Truck Maintenance Tips' },\r\n  { id: 'nUHjUoT2QwA', title: 'Fuel Saving Techniques' },\r\n  { id: 'zWOADa2rKHo', title: 'Driver Safety Training' },\r\n  { id: 'B1J6Ou4q8vE', title: 'Fleet GPS Tracking Guide' },\r\n  { id: 'sFYo6-nVHd8', title: 'Commercial Vehicle Inspection' },\r\n  { id: 'kWTozGbRrCs', title: 'Route Optimization Tips' },\r\n  { id: 'p3jiXMXK2Cs', title: 'ELD Compliance Guide' },\r\n  { id: 'TK5_kEBx-q4', title: 'Winter Driving Safety' }\r\n];\r\n\r\nconst NotificationsPage: React.FC = () => {\r\n  const { permissions, loading: permissionsLoading } = usePermissions();\r\n  const [selectedFilters, setSelectedFilters] = useState<string[]>(['all']);\r\n  const [playingVideos, setPlayingVideos] = useState<Set<string>>(new Set());\r\n  const videoRefs = useRef<{ [key: string]: HTMLDivElement }>({});\r\n\r\n  const feedKinds = useMemo(() => {\r\n    if (selectedFilters.includes('all')) {\r\n      return [];\r\n    }\r\n    return selectedFilters.filter(kind => kind !== 'media');\r\n  }, [selectedFilters]);\r\n\r\n  const { \r\n    data, \r\n    fetchNextPage, \r\n    hasNextPage, \r\n    isFetchingNextPage, \r\n    isLoading, \r\n    refetch \r\n  } = useHeroFeed({\r\n    kinds: feedKinds,\r\n    limit: 20\r\n  });\r\n\r\n  const { data: kpiCards, refetch: refetchKPIs } = useKPICards();\r\n\r\n  const events = data?.pages.flat() || [];\r\n\r\n  // Count events by type\r\n  const getCounts = () => {\r\n    const counts = {\r\n      ai_alert: 0,\r\n      vehicle_doc: 0,\r\n      maintenance: 0,\r\n      trip: 0,\r\n      kpi: 0,\r\n      vehicle_activity: 0,\r\n      activity: 0\r\n    };\r\n    \r\n    events.forEach((event: any) => {\r\n      if (Object.prototype.hasOwnProperty.call(counts, event.kind)) {\r\n        counts[event.kind as keyof typeof counts]++;\r\n      }\r\n    });\r\n    \r\n    return counts;\r\n  };\r\n\r\n  const counts = getCounts();\r\n\r\n  const mediaCards = useMemo(() => {\r\n    if (!kpiCards) {\r\n      return [];\r\n    }\r\n    return kpiCards.filter(card => {\r\n      const type = card.kpi_payload?.type;\r\n      return type === 'youtube' || type === 'image' || type === 'playlist';\r\n    });\r\n  }, [kpiCards]);\r\n\r\n  const mediaCount = mediaCards.length;\r\n  const isMediaOnly = selectedFilters.length === 1 && selectedFilters[0] === 'media';\r\n\r\n  const filteredEvents = useMemo(() => {\r\n    if (isMediaOnly) {\r\n      return [];\r\n    }\r\n    if (feedKinds.length === 0) {\r\n      return events;\r\n    }\r\n    return events.filter((event: any) => feedKinds.includes(event.kind));\r\n  }, [events, feedKinds, isMediaOnly]);\r\n\r\n  // Intersection Observer for autoplay\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          const videoId = entry.target.getAttribute('data-video-id');\r\n          if (!videoId) return;\r\n          \r\n          if (entry.isIntersecting && entry.intersectionRatio > 0.5) {\r\n            // Auto-play when more than 50% visible\r\n            setPlayingVideos(prev => new Set([...prev, videoId]));\r\n          } else {\r\n            // Stop playing when less than 50% visible\r\n            setPlayingVideos(prev => {\r\n              const newSet = new Set(prev);\r\n              newSet.delete(videoId);\r\n              return newSet;\r\n            });\r\n          }\r\n        });\r\n      },\r\n      { \r\n        threshold: [0, 0.5, 1], // Multiple thresholds for better detection\r\n        rootMargin: '0px'\r\n      }\r\n    );\r\n\r\n    // Delay observation to ensure elements are rendered\r\n    setTimeout(() => {\r\n      Object.values(videoRefs.current).forEach(ref => {\r\n        if (ref) observer.observe(ref);\r\n      });\r\n    }, 100);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, [events, selectedFilters]); // Re-run when events change\r\n\r\n  // Handle loading and permissions after all hooks\r\n  if (permissionsLoading) {\r\n    return <LoadingScreen isLoading={true} />;\r\n  }\r\n\r\n  if (!permissions?.canAccessAlerts) {\r\n    return <Navigate to=\"/vehicles\" replace />;\r\n  }\r\n\r\n  const handleFilterClick = (filterId: string) => {\r\n    if (filterId === 'all') {\r\n      setSelectedFilters(['all']);\r\n    } else {\r\n      const newFilters = selectedFilters.includes(filterId)\r\n        ? selectedFilters.filter(f => f !== filterId)\r\n        : [...selectedFilters.filter(f => f !== 'all'), filterId];\r\n      \r\n      setSelectedFilters(newFilters.length === 0 ? ['all'] : newFilters);\r\n    }\r\n    // Force refetch when changing filters\r\n    setTimeout(() => {\r\n      refetch();\r\n      refetchKPIs();\r\n    }, 100);\r\n  };\r\n\r\n  // AI Summary Component\r\n  const AISummary = ({ index }: { index: number }) => {\r\n    const summaries = [\r\n      \"Fleet utilization improved by 12% this week. Focus on Route CG04 vehicles for maintenance scheduling.\",\r\n      \"3 vehicles showing consistent route deviations. Consider driver training for efficiency improvement.\",\r\n      \"Fuel costs trending upward. Recommend reviewing driver behavior reports for optimization opportunities.\",\r\n      \"Document renewals clustered in Q2. Start renewal process 60 days in advance to avoid downtime.\"\r\n    ];\r\n    \r\n    return (\r\n      <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-6 my-6\">\r\n        <div className=\"flex items-start gap-3\">\r\n          <Sparkles className=\"w-5 h-5 text-blue-600 mt-1\" />\r\n          <div>\r\n            <h3 className=\"font-semibold text-gray-900 mb-2\">AVS Intelligence Summary</h3>\r\n            <p className=\"text-gray-700\">{summaries[index % summaries.length]}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Compact KPI display\r\n  const CompactKPIs = () => (\r\n    <div className=\"grid grid-cols-5 gap-2 mb-4 opacity-75\">\r\n      {[\r\n        { label: 'Utilization', value: '0.1%' },\r\n        { label: 'Mileage', value: '6.8 km/L' },\r\n        { label: 'Load/Trip', value: '3,924 kg' },\r\n        { label: 'Cost/KM', value: 'Rs 10.21' },\r\n        { label: 'Distance', value: '12,450 km' }\r\n      ].map((kpi, i) => (\r\n        <div key={i} className=\"bg-white p-2 rounded text-center border border-gray-200\">\r\n          <p className=\"text-xs text-gray-600\">{kpi.label}</p>\r\n          <p className=\"text-sm font-semibold\">{kpi.value}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  // Video Reel Component\r\n  const VideoReel = ({ videoId, index }: any) => {\r\n    const isPlaying = playingVideos.has(videoId);\r\n    const videoIndex = index % FLEET_VIDEOS.length;\r\n    const video = FLEET_VIDEOS[videoIndex];\r\n    \r\n    return (\r\n      <div \r\n        ref={el => {\r\n          if (el) {\r\n            videoRefs.current[videoId] = el;\r\n          } else {\r\n            delete videoRefs.current[videoId];\r\n          }\r\n        }}\r\n        data-video-id={videoId}\r\n        className=\"relative rounded-lg overflow-hidden bg-black video-reel-container\"\r\n        style={{ aspectRatio: '16/9', maxHeight: '400px' }}\r\n      >\r\n        {isPlaying ? (\r\n          <iframe\r\n            className=\"w-full h-full\"\r\n            src={`https://www.youtube.com/embed/${video.id}?autoplay=1&mute=1&controls=1&loop=1&playlist=${video.id}&playsinline=1`}\r\n            title={video.title}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n            allowFullScreen\r\n            loading=\"lazy\"\r\n          />\r\n        ) : (\r\n          <div \r\n            className=\"relative cursor-pointer group h-full\"\r\n            onClick={() => setPlayingVideos(new Set([videoId]))}\r\n          >\r\n            <img\r\n              src={`https://img.youtube.com/vi/${video.id}/hqdefault.jpg`}\r\n              alt={video.title}\r\n              className=\"w-full h-full object-cover\"\r\n              loading=\"lazy\"\r\n              onError={(e) => {\r\n                e.currentTarget.src = `https://img.youtube.com/vi/${video.id}/default.jpg`;\r\n              }}\r\n            />\r\n            <div className=\"absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center hover:bg-opacity-40 transition-all\">\r\n              <div className=\"bg-white/90 rounded-full p-3 hover:scale-110 transition-transform\">\r\n                <Play className=\"w-6 h-6 text-black\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/80 to-transparent\">\r\n              <p className=\"text-white font-medium text-sm\">{video.title}</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderEventCard = (event: any, index: number) => {\r\n    // Insert AI summary every 8 events (check first to avoid conflict with video reel)\r\n    if (index > 0 && index % 8 === 0) {\r\n      return (\r\n        <React.Fragment key={`fragment-${event.id}`}>\r\n          <AISummary index={index / 8} />\r\n          {renderOriginalEventCard(event)}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    // Insert video reel every 4 events\r\n    if (index > 0 && index % 4 === 0) {\r\n      return (\r\n        <React.Fragment key={`fragment-${event.id}`}>\r\n          <VideoReel \r\n            videoId={`video-${index}`} \r\n            index={index}\r\n          />\r\n          {renderOriginalEventCard(event)}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return renderOriginalEventCard(event);\r\n  };\r\n\r\n  const renderOriginalEventCard = (event: any) => {\r\n    // Your existing event card rendering logic here\r\n    const getPriorityStyles = (priority: string) => {\r\n      switch (priority) {\r\n        case 'danger': return 'border-red-200 bg-red-50';\r\n        case 'warn': return 'border-yellow-200 bg-yellow-50';\r\n        default: return 'border-gray-200 bg-white';\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div key={event.id} className={`p-4 rounded-lg border ${getPriorityStyles(event.priority)}`}>\r\n        <div className=\"flex items-start justify-between\">\r\n          <div className=\"flex-1\">\r\n            <h3 className=\"font-semibold text-gray-900\">{event.title}</h3>\r\n            <p className=\"text-sm text-gray-600 mt-1\">{event.description}</p>\r\n            <p className=\"text-xs text-gray-500 mt-2\">\r\n              {new Date(event.event_time).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          {event.kind === 'vehicle_doc' && (\r\n            <button className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700\">\r\n              Send Reminder\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n        {/* Compact KPIs */}\r\n        <CompactKPIs />\r\n        \r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-gray-900\">Fleet Activity Feed</h1>\r\n          <button\r\n            onClick={() => refetch()}\r\n            className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n          >\r\n            <RefreshCw className=\"w-4 h-4\" />\r\n            Refresh\r\n          </button>\r\n        </div>\r\n\r\n        {/* Stats Grid - Updated to show real counts */}\r\n        <div className=\"grid grid-cols-3 md:grid-cols-6 gap-2 mb-4\">\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{counts.ai_alert}</span>\r\n            <p className=\"text-xs text-gray-600\">AI Alerts</p>\r\n          </div>\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{counts.vehicle_doc}</span>\r\n            <p className=\"text-xs text-gray-600\">Documents</p>\r\n          </div>\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{counts.maintenance}</span>\r\n            <p className=\"text-xs text-gray-600\">Maintenance</p>\r\n          </div>\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{counts.trip}</span>\r\n            <p className=\"text-xs text-gray-600\">Trips</p>\r\n          </div>\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{counts.kpi}</span>\r\n            <p className=\"text-xs text-gray-600\">KPIs</p>\r\n          </div>\r\n          <div className=\"bg-white p-3 rounded-lg border\">\r\n            <span className=\"text-lg font-bold\">{mediaCount}</span>\r\n            <p className=\"text-xs text-gray-600\">Media</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"flex flex-wrap gap-2 mb-6\">\r\n          {['all', 'ai_alert', 'vehicle_doc', 'maintenance', 'trip', 'kpi', 'media'].map(filter => (\r\n            <button\r\n              key={filter}\r\n              onClick={() => handleFilterClick(filter)}\r\n              className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\r\n                selectedFilters.includes(filter)\r\n                  ? 'bg-blue-600 text-white'\r\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n              }`}\r\n            >\r\n              {filter === 'all' ? 'All' : filter.split('_').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Feed with mixed content */}\r\n        <div className=\"space-y-4\">\r\n          {isLoading ? (\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n              <p className=\"mt-4 text-gray-600\">Loading feed...</p>\r\n            </div>\r\n          ) : isMediaOnly ? (\r\n            mediaCards.length > 0 || FLEET_VIDEOS.length > 0 ? (\r\n              <div className=\"space-y-4\">\r\n                {mediaCards.map((card, index) => (\r\n                  <MediaCard key={`media-card-${card.id ?? index}`} card={card} />\r\n                ))}\r\n                {FLEET_VIDEOS.map((video, index) => (\r\n                  <VideoReel\r\n                    key={`media-reel-${video.id}`}\r\n                    videoId={`media-${video.id}`}\r\n                    index={index}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n                <p className=\"text-gray-600\">No media to display</p>\r\n              </div>\r\n            )\r\n          ) : filteredEvents.length > 0 ? (\r\n            <>\r\n              {filteredEvents.map((event, index) => renderEventCard(event, index))}\r\n              \r\n              {hasNextPage && (\r\n                <div className=\"text-center pt-4\">\r\n                  <button\r\n                    onClick={() => fetchNextPage()}\r\n                    disabled={isFetchingNextPage}\r\n                    className=\"px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200\"\r\n                  >\r\n                    {isFetchingNextPage ? 'Loading...' : 'Load More'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n              <p className=\"text-gray-600\">No events to display</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default NotificationsPage;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\PartsHealthAnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\RegisterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\ResetPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\TripDetailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\TripPnlReportsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'datePresetOptions'. Either include it or remove the dependency array.","line":342,"column":6,"nodeType":"ArrayExpression","endLine":342,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDatePreset, customStartDate, customEndDate, datePresetOptions]","fix":{"range":[10436,10488],"text":"[selectedDatePreset, customStartDate, customEndDate, datePresetOptions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'getVehicleName'. Either include it or remove the dependency array.","line":574,"column":6,"nodeType":"ArrayExpression","endLine":574,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [filteredTrips, getVehicleName, pnlSummary.lossTrips, pnlSummary.profitableTrips]","fix":{"range":[18400,18427],"text":"[filteredTrips, getVehicleName, pnlSummary.lossTrips, pnlSummary.profitableTrips]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport Layout from '../components/layout/Layout';\r\nimport { usePermissions } from '../hooks/usePermissions';\r\nimport LoadingScreen from '../components/LoadingScreen';\r\nimport { Trip, Vehicle, Driver, Warehouse } from '@/types';\r\nimport { getTrips, getVehicles, getWarehouses } from '../utils/storage';\r\nimport { getDrivers } from '../utils/api/drivers';\r\nimport { \r\n  Calendar, \r\n  ChevronDown, \r\n  Filter, \r\n  ChevronLeft, \r\n  ChevronRight, \r\n  X, \r\n  RefreshCw, \r\n  Search, \r\n  Download, \r\n  IndianRupee,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  DollarSign,\r\n  BarChart3,\r\n  BarChart2,\r\n  Target,\r\n  Eye,\r\n  Printer,\r\n  ArrowUpDown,\r\n  MoreHorizontal,\r\n  PieChart,\r\n  LineChart,\r\n  Activity\r\n} from 'lucide-react';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport Select from '../components/ui/Select';\r\nimport { format, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth, \r\n         startOfYear, endOfYear, subWeeks, subMonths, subYears, parseISO } from 'date-fns';\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport { toast } from 'react-toastify';\r\nimport { \r\n  LineChart as RechartsLineChart, \r\n  Line, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  ResponsiveContainer,\r\n  PieChart as RechartsPieChart,\r\n  Pie,\r\n  Cell,\r\n  BarChart as RechartsBarChart,\r\n  Bar,\r\n  Area,\r\n  AreaChart\r\n} from 'recharts';\r\n\r\ninterface PnLSummary {\r\n  totalTrips: number;\r\n  totalIncome: number;\r\n  totalExpense: number;\r\n  netProfit: number;\r\n  profitMargin: number;\r\n  avgCostPerKm: number;\r\n  profitableTrips: number;\r\n  lossTrips: number;\r\n  previousPeriodIncome?: number;\r\n  previousPeriodExpense?: number;\r\n  previousPeriodProfit?: number;\r\n  incomeGrowth?: number;\r\n  expenseGrowth?: number;\r\n  profitGrowth?: number;\r\n}\r\n\r\ninterface ChartData {\r\n  name: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\ninterface TrendData {\r\n  date: string;\r\n  income: number;\r\n  expense: number;\r\n  profit: number;\r\n  trips: number;\r\n}\r\n\r\ninterface TripSummaryMetrics {\r\n  totalExpenses: number;\r\n  avgDistance: number;\r\n  tripCount: number;\r\n  meanMileage: number;\r\n  topDriver: {\r\n    id: string;\r\n    name: string;\r\n    totalDistance: number;\r\n    tripCount: number;\r\n  } | null;\r\n  topVehicle: {\r\n    id: string;\r\n    registrationNumber: string;\r\n    tripCount: number;\r\n  } | null;\r\n}\r\n\r\ninterface DatePreset {\r\n  label: string;\r\n  getValue: () => { startDate: Date; endDate: Date };\r\n}\r\n\r\nconst TripPnlReportsPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { permissions, loading: permissionsLoading } = usePermissions();\r\n  \r\n  // Add error state for debugging\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [debugInfo, setDebugInfo] = useState<any>(null);\r\n\r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [trips, setTrips] = useState<Trip[]>([]);\r\n  const [drivers, setDrivers] = useState<Driver[]>([]);\r\n  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Filter state\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedVehicle, setSelectedVehicle] = useState('');\r\n  const [selectedDriver, setSelectedDriver] = useState('');\r\n  const [selectedWarehouse, setSelectedWarehouse] = useState('');\r\n  const [selectedProfitStatus, setSelectedProfitStatus] = useState('');\r\n  const [selectedDatePreset, setSelectedDatePreset] = useState('alltime');\r\n  const [customStartDate, setCustomStartDate] = useState('');\r\n  const [customEndDate, setCustomEndDate] = useState('');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  \r\n  // Enhanced UI state\r\n  const [showCharts, setShowCharts] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [sortField, setSortField] = useState<keyof Trip>('trip_start_date');\r\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\r\n  const [selectedTrip, setSelectedTrip] = useState<Trip | null>(null);\r\n  const [showTripModal, setShowTripModal] = useState(false);\r\n\r\n  // Permission checks will be moved after all hooks\r\n\r\n  // ...rest of component logic\r\n\r\n  const datePresetOptions: DatePreset[] = [\r\n    {\r\n      label: 'Last 7 days',\r\n      getValue: () => ({\r\n        startDate: subDays(new Date(), 7),\r\n        endDate: new Date()\r\n      })\r\n    },\r\n    {\r\n      label: 'Last 30 days',\r\n      getValue: () => ({\r\n        startDate: subDays(new Date(), 30),\r\n        endDate: new Date()\r\n      })\r\n    },\r\n    {\r\n      label: 'This week',\r\n      getValue: () => ({\r\n        startDate: startOfWeek(new Date()),\r\n        endDate: endOfWeek(new Date())\r\n      })\r\n    },\r\n    {\r\n      label: 'Last week',\r\n      getValue: () => ({\r\n        startDate: startOfWeek(subWeeks(new Date(), 1)),\r\n        endDate: endOfWeek(subWeeks(new Date(), 1))\r\n      })\r\n    },\r\n    {\r\n      label: 'This month',\r\n      getValue: () => ({\r\n        startDate: startOfMonth(new Date()),\r\n        endDate: endOfMonth(new Date())\r\n      })\r\n    },\r\n    {\r\n      label: 'Last month',\r\n      getValue: () => ({\r\n        startDate: startOfMonth(subMonths(new Date(), 1)),\r\n        endDate: endOfMonth(subMonths(new Date(), 1))\r\n      })\r\n    },\r\n    {\r\n      label: 'This year',\r\n      getValue: () => ({\r\n        startDate: startOfYear(new Date()),\r\n        endDate: endOfYear(new Date())\r\n      })\r\n    },\r\n    {\r\n      label: 'Last year',\r\n      getValue: () => ({\r\n        startDate: startOfYear(subYears(new Date(), 1)),\r\n        endDate: endOfYear(subYears(new Date(), 1))\r\n      })\r\n    },\r\n    {\r\n      label: 'All Time',\r\n      getValue: () => ({\r\n        startDate: new Date('2020-01-01'),\r\n        endDate: new Date()\r\n      })\r\n    }\r\n  ];\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      setDebugInfo(null);\r\n      \r\n      console.log('Loading PNL Reports data...');\r\n\r\n      const [tripsData, vehiclesData, driversData, warehousesData] = await Promise.all([\r\n        getTrips(),\r\n        getVehicles(),\r\n        getDrivers(),\r\n        getWarehouses()\r\n      ]);\r\n      \r\n      console.log('Data loaded successfully:', {\r\n        trips: tripsData.length,\r\n        vehicles: vehiclesData.length,\r\n        drivers: driversData.length,\r\n        warehouses: warehousesData.length\r\n      });\r\n      \r\n      setTrips(tripsData);\r\n      setVehicles(vehiclesData);\r\n      setDrivers(driversData);\r\n      setWarehouses(warehousesData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching PNL Reports data:\", error);\r\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\r\n      setDebugInfo({\r\n        error: error,\r\n        timestamp: new Date().toISOString(),\r\n        userAgent: navigator.userAgent,\r\n        url: window.location.href\r\n      });\r\n      toast.error(\"Failed to load data\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const tripSummaryMetrics = useMemo((): TripSummaryMetrics => {\r\n    const tripsArray = Array.isArray(trips) ? trips : [];\r\n    const totalTrips = tripsArray.length;\r\n    const totalDistance = tripsArray.reduce((sum, trip) => sum + (trip.end_km - trip.start_km), 0);\r\n    const totalExpenses = tripsArray.reduce((sum, trip) => sum + (trip.total_expense || 0), 0);\r\n    const avgDistance = totalTrips > 0 ? totalDistance / totalTrips : 0;\r\n    \r\n    // Calculate mean mileage from trips with valid kmpl\r\n    const tripsWithMileage = tripsArray.filter(trip => trip.calculated_kmpl);\r\n    const meanMileage = tripsWithMileage.length > 0 \r\n      ? tripsWithMileage.reduce((sum, trip) => sum + (trip.calculated_kmpl || 0), 0) / tripsWithMileage.length \r\n      : 0;\r\n    \r\n    // Find top driver by trip count\r\n    const driverStats: Record<string, { tripCount: number; totalDistance: number; name: string }> = {};\r\n    tripsArray.forEach(trip => {\r\n      if (trip.driver_id) {\r\n        if (!driverStats[trip.driver_id]) {\r\n          const driver = drivers.find(d => d.id === trip.driver_id);\r\n          driverStats[trip.driver_id] = {\r\n            tripCount: 0,\r\n            totalDistance: 0,\r\n            name: driver?.name || 'Unknown'\r\n          };\r\n        }\r\n        driverStats[trip.driver_id].tripCount++;\r\n        driverStats[trip.driver_id].totalDistance += (trip.end_km - trip.start_km);\r\n      }\r\n    });\r\n    \r\n    const topDriver = Object.entries(driverStats)\r\n      .sort((a, b) => b[1].tripCount - a[1].tripCount)[0];\r\n    \r\n    // Find top vehicle by trip count\r\n    const vehicleStats: Record<string, { tripCount: number; registrationNumber: string }> = {};\r\n    tripsArray.forEach(trip => {\r\n      if (trip.vehicle_id) {\r\n        if (!vehicleStats[trip.vehicle_id]) {\r\n          const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n          vehicleStats[trip.vehicle_id] = {\r\n            tripCount: 0,\r\n            registrationNumber: vehicle?.registration_number || 'Unknown'\r\n          };\r\n        }\r\n        vehicleStats[trip.vehicle_id].tripCount++;\r\n      }\r\n    });\r\n    \r\n    const topVehicle = Object.entries(vehicleStats)\r\n      .sort((a, b) => b[1].tripCount - a[1].tripCount)[0];\r\n    \r\n    return {\r\n      totalExpenses,\r\n      avgDistance,\r\n      tripCount: totalTrips,\r\n      meanMileage,\r\n      topDriver: topDriver ? {\r\n        id: topDriver[0],\r\n        name: topDriver[1].name,\r\n        totalDistance: topDriver[1].totalDistance,\r\n        tripCount: topDriver[1].tripCount\r\n      } : null,\r\n      topVehicle: topVehicle ? {\r\n        id: topVehicle[0],\r\n        registrationNumber: topVehicle[1].registrationNumber,\r\n        tripCount: topVehicle[1].tripCount\r\n      } : null\r\n    };\r\n  }, [trips, vehicles, drivers]);\r\n\r\n  const dateRange = useMemo(() => {\r\n    if (selectedDatePreset === 'custom') {\r\n      return {\r\n        startDate: customStartDate ? parseISO(customStartDate) : subDays(new Date(), 30),\r\n        endDate: customEndDate ? parseISO(customEndDate) : new Date()\r\n      };\r\n    } else {\r\n      const preset = datePresetOptions.find(option => option.label.toLowerCase().replace(/\\s+/g, '') === selectedDatePreset);\r\n      return preset ? preset.getValue() : datePresetOptions[1].getValue();\r\n    }\r\n  }, [selectedDatePreset, customStartDate, customEndDate]);\r\n\r\n  // Filter trips based on current filters\r\n  const filteredTrips = useMemo(() => {\r\n    try {\r\n    const filtered = trips.filter(trip => {\r\n      // Date range filter\r\n      const tripDate = parseISO(trip.trip_start_date);\r\n      if (tripDate < dateRange.startDate || tripDate > dateRange.endDate) {\r\n        return false;\r\n      }\r\n\r\n      // Search filter\r\n      if (\r\n        searchTerm &&\r\n        !(trip.trip_serial_number || \"\").toLowerCase().includes(searchTerm.toLowerCase())\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      // Vehicle filter\r\n      if (selectedVehicle && trip.vehicle_id !== selectedVehicle) {\r\n        return false;\r\n      }\r\n\r\n      // Driver filter\r\n      if (selectedDriver && trip.driver_id !== selectedDriver) {\r\n        return false;\r\n      }\r\n\r\n      // Warehouse filter\r\n      if (selectedWarehouse && trip.warehouse_id !== selectedWarehouse) {\r\n        return false;\r\n      }\r\n\r\n      // Profit status filter\r\n      if (selectedProfitStatus && trip.profit_status !== selectedProfitStatus) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    \r\n    // Recalculate financial values for each filtered trip\r\n    return filtered.map(trip => {\r\n      // Calculate total expense from individual components\r\n      const calculatedTotalExpense = (\r\n        Number(trip.total_fuel_cost || 0) +\r\n        Number(trip.unloading_expense || 0) +\r\n        Number(trip.driver_expense || 0) +\r\n        Number(trip.road_rto_expense || 0) +\r\n        Number(trip.miscellaneous_expense || 0) +\r\n        Number(trip.breakdown_expense || 0)\r\n      );\r\n      \r\n      // Calculate income (skip if no income data)\r\n      const income = Number(trip.income_amount) || 0;\r\n      \r\n      // Calculate net profit (only if income exists)\r\n      const calculatedNetProfit = income > 0 ? income - calculatedTotalExpense : -calculatedTotalExpense;\r\n      \r\n      // Calculate cost per km\r\n      const distance = (Number(trip.end_km) || 0) - (Number(trip.start_km) || 0);\r\n      const calculatedCostPerKm = distance > 0 ? calculatedTotalExpense / distance : 0;\r\n      \r\n      // Determine profit status\r\n      let calculatedProfitStatus: 'profit' | 'loss' | 'neutral';\r\n      if (income > 0) {\r\n        if (calculatedNetProfit > 0) {\r\n          calculatedProfitStatus = 'profit';\r\n        } else if (calculatedNetProfit < 0) {\r\n          calculatedProfitStatus = 'loss';\r\n        } else {\r\n          calculatedProfitStatus = 'neutral';\r\n        }\r\n      } else {\r\n        // If no income, default to loss since we have expenses\r\n        calculatedProfitStatus = calculatedTotalExpense > 0 ? 'loss' : 'neutral';\r\n      }\r\n      \r\n      // Return trip with recalculated financial values\r\n      return {\r\n        ...trip,\r\n        total_expense: calculatedTotalExpense,\r\n        net_profit: calculatedNetProfit,\r\n        cost_per_km: calculatedCostPerKm,\r\n        profit_status: calculatedProfitStatus\r\n      };\r\n    });\r\n    \r\n    return filtered;\r\n    } catch (error) {\r\n      console.error('Error filtering trips:', error);\r\n      return [];\r\n    }\r\n  }, [trips, dateRange, searchTerm, selectedVehicle, selectedDriver, selectedWarehouse, selectedProfitStatus]);\r\n\r\n  // Calculate P&L summary directly from filtered trips\r\n  const pnlSummary = useMemo((): PnLSummary => {\r\n    const summary = filteredTrips.reduce((acc, trip) => {\r\n      const income = Number(trip.income_amount) || 0;\r\n      \r\n      // Calculate total expense from individual components using total_fuel_cost\r\n      const calculatedTotalExpense = (\r\n        Number(trip.total_fuel_cost || 0) +\r\n        Number(trip.unloading_expense || 0) +\r\n        Number(trip.driver_expense || 0) +\r\n        Number(trip.road_rto_expense || 0) +\r\n        Number(trip.miscellaneous_expense || 0) +\r\n        Number(trip.breakdown_expense || 0)\r\n      );\r\n      \r\n      // Calculate profit from income minus calculated expenses\r\n      const calculatedProfit = income - calculatedTotalExpense;\r\n      \r\n      // Calculate cost per km from calculated expenses\r\n      const distance = (Number(trip.end_km) || 0) - (Number(trip.start_km) || 0);\r\n      const calculatedCostPerKm = distance > 0 ? calculatedTotalExpense / distance : 0;\r\n\r\n      acc.totalIncome += income;\r\n      acc.totalExpense += calculatedTotalExpense;\r\n      acc.netProfit += calculatedProfit;\r\n      acc.avgCostPerKm += calculatedCostPerKm;\r\n\r\n      // Determine profit status based on calculated profit\r\n      if (calculatedProfit > 0) {\r\n        acc.profitableTrips++;\r\n      } else if (calculatedProfit < 0) {\r\n        acc.lossTrips++;\r\n      }\r\n\r\n      return acc;\r\n    }, {\r\n      totalTrips: filteredTrips.length,\r\n      totalIncome: 0,\r\n      totalExpense: 0,\r\n      netProfit: 0,\r\n      profitMargin: 0,\r\n      avgCostPerKm: 0,\r\n      profitableTrips: 0,\r\n      lossTrips: 0\r\n    });\r\n\r\n    summary.avgCostPerKm = filteredTrips.length > 0 ? summary.avgCostPerKm / filteredTrips.length : 0;\r\n    summary.profitMargin = summary.totalIncome > 0 ? (summary.netProfit / summary.totalIncome) * 100 : 0;\r\n\r\n    return summary;\r\n  }, [filteredTrips]);\r\n\r\n  // Prepare chart data\r\n  const chartData = useMemo(() => {\r\n    try {\r\n      // Profit/Loss distribution pie chart\r\n      const profitLossData: ChartData[] = [\r\n        { name: 'Profitable Trips', value: pnlSummary.profitableTrips, color: '#10B981' },\r\n        { name: 'Loss Trips', value: pnlSummary.lossTrips, color: '#EF4444' }\r\n      ];\r\n\r\n    // Monthly trend data\r\n    const monthlyTrend: TrendData[] = [];\r\n    const monthlyData = new Map<string, { income: number; expense: number; profit: number; trips: number }>();\r\n    \r\n    filteredTrips.forEach(trip => {\r\n      const month = format(parseISO(trip.trip_start_date), 'MMM yyyy');\r\n      const income = Number(trip.income_amount) || 0;\r\n      const expense = Number(trip.total_expense) || 0;\r\n      const profit = income - expense;\r\n      \r\n      if (!monthlyData.has(month)) {\r\n        monthlyData.set(month, { income: 0, expense: 0, profit: 0, trips: 0 });\r\n      }\r\n      \r\n      const data = monthlyData.get(month)!;\r\n      data.income += income;\r\n      data.expense += expense;\r\n      data.profit += profit;\r\n      data.trips += 1;\r\n    });\r\n\r\n    monthlyData.forEach((data, month) => {\r\n      monthlyTrend.push({\r\n        date: month,\r\n        income: data.income,\r\n        expense: data.expense,\r\n        profit: data.profit,\r\n        trips: data.trips\r\n      });\r\n    });\r\n\r\n    // Vehicle performance data\r\n    const vehiclePerformance: ChartData[] = [];\r\n    const vehicleData = new Map<string, { profit: number; trips: number }>();\r\n    \r\n    filteredTrips.forEach(trip => {\r\n      const vehicleId = trip.vehicle_id;\r\n      const vehicleName = getVehicleName(vehicleId);\r\n      const income = Number(trip.income_amount) || 0;\r\n      const expense = Number(trip.total_expense) || 0;\r\n      const profit = income - expense;\r\n      \r\n      if (!vehicleData.has(vehicleId)) {\r\n        vehicleData.set(vehicleId, { profit: 0, trips: 0 });\r\n      }\r\n      \r\n      const data = vehicleData.get(vehicleId)!;\r\n      data.profit += profit;\r\n      data.trips += 1;\r\n    });\r\n\r\n    vehicleData.forEach((data, vehicleId) => {\r\n      const vehicleName = getVehicleName(vehicleId);\r\n      vehiclePerformance.push({\r\n        name: vehicleName,\r\n        value: data.profit,\r\n        color: data.profit >= 0 ? '#10B981' : '#EF4444'\r\n      });\r\n    });\r\n\r\n      return {\r\n        profitLossData,\r\n        monthlyTrend: monthlyTrend.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()),\r\n        vehiclePerformance: vehiclePerformance.slice(0, 10) // Top 10 vehicles\r\n      };\r\n    } catch (error) {\r\n      console.error('Error preparing chart data:', error);\r\n      // Return empty data structure to prevent crashes\r\n      return {\r\n        profitLossData: [],\r\n        monthlyTrend: [],\r\n        vehiclePerformance: []\r\n      };\r\n    }\r\n  }, [filteredTrips, pnlSummary]);\r\n\r\n  // Pagination\r\n  const paginatedTrips = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = startIndex + itemsPerPage;\r\n    return filteredTrips.slice(startIndex, endIndex);\r\n  }, [filteredTrips, currentPage, itemsPerPage]);\r\n\r\n  // Sorting\r\n  const sortedTrips = useMemo(() => {\r\n    return [...paginatedTrips].sort((a, b) => {\r\n      const aValue = a[sortField];\r\n      const bValue = b[sortField];\r\n      \r\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }, [paginatedTrips, sortField, sortDirection]);\r\n\r\n  // ✅ PERMISSION CHECKS AFTER ALL HOOKS\r\n  if (permissionsLoading) {\r\n    return <LoadingScreen isLoading={true} />;\r\n  }\r\n\r\n  // Redirect non-owner users - FIXED: use correct permission property\r\n  if (!permissions?.canAccessReports) {\r\n    return <Navigate to=\"/vehicles\" replace />;\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setSearchTerm('');\r\n    setSelectedVehicle('');\r\n    setSelectedDriver('');\r\n    setSelectedWarehouse('');\r\n    setSelectedProfitStatus('');\r\n    setSelectedDatePreset('alltime');\r\n    setCustomStartDate('');\r\n    setCustomEndDate('');\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleSort = (field: keyof Trip) => {\r\n    if (sortField === field) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page: number) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const handleItemsPerPageChange = (items: number) => {\r\n    setItemsPerPage(items);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleTripClick = (trip: Trip) => {\r\n    setSelectedTrip(trip);\r\n    setShowTripModal(true);\r\n  };\r\n\r\n  const printReport = () => {\r\n    window.print();\r\n  };\r\n\r\n  const exportToExcel = () => {\r\n    const exportData = filteredTrips.map(trip => {\r\n      const vehicle = vehicles.find(v => v.id === trip.vehicle_id);\r\n      const driver = drivers.find(d => d.id === trip.driver_id);\r\n      const warehouse = warehouses.find(w => w.id === trip.warehouse_id);\r\n\r\n      return {\r\n        'Trip ID': trip.trip_serial_number,\r\n        'Date': format(parseISO(trip.trip_start_date), 'dd/MM/yyyy'),\r\n        'Vehicle': vehicle?.registration_number || 'N/A',\r\n        'Driver': driver?.name || 'N/A',\r\n        'Warehouse': warehouse?.name || 'N/A',\r\n        'Income (₹)': trip.income_amount || 0,\r\n        'Total Expense (₹)': trip.total_expense || 0,\r\n        'Net Profit (₹)': trip.net_profit || 0,\r\n        'Cost per KM (₹)': trip.cost_per_km || 0,\r\n        'Profit Status': trip.profit_status || 'N/A',\r\n        'Billing Type': trip.billing_type || 'N/A',\r\n        'Freight Rate': trip.freight_rate || 0,\r\n        'Distance (KM)': (trip.end_km || 0) - (trip.start_km || 0)\r\n      };\r\n    });\r\n\r\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Trip P&L Report');\r\n    \r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    \r\n    const fileName = `trip-pnl-report-${format(new Date(), 'yyyy-MM-dd')}.xlsx`;\r\n    saveAs(data, fileName);\r\n    \r\n    toast.success('Report exported successfully');\r\n  };\r\n\r\n  const getVehicleName = (vehicleId: string) => {\r\n    const vehicle = vehicles.find(v => v.id === vehicleId);\r\n    return vehicle?.registration_number || 'N/A';\r\n  };\r\n\r\n  const getDriverName = (driverId: string) => {\r\n    const driver = drivers.find(d => d.id === driverId);\r\n    return driver?.name || 'N/A';\r\n  };\r\n\r\n  const getWarehouseName = (warehouseId: string) => {\r\n    const warehouse = warehouses.find(w => w.id === warehouseId);\r\n    return warehouse?.name || 'N/A';\r\n  };\r\n\r\n  const getProfitStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'profit':\r\n        return 'text-green-600 bg-green-50';\r\n      case 'loss':\r\n        return 'text-red-600 bg-red-50';\r\n      case 'neutral':\r\n        return 'text-gray-600 bg-gray-50';\r\n      default:\r\n        return 'text-gray-600 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Layout title=\"Trip P&L Report\" subtitle=\"Analyze profitability of trips\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600\" />\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  // Show error state if there's an error\r\n  if (error) {\r\n    return (\r\n      <Layout title=\"Trip P&L Report\" subtitle=\"Analyze profitability of trips\">\r\n        <div className=\"max-w-2xl mx-auto\">\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\r\n            <div className=\"flex items-center mb-4\">\r\n              <AlertTriangle className=\"h-6 w-6 text-red-600 mr-2\" />\r\n              <h3 className=\"text-lg font-semibold text-red-800\">Error Loading PNL Reports</h3>\r\n            </div>\r\n            <p className=\"text-red-700 mb-4\">{error}</p>\r\n            \r\n            {debugInfo && (\r\n              <details className=\"mb-4\">\r\n                <summary className=\"cursor-pointer text-sm font-medium text-red-600 mb-2\">\r\n                  Debug Information\r\n                </summary>\r\n                <pre className=\"text-xs bg-red-100 p-3 rounded overflow-auto max-h-40\">\r\n                  {JSON.stringify(debugInfo, null, 2)}\r\n                </pre>\r\n              </details>\r\n            )}\r\n            \r\n            <div className=\"flex gap-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  setError(null);\r\n                  setDebugInfo(null);\r\n                  fetchData();\r\n                }}\r\n                icon={<RefreshCw className=\"h-4 w-4\" />}\r\n              >\r\n                Try Again\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => navigate('/trips')}\r\n                icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n              >\r\n                Back to Trips\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout\r\n      title=\"Trip P&L Report\"\r\n      subtitle=\"Analyze profitability of trips\"\r\n      actions={\r\n        <div className=\"flex gap-3\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setShowCharts(!showCharts)}\r\n            icon={showCharts ? <BarChart3 className=\"h-4 w-4\" /> : <LineChart className=\"h-4 w-4\" />}\r\n          >\r\n            {showCharts ? 'Hide Charts' : 'Show Charts'}\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={printReport}\r\n            icon={<Printer className=\"h-4 w-4\" />}\r\n            disabled={filteredTrips.length === 0}\r\n          >\r\n            Print\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={exportToExcel}\r\n            icon={<Download className=\"h-4 w-4\" />}\r\n            disabled={filteredTrips.length === 0}\r\n          >\r\n            Export\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => navigate('/trips')}\r\n            icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n          >\r\n            Back to Trips\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"space-y-6\">\r\n        {/* Summary Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">Total Income</p>\r\n                <p className=\"text-2xl font-bold text-gray-900 flex items-center mb-2\">\r\n                  <IndianRupee className=\"h-5 w-5 mr-1\" />\r\n                  {pnlSummary.totalIncome.toLocaleString('en-IN')}\r\n                </p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"flex items-center text-green-600\">\r\n                    <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n                    <span className=\"text-sm font-medium\">+12.5%</span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500\">vs last month</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"p-3 bg-green-50 rounded-lg\">\r\n                <TrendingUp className=\"h-6 w-6 text-green-600\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">Total Expense</p>\r\n                <p className=\"text-2xl font-bold text-gray-900 flex items-center mb-2\">\r\n                  <IndianRupee className=\"h-5 w-5 mr-1\" />\r\n                  {pnlSummary.totalExpense.toLocaleString('en-IN')}\r\n                </p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"flex items-center text-red-600\">\r\n                    <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n                    <span className=\"text-sm font-medium\">+8.2%</span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500\">vs last month</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"p-3 bg-red-50 rounded-lg\">\r\n                <TrendingDown className=\"h-6 w-6 text-red-600\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">Net Profit</p>\r\n                <p className={`text-2xl font-bold flex items-center mb-2 ${\r\n                  pnlSummary.netProfit >= 0 ? 'text-green-600' : 'text-red-600'\r\n                }`}>\r\n                  <IndianRupee className=\"h-5 w-5 mr-1\" />\r\n                  {pnlSummary.netProfit.toLocaleString('en-IN')}\r\n                </p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className={`flex items-center ${pnlSummary.netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    <TrendingUp className=\"h-4 w-4 mr-1\" />\r\n                    <span className=\"text-sm font-medium\">{pnlSummary.profitMargin.toFixed(1)}%</span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500\">margin</span>\r\n                </div>\r\n              </div>\r\n              <div className={`p-3 rounded-lg ${\r\n                pnlSummary.netProfit >= 0 ? 'bg-green-50' : 'bg-red-50'\r\n              }`}>\r\n                <DollarSign className={`h-6 w-6 ${\r\n                  pnlSummary.netProfit >= 0 ? 'text-green-600' : 'text-red-600'\r\n                }`} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex-1\">\r\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">Total Trips</p>\r\n                <p className=\"text-2xl font-bold text-gray-900 mb-2\">{pnlSummary.totalTrips}</p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"flex items-center text-blue-600\">\r\n                    <Activity className=\"h-4 w-4 mr-1\" />\r\n                    <span className=\"text-sm font-medium\">\r\n                      {((pnlSummary.profitableTrips / pnlSummary.totalTrips) * 100).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500\">success rate</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\r\n                <BarChart3 className=\"h-6 w-6 text-blue-600\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Charts Section */}\r\n        {showCharts && (\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Monthly Trend Chart */}\r\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\r\n                  <LineChart className=\"h-5 w-5 mr-2 text-blue-600\" />\r\n                  Monthly Trend\r\n                </h3>\r\n              </div>\r\n              <div className=\"h-80\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <AreaChart data={chartData.monthlyTrend}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis />\r\n                    <Tooltip \r\n                      formatter={(value: number, name: string) => [\r\n                        `₹${value.toLocaleString('en-IN')}`, \r\n                        name.charAt(0).toUpperCase() + name.slice(1)\r\n                      ]}\r\n                    />\r\n                    <Area \r\n                      type=\"monotone\" \r\n                      dataKey=\"income\" \r\n                      stackId=\"1\" \r\n                      stroke=\"#10B981\" \r\n                      fill=\"#10B981\" \r\n                      fillOpacity={0.6}\r\n                    />\r\n                    <Area \r\n                      type=\"monotone\" \r\n                      dataKey=\"expense\" \r\n                      stackId=\"2\" \r\n                      stroke=\"#EF4444\" \r\n                      fill=\"#EF4444\" \r\n                      fillOpacity={0.6}\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Profit/Loss Distribution */}\r\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\r\n                  <PieChart className=\"h-5 w-5 mr-2 text-green-600\" />\r\n                  Trip Distribution\r\n                </h3>\r\n              </div>\r\n              <div className=\"h-80\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <RechartsPieChart>\r\n                    <Pie\r\n                      data={chartData.profitLossData}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      labelLine={false}\r\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                      outerRadius={80}\r\n                      fill=\"#8884d8\"\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {chartData.profitLossData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                  </RechartsPieChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Vehicle Performance */}\r\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 lg:col-span-2\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\r\n                  <BarChart3 className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                  Vehicle Performance\r\n                </h3>\r\n              </div>\r\n              <div className=\"h-80\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <RechartsBarChart data={chartData.vehiclePerformance}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip \r\n                      formatter={(value: number) => [`₹${value.toLocaleString('en-IN')}`, 'Profit']}\r\n                    />\r\n                    <Bar dataKey=\"value\" fill=\"#8884d8\">\r\n                      {chartData.vehiclePerformance.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Bar>\r\n                  </RechartsBarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Filters */}\r\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center border-l-2 border-blue-500 pl-2\">\r\n              <Filter className=\"h-5 w-5 mr-2\" />\r\n              Filters\r\n            </h3>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                inputSize=\"sm\"\r\n                onClick={clearFilters}\r\n                icon={<X className=\"h-4 w-4\" />}\r\n              >\r\n                Clear All\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                inputSize=\"sm\"\r\n                onClick={() => setShowFilters(!showFilters)}\r\n                icon={<ChevronDown className={`h-4 w-4 transition-transform ${showFilters ? 'rotate-180' : ''}`} />}\r\n              >\r\n                {showFilters ? 'Hide' : 'Show'} Filters\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Quick Filter Chips */}\r\n          <div className=\"mb-4\">\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <span className=\"text-sm font-medium text-gray-700 mr-2\">Quick Filters:</span>\r\n              <button\r\n                onClick={() => setSelectedProfitStatus('profit')}\r\n                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\r\n                  selectedProfitStatus === 'profit'\r\n                    ? 'bg-green-100 text-green-800 border border-green-200'\r\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                Profitable Only\r\n              </button>\r\n              <button\r\n                onClick={() => setSelectedProfitStatus('loss')}\r\n                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\r\n                  selectedProfitStatus === 'loss'\r\n                    ? 'bg-red-100 text-red-800 border border-red-200'\r\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                Loss Only\r\n              </button>\r\n              <button\r\n                onClick={() => setSelectedDatePreset('last7days')}\r\n                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\r\n                  selectedDatePreset === 'last7days'\r\n                    ? 'bg-blue-100 text-blue-800 border border-blue-200'\r\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                Last 7 Days\r\n              </button>\r\n              <button\r\n                onClick={() => setSelectedDatePreset('last30days')}\r\n                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\r\n                  selectedDatePreset === 'last30days'\r\n                    ? 'bg-blue-100 text-blue-800 border border-blue-200'\r\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                Last 30 Days\r\n              </button>\r\n              <button\r\n                onClick={() => setSelectedDatePreset('thismonth')}\r\n                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\r\n                  selectedDatePreset === 'thismonth'\r\n                    ? 'bg-blue-100 text-blue-800 border border-blue-200'\r\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                This Month\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {showFilters && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Search Trip ID\r\n                </label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter trip ID...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  icon={<Search className=\"h-4 w-4\" />}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Date Range\r\n                </label>\r\n                <Select\r\n                  value={selectedDatePreset}\r\n                  onChange={(e) => setSelectedDatePreset(e.target.value)}\r\n                  options={[\r\n                    ...datePresetOptions.map(option => ({\r\n                      value: option.label.toLowerCase().replace(/\\s+/g, ''),\r\n                      label: option.label\r\n                    })),\r\n                    { value: 'custom', label: 'Custom Range' }\r\n                  ]}\r\n                />\r\n              </div>\r\n\r\n              {selectedDatePreset === 'custom' && (\r\n                <>\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      Start Date\r\n                    </label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      value={customStartDate}\r\n                      onChange={(e) => setCustomStartDate(e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      End Date\r\n                    </label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      value={customEndDate}\r\n                      onChange={(e) => setCustomEndDate(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Vehicle\r\n                </label>\r\n                <Select\r\n                  value={selectedVehicle}\r\n                  onChange={(e) => setSelectedVehicle(e.target.value)}\r\n                  options={[\r\n                    { value: '', label: 'All Vehicles' },\r\n                    ...vehicles.map(vehicle => ({\r\n                      value: vehicle.id,\r\n                      label: vehicle.registration_number\r\n                    }))\r\n                  ]}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Driver\r\n                </label>\r\n                <Select\r\n                  value={selectedDriver}\r\n                  onChange={(e) => setSelectedDriver(e.target.value)}\r\n                  options={[\r\n                    { value: '', label: 'All Drivers' },\r\n                    ...drivers.map(driver => ({\r\n                      value: driver.id,\r\n                      label: driver.name\r\n                    }))\r\n                  ]}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Warehouse\r\n                </label>\r\n                <Select\r\n                  value={selectedWarehouse}\r\n                  onChange={(e) => setSelectedWarehouse(e.target.value)}\r\n                  options={[\r\n                    { value: '', label: 'All Warehouses' },\r\n                    ...warehouses.map(warehouse => ({\r\n                      value: warehouse.id,\r\n                      label: warehouse.name\r\n                    }))\r\n                  ]}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Profit Status\r\n                </label>\r\n                <Select\r\n                  value={selectedProfitStatus}\r\n                  onChange={(e) => setSelectedProfitStatus(e.target.value)}\r\n                  options={[\r\n                    { value: '', label: 'All Status' },\r\n                    { value: 'profit', label: 'Profit' },\r\n                    { value: 'loss', label: 'Loss' },\r\n                    { value: 'neutral', label: 'Neutral' }\r\n                  ]}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Trips Table */}\r\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                Trip Details ({filteredTrips.length} trips)\r\n              </h3>\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <label className=\"text-sm text-gray-600\">Show:</label>\r\n                  <Select\r\n                    value={itemsPerPage.toString()}\r\n                    onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}\r\n                    options={[\r\n                      { value: '10', label: '10' },\r\n                      { value: '25', label: '25' },\r\n                      { value: '50', label: '50' },\r\n                      { value: '100', label: '100' }\r\n                    ]}\r\n                    inputSize=\"sm\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {filteredTrips.length === 0 ? (\r\n            <div className=\"p-12 text-center\">\r\n              <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No trips found</h3>\r\n              <p className=\"text-gray-600 mb-4\">Try adjusting your filters to see more results.</p>\r\n              <Button variant=\"outline\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th \r\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\r\n                      onClick={() => handleSort('trip_serial_number')}\r\n                    >\r\n                      <div className=\"flex items-center gap-1\">\r\n                        Trip Details\r\n                        <ArrowUpDown className=\"h-3 w-3\" />\r\n                      </div>\r\n                    </th>\r\n                    <th \r\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\r\n                      onClick={() => handleSort('vehicle_id')}\r\n                    >\r\n                      <div className=\"flex items-center gap-1\">\r\n                        Vehicle & Driver\r\n                        <ArrowUpDown className=\"h-3 w-3\" />\r\n                      </div>\r\n                    </th>\r\n                    <th \r\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\r\n                      onClick={() => handleSort('income_amount')}\r\n                    >\r\n                      <div className=\"flex items-center gap-1\">\r\n                        Financial Summary\r\n                        <ArrowUpDown className=\"h-3 w-3\" />\r\n                      </div>\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Status\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {sortedTrips.map((trip) => (\r\n                    <tr key={trip.id} className=\"hover:bg-gray-50 cursor-pointer\" onClick={() => handleTripClick(trip)}>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900\">\r\n                            {trip.trip_serial_number}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {format(parseISO(trip.trip_start_date), 'dd MMM yyyy')}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {((trip.end_km || 0) - (trip.start_km || 0))} km\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900\">\r\n                            {getVehicleName(trip.vehicle_id)}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {getDriverName(trip.driver_id)}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {getWarehouseName(trip.warehouse_id)}\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"flex justify-between text-sm\">\r\n                            <span className=\"text-gray-600\">Income:</span>\r\n                            <span className=\"font-medium text-green-600\">\r\n                              ₹{(trip.income_amount || 0).toLocaleString('en-IN')}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex justify-between text-sm\">\r\n                            <span className=\"text-gray-600\">Expense:</span>\r\n                            <span className=\"font-medium text-red-600\">\r\n                              ₹{(trip.total_expense || 0).toLocaleString('en-IN')}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex justify-between text-sm font-semibold border-t pt-1\">\r\n                            <span className=\"text-gray-900\">Profit:</span>\r\n                            <span className={\r\n                              (trip.net_profit || 0) >= 0 ? 'text-green-600' : 'text-red-600'\r\n                            }>\r\n                              ₹{(trip.net_profit || 0).toLocaleString('en-IN')}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\r\n                          getProfitStatusColor(trip.profit_status || '')\r\n                        }`}>\r\n                          {trip.profit_status || 'N/A'}\r\n                        </span>\r\n                        {trip.billing_type && (\r\n                          <div className=\"text-xs text-gray-500 mt-1\">\r\n                            {trip.billing_type}\r\n                          </div>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            inputSize=\"sm\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleTripClick(trip);\r\n                            }}\r\n                            icon={<Eye className=\"h-3 w-3\" />}\r\n                          >\r\n                            View\r\n                          </Button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Pagination */}\r\n          {filteredTrips.length > 0 && (\r\n            <div className=\"px-6 py-4 border-t border-gray-200\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"text-sm text-gray-700\">\r\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredTrips.length)} of {filteredTrips.length} results\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    inputSize=\"sm\"\r\n                    onClick={() => handlePageChange(currentPage - 1)}\r\n                    disabled={currentPage === 1}\r\n                    icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n                  >\r\n                    Previous\r\n                  </Button>\r\n                  \r\n                  <div className=\"flex items-center gap-1\">\r\n                    {Array.from({ length: Math.ceil(filteredTrips.length / itemsPerPage) }, (_, i) => i + 1)\r\n                      .filter(page => \r\n                        page === 1 || \r\n                        page === Math.ceil(filteredTrips.length / itemsPerPage) ||\r\n                        Math.abs(page - currentPage) <= 2\r\n                      )\r\n                      .map((page, index, array) => (\r\n                        <React.Fragment key={page}>\r\n                          {index > 0 && array[index - 1] !== page - 1 && (\r\n                            <span className=\"px-2 text-gray-500\">...</span>\r\n                          )}\r\n                          <Button\r\n                            variant={currentPage === page ? \"primary\" : \"outline\"}\r\n                            inputSize=\"sm\"\r\n                            onClick={() => handlePageChange(page)}\r\n                            className=\"min-w-[40px]\"\r\n                          >\r\n                            {page}\r\n                          </Button>\r\n                        </React.Fragment>\r\n                      ))\r\n                    }\r\n                  </div>\r\n                  \r\n                  <Button\r\n                    variant=\"outline\"\r\n                    inputSize=\"sm\"\r\n                    onClick={() => handlePageChange(currentPage + 1)}\r\n                    disabled={currentPage === Math.ceil(filteredTrips.length / itemsPerPage)}\r\n                    icon={<ChevronRight className=\"h-4 w-4\" />}\r\n                  >\r\n                    Next\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Trip Detail Modal */}\r\n      {showTripModal && selectedTrip && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h3 className=\"text-xl font-semibold text-gray-900\">\r\n                  Trip Details - {selectedTrip.trip_serial_number}\r\n                </h3>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  inputSize=\"sm\"\r\n                  onClick={() => setShowTripModal(false)}\r\n                  icon={<X className=\"h-4 w-4\" />}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                {/* Trip Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"font-medium text-gray-900 border-b pb-2\">Trip Information</h4>\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Trip ID:</span>\r\n                      <span className=\"font-medium\">{selectedTrip.trip_serial_number}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Date:</span>\r\n                      <span className=\"font-medium\">{format(parseISO(selectedTrip.trip_start_date), 'dd MMM yyyy')}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Distance:</span>\r\n                      <span className=\"font-medium\">{((selectedTrip.end_km || 0) - (selectedTrip.start_km || 0))} km</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Vehicle:</span>\r\n                      <span className=\"font-medium\">{getVehicleName(selectedTrip.vehicle_id)}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Driver:</span>\r\n                      <span className=\"font-medium\">{getDriverName(selectedTrip.driver_id)}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Warehouse:</span>\r\n                      <span className=\"font-medium\">{getWarehouseName(selectedTrip.warehouse_id)}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Financial Summary */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"font-medium text-gray-900 border-b pb-2\">Financial Summary</h4>\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Income:</span>\r\n                      <span className=\"font-medium text-green-600\">\r\n                        ₹{(selectedTrip.income_amount || 0).toLocaleString('en-IN')}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Total Expense:</span>\r\n                      <span className=\"font-medium text-red-600\">\r\n                        ₹{(selectedTrip.total_expense || 0).toLocaleString('en-IN')}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between border-t pt-2\">\r\n                      <span className=\"text-gray-900 font-medium\">Net Profit:</span>\r\n                      <span className={`font-bold ${\r\n                        (selectedTrip.net_profit || 0) >= 0 ? 'text-green-600' : 'text-red-600'\r\n                      }`}>\r\n                        ₹{(selectedTrip.net_profit || 0).toLocaleString('en-IN')}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Cost per KM:</span>\r\n                      <span className=\"font-medium\">\r\n                        ₹{(selectedTrip.cost_per_km || 0).toFixed(2)}/km\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"text-gray-600\">Billing Type:</span>\r\n                      <span className=\"font-medium\">{selectedTrip.billing_type || 'N/A'}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Expense Breakdown */}\r\n              <div className=\"mt-6\">\r\n                <h4 className=\"font-medium text-gray-900 border-b pb-2 mb-4\">Expense Breakdown</h4>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Fuel Cost</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.total_fuel_cost || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Driver Expense</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.driver_expense || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Unloading</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.unloading_expense || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Road/RTO</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.road_rto_expense || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Miscellaneous</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.miscellaneous_expense || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                    <p className=\"text-xs text-gray-500\">Breakdown</p>\r\n                    <p className=\"font-medium\">₹{(selectedTrip.breakdown_expense || 0).toLocaleString('en-IN')}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TripPnlReportsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\TripsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\VehiclePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\VehiclesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\ActivityLogPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\AdminDriversPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\AdminTripsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSummaryMetrics'. Either include it or remove the dependency array.","line":204,"column":6,"nodeType":"ArrayExpression","endLine":204,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSummaryMetrics]","fix":{"range":[7166,7168],"text":"[fetchSummaryMetrics]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSummaryMetrics'. Either include it or remove the dependency array.","line":211,"column":6,"nodeType":"ArrayExpression","endLine":211,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSummaryMetrics, filters]","fix":{"range":[7348,7357],"text":"[fetchSummaryMetrics, filters]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Layout from '../../components/layout/Layout'; \r\nimport TripsTable from '../../components/admin/TripsTable';\r\nimport TripsSummary from '../../components/admin/TripsSummary';\r\nimport ExportOptionsModal, { ExportOptions } from '../../components/admin/ExportOptionsModal';\r\nimport { Trip, Vehicle, Driver, Warehouse, Destination } from '@/types';\r\nimport { getTrips, getVehicles, getWarehouses, getDestinations, updateTrip } from '../../utils/storage';\r\nimport { getDrivers } from '../../utils/api/drivers';\r\nimport { generateCSV, downloadCSV, parseCSV } from '../../utils/csvParser';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport { forceDataRefresh, testDatabaseConnection, clearCacheAndRefresh } from '../../utils/forceDataRefresh';\r\nimport { format, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth, \r\n         startOfYear, endOfYear, subWeeks, subMonths, subYears } from 'date-fns';\r\nimport Button from '../../components/ui/Button';\r\nimport Input from '../../components/ui/Input';\r\nimport Select from '../../components/ui/Select';\r\nimport { Calendar, ChevronDown, Filter, ChevronLeft, ChevronRight, X, RefreshCw, Search, FileText, Download, ChevronUp, Upload } from 'lucide-react';\r\nimport UnifiedSearchBar from '../../components/trips/UnifiedSearchBar';\r\nimport { comprehensiveSearchTrips } from '../../utils/tripSearch';\r\nimport * as XLSX from 'xlsx';\r\nimport { toast } from 'react-toastify';\r\nimport { fixAllExistingMileage, fixMileageForSpecificVehicle } from '../../utils/fixExistingMileage';\r\n\r\ninterface TripSummaryMetrics {\r\n  totalExpenses: number;\r\n  avgDistance: number;\r\n  tripCount: number;\r\n  meanMileage: number;\r\n  topDriver: {\r\n    id: string;\r\n    name: string;\r\n    totalDistance: number;\r\n    tripCount: number;\r\n  } | null;\r\n  topVehicle: {\r\n    id: string;\r\n    registrationNumber: string;\r\n    tripCount: number;\r\n  } | null;\r\n}\r\n\r\nconst AdminTripsPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [trips, setTrips] = useState<Trip[]>([]);\r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [drivers, setDrivers] = useState<Driver[]>([]);\r\n  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);\r\n  const [destinations, setDestinations] = useState<Destination[]>([]);\r\n  const [showExportModal, setShowExportModal] = useState(false);\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [summaryLoading, setSummaryLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [fixingMileage, setFixingMileage] = useState(false);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [searchResult, setSearchResult] = useState<any>(null);\r\n  const importInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const vehiclesMap = useMemo(() => new Map(vehicles.map(v => [v.id, v])), [vehicles]);\r\n  const driversMap = useMemo(() => new Map(drivers.map(d => [d.id, d])), [drivers]);\r\n  const destinationsMap = useMemo(() => new Map(destinations.map(d => [d.id, d.name])), [destinations]);\r\n  \r\n  // Date preset state\r\n  const [datePreset, setDatePreset] = useState('last30');\r\n\r\n  // Pagination state\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const tripsPerPage = 50; // 50 trips per page\r\n\r\n  const [summaryMetrics, setSummaryMetrics] = useState<TripSummaryMetrics>({\r\n    totalExpenses: 0,\r\n    avgDistance: 0,\r\n    tripCount: 0,\r\n    meanMileage: 0,\r\n    topDriver: null,\r\n    topVehicle: null\r\n  });\r\n\r\n  // Filter state\r\n  const [filters, setFilters] = useState({\r\n    dateRange: {\r\n      start: format(subDays(new Date(), 30), 'yyyy-MM-dd'),\r\n      end: format(new Date(), 'yyyy-MM-dd')\r\n    },\r\n    vehicleId: '',\r\n    driverId: '',\r\n    warehouseId: '',\r\n    tripType: '',\r\n    search: ''\r\n  });\r\n\r\n  // Date preset options\r\n  const datePresetOptions = [\r\n    { value: 'today', label: 'Today' },\r\n    { value: 'yesterday', label: 'Yesterday' },\r\n    { value: 'thisWeek', label: 'This Week' },\r\n    { value: 'lastWeek', label: 'Last Week' },\r\n    { value: 'thisMonth', label: 'This Month' },\r\n    { value: 'lastMonth', label: 'Last Month' },\r\n    { value: 'thisYear', label: 'This Year' },\r\n    { value: 'lastYear', label: 'Last Year' },\r\n    { value: 'last7', label: 'Last 7 Days' },\r\n    { value: 'last30', label: 'Last 30 Days' },\r\n    { value: 'allTime', label: 'All Time' },\r\n    { value: 'custom', label: 'Custom Range' }\r\n  ];\r\n\r\n  // Handle date preset changes\r\n  useEffect(() => {\r\n    const today = new Date();\r\n    let start: Date, end: Date;\r\n    \r\n    switch (datePreset) {\r\n      case 'today':\r\n        start = end = today;\r\n        break;\r\n      case 'yesterday':\r\n        start = end = subDays(today, 1);\r\n        break;\r\n      case 'thisWeek':\r\n        start = startOfWeek(today);\r\n        end = endOfWeek(today);\r\n        break;\r\n      case 'lastWeek':\r\n        start = startOfWeek(subWeeks(today, 1));\r\n        end = endOfWeek(subWeeks(today, 1));\r\n        break;\r\n      case 'thisMonth':\r\n        start = startOfMonth(today);\r\n        end = endOfMonth(today);\r\n        break;\r\n      case 'lastMonth':\r\n        start = startOfMonth(subMonths(today, 1));\r\n        end = endOfMonth(subMonths(today, 1));\r\n        break;\r\n      case 'thisYear':\r\n        start = startOfYear(today);\r\n        end = endOfYear(today);\r\n        break;\r\n      case 'lastYear':\r\n        start = startOfYear(subYears(today, 1));\r\n        end = endOfYear(subYears(today, 1));\r\n        break;\r\n      case 'last7':\r\n        start = subDays(today, 6);\r\n        end = today;\r\n        break;\r\n      case 'last30':\r\n        start = subDays(today, 29);\r\n        end = today;\r\n        break;\r\n      case 'allTime':\r\n        start = new Date('2020-01-01');\r\n        end = today;\r\n        break;\r\n      case 'custom':\r\n        // Don't update dates for custom\r\n        return;\r\n      default:\r\n        start = subDays(today, 29);\r\n        end = today;\r\n    }\r\n    \r\n    setFilters(prev => ({\r\n      ...prev,\r\n      dateRange: {\r\n        start: format(start, 'yyyy-MM-dd'),\r\n        end: format(end, 'yyyy-MM-dd')\r\n      }\r\n    }));\r\n  }, [datePreset]);\r\n\r\n  // Fetch data on load\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setSummaryLoading(true);\r\n\r\n        const [tripsData, vehiclesData, driversData, warehousesData, destinationsData] = await Promise.all([\r\n          getTrips(),\r\n          getVehicles(),\r\n          getDrivers(),\r\n          getWarehouses(),\r\n          getDestinations()\r\n        ]);\r\n        setTrips(tripsData);\r\n        setVehicles(vehiclesData);\r\n        setDrivers(driversData);\r\n        setWarehouses(warehousesData);\r\n        setDestinations(destinationsData);\r\n\r\n        // Fetch summary metrics\r\n        await fetchSummaryMetrics();\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setLoading(false);\r\n        setSummaryLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Fetch summary metrics when filters change\r\n  useEffect(() => {\r\n    fetchSummaryMetrics();\r\n    // Reset to first page when filters change\r\n    setCurrentPage(1);\r\n  }, [filters]);\r\n\r\n  // Enhanced refresh data function with force refresh capability\r\n  const refreshData = async (forceRefresh = false) => {\r\n    try {\r\n      setRefreshing(true);\r\n      \r\n      if (forceRefresh) {\r\n        console.log('🔄 Using force refresh...');\r\n        const result = await forceDataRefresh();\r\n        \r\n        if (result.success) {\r\n          // Get fresh data after force refresh\r\n          const [tripsData, vehiclesData, driversData, warehousesData, destinationsData] = await Promise.all([\r\n            getTrips(),\r\n            getVehicles(),\r\n            getDrivers(),\r\n            getWarehouses(),\r\n            getDestinations()\r\n          ]);\r\n          setTrips(tripsData);\r\n          setVehicles(vehiclesData);\r\n          setDrivers(driversData);\r\n          setWarehouses(warehousesData);\r\n          setDestinations(destinationsData);\r\n          \r\n          await fetchSummaryMetrics();\r\n          toast.success(`Force refresh completed: ${result.tripsCount} trips, ${result.vehiclesCount} vehicles, ${result.driversCount} drivers`);\r\n        } else {\r\n          toast.error(`Force refresh failed: ${result.error}`);\r\n        }\r\n      } else {\r\n        // Normal refresh\r\n        const [tripsData, vehiclesData, driversData, warehousesData, destinationsData] = await Promise.all([\r\n          getTrips(),\r\n          getVehicles(),\r\n          getDrivers(),\r\n          getWarehouses(),\r\n          getDestinations()\r\n        ]);\r\n        setTrips(tripsData);\r\n        setVehicles(vehiclesData);\r\n        setDrivers(driversData);\r\n        setWarehouses(warehousesData);\r\n        setDestinations(destinationsData);\r\n        \r\n        await fetchSummaryMetrics();\r\n        toast.success(\"Data refreshed successfully\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n      toast.error(\"Failed to refresh data\");\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Test database connection\r\n  const testConnection = async () => {\r\n    const isConnected = await testDatabaseConnection();\r\n    if (isConnected) {\r\n      toast.success(\"Database connection is working\");\r\n    } else {\r\n      toast.error(\"Database connection failed - check console for details\");\r\n    }\r\n  };\r\n\r\n  // Clear cache and force refresh\r\n  const clearCacheAndForceRefresh = async () => {\r\n    const result = await clearCacheAndRefresh();\r\n    if (result.success) {\r\n      // Update local state\r\n      const [tripsData, vehiclesData, driversData, warehousesData, destinationsData] = await Promise.all([\r\n        getTrips(),\r\n        getVehicles(),\r\n        getDrivers(),\r\n        getWarehouses(),\r\n        getDestinations()\r\n      ]);\r\n      setTrips(tripsData);\r\n      setVehicles(vehiclesData);\r\n      setDrivers(driversData);\r\n      setWarehouses(warehousesData);\r\n      setDestinations(destinationsData);\r\n      \r\n      await fetchSummaryMetrics();\r\n    }\r\n  };\r\n\r\n  // Fix mileage calculations for all trips\r\n  const handleFixMileage = async () => {\r\n    const confirmed = window.confirm(\r\n      'This will recalculate mileage for all existing trips using the tank-to-tank method. ' +\r\n      'This may take a few minutes. Do you want to continue?'\r\n    );\r\n    \r\n    if (!confirmed) return;\r\n\r\n    setFixingMileage(true);\r\n    try {\r\n      const result = await fixAllExistingMileage();\r\n      if (result.success) {\r\n        toast.success(result.message);\r\n        // Refresh the data to show updated mileage\r\n        await refreshData();\r\n      } else {\r\n        toast.error(result.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fixing mileage:', error);\r\n      toast.error('Failed to fix mileage calculations');\r\n    } finally {\r\n      setFixingMileage(false);\r\n    }\r\n  };\r\n\r\n  // Handle smart search with field selection\r\n  const handleSmartSearch = async (searchTerm: string, searchField?: string) => {\r\n    if (searchTerm.length < 2) {\r\n      // Clear search if term is too short\r\n      setSearchResult(null);\r\n      return;\r\n    }\r\n    \r\n    setIsSearching(true);\r\n    try {\r\n      const result = await comprehensiveSearchTrips(\r\n        searchTerm,\r\n        searchField,\r\n        trips,\r\n        vehicles,\r\n        drivers,\r\n        warehouses,\r\n        { page: currentPage, limit: tripsPerPage }\r\n      );\r\n      \r\n      setSearchResult(result);\r\n      \r\n      // Show appropriate message based on field\r\n      if (result.totalCount === 0) {\r\n        toast.info(`No trips found matching \"${searchTerm}\"${searchField ? ` in ${searchField}` : ''}`);\r\n      } else {\r\n        const fieldName = searchField ? ` in ${searchField}` : ' in all fields';\r\n        toast.success(`Found ${result.totalCount} trips${fieldName}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Smart search error:', error);\r\n      toast.error('Search failed. Please try again.');\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  // Filter trips based on current filters\r\n  const filteredTrips = useMemo(() => {\r\n    // If we have search results, use them instead of basic filtering\r\n    if (searchResult && searchResult.trips) {\r\n      return searchResult.trips;\r\n    }\r\n    \r\n    return trips.filter(trip => {\r\n      // Search filter\r\n      if (filters.search) {\r\n        const vehicle = vehiclesMap.get(trip.vehicle_id);\r\n        const driver = driversMap.get(trip.driver_id);\r\n        \r\n        const searchTerm = filters.search.toLowerCase();\r\n        const searchFields = [\r\n          trip.trip_serial_number,\r\n          vehicle?.registration_number,\r\n          driver?.name,\r\n        ].map(field => field?.toLowerCase());\r\n        \r\n        if (!searchFields.some(field => field?.includes(searchTerm))) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Date range filter\r\n      if (filters.dateRange.start) {\r\n        const startDate = new Date(filters.dateRange.start);\r\n        const tripStartDate = new Date(trip.trip_start_date);\r\n        if (tripStartDate < startDate) {\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      if (filters.dateRange.end) {\r\n        const endDate = new Date(filters.dateRange.end);\r\n        endDate.setHours(23, 59, 59, 999); // End of day\r\n        const tripEndDate = new Date(trip.trip_end_date);\r\n        if (tripEndDate > endDate) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Vehicle filter\r\n      if (filters.vehicleId && trip.vehicle_id !== filters.vehicleId) {\r\n        return false;\r\n      }\r\n\r\n      // Driver filter\r\n      if (filters.driverId && trip.driver_id !== filters.driverId) {\r\n        return false;\r\n      }\r\n\r\n      // Warehouse filter\r\n      if (filters.warehouseId && trip.warehouse_id !== filters.warehouseId) {\r\n        return false;\r\n      }\r\n\r\n      // Trip type filter\r\n      if (filters.tripType) {\r\n        if (filters.tripType === 'two_way' && !(Array.isArray(trip.destinations) && trip.destinations.length > 1)) {\r\n          return false;\r\n        }\r\n        if (filters.tripType === 'one_way' && !(Array.isArray(trip.destinations) && trip.destinations.length === 1)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }, [trips, vehiclesMap, driversMap, filters, searchResult]);\r\n\r\n  // Calculate pagination\r\n  const indexOfLastTrip = currentPage * tripsPerPage;\r\n  const indexOfFirstTrip = indexOfLastTrip - tripsPerPage;\r\n  const currentTrips = filteredTrips.slice(indexOfFirstTrip, indexOfLastTrip);\r\n  const totalPages = Math.ceil(filteredTrips.length / tripsPerPage);\r\n  \r\n  // Go to a specific page\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n\r\n  // Previous page\r\n  const goToPreviousPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n  \r\n  // Next page\r\n  const goToNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const fetchSummaryMetrics = async () => {\r\n    try {\r\n      setSummaryLoading(true);\r\n      \r\n      // Ensure dates are properly formatted\r\n      const startDate = filters.dateRange.start ? \r\n        new Date(filters.dateRange.start).toISOString() : null;\r\n      const endDate = filters.dateRange.end ? \r\n        new Date(filters.dateRange.end + 'T23:59:59').toISOString() : null;\r\n      \r\n      const { data, error } = await supabase.rpc('get_trip_summary_metrics', {\r\n        start_date: startDate,\r\n        end_date: endDate,\r\n        p_vehicle_id: filters.vehicleId || null,\r\n        p_driver_id: filters.driverId || null,\r\n        p_warehouse_id: filters.warehouseId || null,\r\n        p_trip_type: filters.tripType || null\r\n      });\r\n      \r\n      if (error) {\r\n        console.error(\"Error fetching summary metrics:\", error);\r\n        // Fallback to local calculation\r\n        calculateMetricsLocally();\r\n      } else if (data) {\r\n        // Handle both array and object responses\r\n        const metricsData = Array.isArray(data) ? data[0] : data;\r\n        \r\n        if (metricsData) {\r\n          setSummaryMetrics({\r\n            totalExpenses: metricsData.total_expenses || 0,\r\n            avgDistance: metricsData.avg_distance || 0,\r\n            tripCount: metricsData.trip_count || 0,\r\n            meanMileage: metricsData.mean_mileage || 0,\r\n            topDriver: metricsData.top_driver ? {\r\n              id: metricsData.top_driver.id,\r\n              name: metricsData.top_driver.name,\r\n              totalDistance: metricsData.top_driver.totalDistance || 0,\r\n              tripCount: metricsData.top_driver.tripCount || 0\r\n            } : null,\r\n            topVehicle: metricsData.top_vehicle ? {\r\n              id: metricsData.top_vehicle.id,\r\n              registrationNumber: metricsData.top_vehicle.registrationNumber,\r\n              tripCount: metricsData.top_vehicle.tripCount || 0\r\n            } : null\r\n          });\r\n        } else {\r\n          calculateMetricsLocally();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Exception fetching summary metrics:\", error);\r\n      calculateMetricsLocally();\r\n    } finally {\r\n      setSummaryLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateMetricsLocally = () => {\r\n    const filtered = filteredTrips;\r\n    \r\n    // Calculate total expenses\r\n    const totalExpenses = filtered.reduce((sum, trip) => {\r\n      const fuel = trip.total_fuel_cost || 0;\r\n      const road = trip.total_road_expenses || 0;\r\n      const unloading = trip.unloading_expense || 0;\r\n      const driver = trip.driver_expense || 0;\r\n      const rto = trip.road_rto_expense || 0;\r\n      const breakdown = trip.breakdown_expense || 0;\r\n      const misc = trip.miscellaneous_expense || 0;\r\n      return sum + fuel + road + unloading + driver + rto + breakdown + misc;\r\n    }, 0);\r\n    \r\n    // Calculate average distance\r\n    const totalDistance = filtered.reduce((sum, trip) => \r\n      sum + (trip.end_km - trip.start_km), 0\r\n    );\r\n    const avgDistance = filtered.length > 0 ? totalDistance / filtered.length : 0;\r\n    \r\n    // Calculate mean mileage (only from trips with valid mileage)\r\n    const tripsWithMileage = filtered.filter(trip => \r\n      trip.calculated_kmpl && trip.calculated_kmpl > 0\r\n    );\r\n    const meanMileage = tripsWithMileage.length > 0 ?\r\n      tripsWithMileage.reduce((sum, trip) => sum + (trip.calculated_kmpl || 0), 0) / tripsWithMileage.length : 0;\r\n    \r\n    // Calculate top driver\r\n    const driverStats: Record<string, any> = {};\r\n    filtered.forEach(trip => {\r\n      if (trip.driver_id) {\r\n        if (!driverStats[trip.driver_id]) {\r\n          const driver = driversMap.get(trip.driver_id);\r\n          driverStats[trip.driver_id] = {\r\n            id: trip.driver_id,\r\n            name: driver?.name || 'Unknown',\r\n            tripCount: 0,\r\n            totalDistance: 0\r\n          };\r\n        }\r\n        driverStats[trip.driver_id].tripCount++;\r\n        driverStats[trip.driver_id].totalDistance += (trip.end_km - trip.start_km);\r\n      }\r\n    });\r\n    \r\n    // Calculate top vehicle\r\n    const vehicleStats: Record<string, any> = {};\r\n    filtered.forEach(trip => {\r\n      if (trip.vehicle_id) {\r\n        if (!vehicleStats[trip.vehicle_id]) {\r\n          const vehicle = vehiclesMap.get(trip.vehicle_id);\r\n          vehicleStats[trip.vehicle_id] = {\r\n            id: trip.vehicle_id,\r\n            registrationNumber: vehicle?.registration_number || 'Unknown',\r\n            tripCount: 0\r\n          };\r\n        }\r\n        vehicleStats[trip.vehicle_id].tripCount++;\r\n      }\r\n    });\r\n    \r\n    const topDriver = Object.values(driverStats)\r\n      .sort((a, b) => b.tripCount - a.tripCount)[0] || null;\r\n      \r\n    const topVehicle = Object.values(vehicleStats)\r\n      .sort((a, b) => b.tripCount - a.tripCount)[0] || null;\r\n    \r\n    setSummaryMetrics({\r\n      totalExpenses,\r\n      avgDistance,\r\n      tripCount: filtered.length,\r\n      meanMileage,\r\n      topDriver,\r\n      topVehicle\r\n    });\r\n  };\r\n\r\n  const handleUpdateTrip = async (tripId: string, updates: Partial<Trip>) => {\r\n    const updatedTrip = await updateTrip(tripId, updates);\r\n    if (updatedTrip) {\r\n      setTrips(prev => \r\n        prev.map(trip => \r\n          trip.id === tripId ? updatedTrip : trip\r\n        )\r\n      );\r\n      // Refresh summary metrics after update\r\n      fetchSummaryMetrics();\r\n    }\r\n  };\r\n\r\n  const handleDeleteTrip = async (tripId: string) => {\r\n    try {\r\n      // Delete the trip from Supabase\r\n      const { error } = await supabase\r\n        .from('trips')\r\n        .delete()\r\n        .eq('id', tripId);\r\n\r\n      if (error) {\r\n        throw new Error(`Failed to delete trip: ${error.message}`);\r\n      }\r\n\r\n      // If successful, update the trips list\r\n      setTrips(prev => prev.filter(trip => trip.id !== tripId));\r\n      toast.success('Trip deleted successfully');\r\n      \r\n      // Refresh summary metrics\r\n      fetchSummaryMetrics();\r\n      \r\n      // If the last trip on the page was deleted, go to previous page\r\n      if (currentTrips.length === 1 && currentPage > 1) {\r\n        setCurrentPage(currentPage - 1);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting trip:\", error);\r\n      toast.error(`Error deleting trip: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  };\r\n\r\n  const handleFiltersChange = (newFilters: Partial<typeof filters>) => {\r\n    if (newFilters.dateRange && datePreset !== 'custom') {\r\n      // If manually changing dates, switch to custom preset\r\n      setDatePreset('custom');\r\n    }\r\n    \r\n    setFilters(prev => ({\r\n      ...prev,\r\n      ...newFilters\r\n    }));\r\n  };\r\n  \r\n  const clearFilters = () => {\r\n    setFilters({\r\n      dateRange: {\r\n        start: format(subDays(new Date(), 30), 'yyyy-MM-dd'),\r\n        end: format(new Date(), 'yyyy-MM-dd')\r\n      },\r\n      vehicleId: '',\r\n      driverId: '',\r\n      warehouseId: '',\r\n      tripType: '',\r\n      search: ''\r\n    });\r\n    setDatePreset('last30');\r\n    setSearchResult(null); // Clear search results\r\n  };\r\n\r\n  const handleExport = async () => {\r\n    try {\r\n      // Use filtered trips from the current view\r\n      const tripsToExport = filteredTrips.length > 0 ? filteredTrips : trips;\r\n      \r\n      if (tripsToExport.length === 0) {\r\n        toast.error('No trips available to export');\r\n        return;\r\n      }\r\n      \r\n      // Get destinations for name mapping\r\n      const destinations = await getDestinations();\r\n      const destinationMap = new Map(destinations.map(d => [d.id, d.name]));\r\n      \r\n      console.log('Exporting trips:', tripsToExport.length);\r\n      \r\n      const exportData = tripsToExport.map(trip => {\r\n        const vehicle = vehiclesMap.get(trip.vehicle_id);\r\n        const driver = driversMap.get(trip.driver_id);\r\n        const warehouse = warehouses.find(w => w.id === trip.warehouse_id);\r\n        \r\n        // Calculate distance\r\n        const distance = (trip.end_km || 0) - (trip.start_km || 0);\r\n        \r\n        // Handle fuel calculations\r\n        let fuelCost = trip.total_fuel_cost || 0;\r\n        let fuelRatePerLiter = trip.fuel_rate_per_liter || 0;\r\n        \r\n        // Calculate fuel rate if we have cost and quantity\r\n        if (fuelCost > 0 && trip.fuel_quantity > 0 && !fuelRatePerLiter) {\r\n          fuelRatePerLiter = fuelCost / trip.fuel_quantity;\r\n        }\r\n        \r\n        // If still no fuel rate but we have quantity, use default rate\r\n        if (trip.fuel_quantity > 0 && !fuelRatePerLiter && fuelCost === 0) {\r\n          fuelRatePerLiter = 93.33; // Average diesel price\r\n          fuelCost = trip.fuel_quantity * fuelRatePerLiter;\r\n        }\r\n        \r\n        // Calculate PROPER total expense INCLUDING all components\r\n        const totalExpense = \r\n          (fuelCost || 0) +\r\n          (trip.total_road_expenses || 0) +\r\n          (trip.unloading_expense || 0) +\r\n          (trip.driver_expense || 0) +\r\n          (trip.road_rto_expense || 0) +\r\n          (trip.breakdown_expense || 0) +\r\n          (trip.miscellaneous_expense || 0);\r\n        \r\n        // Convert destination IDs to names\r\n        let destinationNames = '';\r\n        if (trip.destinations && Array.isArray(trip.destinations)) {\r\n          destinationNames = trip.destinations\r\n            .map(destId => {\r\n              // Check if it's already a name or needs mapping\r\n              if (typeof destId === 'string' && destId.includes('-')) {\r\n                // It's a UUID, map it\r\n                return destinationMap.get(destId) || 'Unknown';\r\n              }\r\n              return destId; // It's already a name\r\n            })\r\n            .join(', ');\r\n        } else if (trip.destinations) {\r\n          destinationNames = destinationMap.get(trip.destinations) || trip.destinations;\r\n        }\r\n        \r\n        // Determine trip type correctly based on short_trip flag\r\n        let tripType = 'One Way';\r\n        if (trip.short_trip === true) {\r\n          tripType = 'Return Trip';\r\n        } else if (trip.return_trip === true) {\r\n          tripType = 'Return Trip';\r\n        } else if (Array.isArray(trip.destinations) && trip.destinations.length > 1) {\r\n          tripType = 'Multi-Stop';\r\n        }\r\n        \r\n        // Calculate mileage if not present\r\n        let mileage = trip.calculated_kmpl || 0;\r\n        if (!mileage && trip.fuel_quantity > 0) {\r\n          mileage = distance / trip.fuel_quantity;\r\n        }\r\n        \r\n        return {\r\n          'TRIP ID': trip.trip_serial_number || '',\r\n          'START DATE': trip.trip_start_date ? \r\n            new Date(trip.trip_start_date).toLocaleDateString('en-GB') : '',\r\n          'END DATE': trip.trip_end_date ? \r\n            new Date(trip.trip_end_date).toLocaleDateString('en-GB') : '',\r\n          'VEHICLE': vehicle?.registration_number || '',\r\n          'DRIVER': driver?.name || '',\r\n          'SOURCE WAREHOUSE': warehouse?.name || '',\r\n          'DESTINATIONS': destinationNames || 'N/A',\r\n          'START KM': trip.start_km || 0,\r\n          'END KM': trip.end_km || 0,\r\n          'DISTANCE (KM)': distance,\r\n          'FUEL QUANTITY (L)': parseFloat(trip.fuel_quantity || 0).toFixed(2),\r\n          'FUEL RATE (₹/L)': parseFloat(fuelRatePerLiter || 0).toFixed(2),\r\n          'FUEL COST (₹)': parseFloat(fuelCost || 0).toFixed(2),\r\n          'MILEAGE (km/L)': parseFloat(mileage || 0).toFixed(2),\r\n          'ROAD EXPENSES (₹)': parseFloat(trip.total_road_expenses || 0).toFixed(2),\r\n          'UNLOADING EXPENSE (₹)': parseFloat(trip.unloading_expense || 0).toFixed(2),\r\n          'DRIVER EXPENSE (₹)': parseFloat(trip.driver_expense || 0).toFixed(2),\r\n          'RTO EXPENSE (₹)': parseFloat(trip.road_rto_expense || 0).toFixed(2),\r\n          'BREAKDOWN EXPENSE (₹)': parseFloat(trip.breakdown_expense || 0).toFixed(2),\r\n          'MISC EXPENSE (₹)': parseFloat(trip.miscellaneous_expense || 0).toFixed(2),\r\n          'TOTAL EXPENSE (₹)': parseFloat(totalExpense).toFixed(2),\r\n          'TRIP TYPE': tripType,\r\n          'BILLING TYPE': trip.billing_type || 'N/A',\r\n          'INCOME (₹)': parseFloat(trip.income_amount || 0).toFixed(2),\r\n          'NET PROFIT/LOSS (₹)': parseFloat((trip.income_amount || 0) - totalExpense).toFixed(2)\r\n        };\r\n      });\r\n      \r\n      // Create Excel workbook\r\n      const worksheet = XLSX.utils.json_to_sheet(exportData);\r\n      \r\n      // Set column widths for better readability\r\n      const colWidths = [\r\n        { wch: 15 }, // Trip ID\r\n        { wch: 12 }, // Start Date\r\n        { wch: 12 }, // End Date\r\n        { wch: 15 }, // Vehicle\r\n        { wch: 25 }, // Driver\r\n        { wch: 25 }, // Source Warehouse\r\n        { wch: 35 }, // Destinations\r\n        { wch: 10 }, // Start KM\r\n        { wch: 10 }, // End KM\r\n        { wch: 12 }, // Distance\r\n        { wch: 14 }, // Fuel Quantity\r\n        { wch: 12 }, // Fuel Rate\r\n        { wch: 12 }, // Fuel Cost\r\n        { wch: 12 }, // Mileage\r\n        { wch: 14 }, // Road Expenses\r\n        { wch: 16 }, // Unloading\r\n        { wch: 14 }, // Driver Expense\r\n        { wch: 12 }, // RTO\r\n        { wch: 14 }, // Breakdown\r\n        { wch: 12 }, // Misc\r\n        { wch: 14 }, // Total Expense\r\n        { wch: 12 }, // Trip Type\r\n        { wch: 12 }, // Billing Type\r\n        { wch: 12 }, // Income\r\n        { wch: 16 }, // Net Profit/Loss\r\n      ];\r\n      worksheet['!cols'] = colWidths;\r\n      \r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Trips Report');\r\n      \r\n      const fileName = `trips-export-${format(new Date(), 'yyyy-MM-dd-HHmmss')}.xlsx`;\r\n      XLSX.writeFile(workbook, fileName);\r\n      \r\n      toast.success(`Successfully exported ${exportData.length} trips!`);\r\n      \r\n    } catch (error) {\r\n      console.error('Export failed:', error);\r\n      toast.error('Failed to export trips. Please check console for details.');\r\n    }\r\n  };\r\n\r\n  const handleImport = async (file: File) => {\r\n    try {\r\n      const data = await parseCSV(file);\r\n      // Process imported data\r\n      toast.info(`Imported ${data.length} trips. Processing...`);\r\n      // You'd normally process these and add to the database\r\n      // For now, we're just showing a success message\r\n      toast.success(`Successfully processed ${data.length} trips`);\r\n    } catch (error) {\r\n      console.error('Error importing file:', error);\r\n      toast.error('Failed to import trips');\r\n    }\r\n  };\r\n\r\n  const handleImportInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      handleImport(file);\r\n      event.target.value = '';\r\n    }\r\n  };\r\n\r\n  const getActiveFiltersText = () => {\r\n    const parts = [];\r\n    \r\n    if (filters.vehicleId) {\r\n      const vehicle = vehiclesMap.get(filters.vehicleId);\r\n      parts.push(`Vehicle: ${vehicle?.registration_number || 'Unknown'}`);\r\n    } else {\r\n      parts.push('Vehicle: All');\r\n    }\r\n    \r\n    if (filters.driverId) {\r\n      const driver = driversMap.get(filters.driverId);\r\n      parts.push(`Driver: ${driver?.name || 'Unknown'}`);\r\n    } else {\r\n      parts.push('Driver: All');\r\n    }\r\n    \r\n    if (filters.dateRange.start && filters.dateRange.end) {\r\n      parts.push(`Dates: ${format(new Date(filters.dateRange.start), 'dd MMM yyyy')} - ${format(new Date(filters.dateRange.end), 'dd MMM yyyy')}`);\r\n    }\r\n    \r\n    return parts.join(', ');\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {/* Page Header */}\r\n      <div className=\"rounded-xl border bg-white dark:bg-white px-4 py-3 shadow-sm mb-6\">\r\n        <div className=\"flex items-center group\">\r\n          <FileText className=\"h-5 w-5 mr-2 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 transition\" />\r\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">Trip Management</h1>\r\n        </div>\r\n        <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1 ml-7\">View and manage all trip records</p>\r\n      </div>\r\n\r\n      {/* Simplified Filters Section */}\r\n      {!loading && (\r\n        <div className=\"bg-white rounded-lg shadow-sm mb-6\">\r\n          <div className=\"px-4 py-3 border-b border-gray-100\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <button\r\n                onClick={() => setShowFilters(!showFilters)}\r\n                className=\"flex items-center gap-2 text-gray-700 hover:text-blue-600 transition-colors font-medium\"\r\n              >\r\n                <Filter className=\"h-5 w-5\" />\r\n                <span>Filters</span>\r\n                {showFilters ? \r\n                  <ChevronUp className=\"h-4 w-4\" /> : \r\n                  <ChevronDown className=\"h-4 w-4\" />\r\n                }\r\n              </button>\r\n              \r\n              <div className=\"flex items-center gap-2\">\r\n                {/* Active filter count badge */}\r\n                {(filters.search || filters.vehicleId || filters.driverId || filters.warehouseId || filters.tripType) && (\r\n                  <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-700 rounded-full\">\r\n                    {[filters.search, filters.vehicleId, filters.driverId, filters.warehouseId, filters.tripType]\r\n                      .filter(Boolean).length} active\r\n                  </span>\r\n                )}\r\n                \r\n                <button\r\n                  onClick={clearFilters}\r\n                  className=\"px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors inline-flex items-center gap-1\"\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                  Clear\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={() => refreshData(false)}\r\n                  disabled={refreshing}\r\n                  className=\"px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors inline-flex items-center gap-1 disabled:opacity-50\"\r\n                >\r\n                  <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\r\n                  Refresh\r\n                </button>\r\n                \r\n                <input\r\n                  ref={importInputRef}\r\n                  type=\"file\"\r\n                  accept=\".csv,.xlsx\"\r\n                  onChange={handleImportInputChange}\r\n                  className=\"hidden\"\r\n                  aria-label=\"Import trips file\"\r\n                />\r\n                <button\r\n                  onClick={() => importInputRef.current?.click()}\r\n                  className=\"px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors inline-flex items-center gap-1\"\r\n                >\r\n                  <Upload className=\"h-4 w-4\" />\r\n                  Import\r\n                </button>\r\n                <button\r\n                  onClick={() => handleExport()}\r\n                  className=\"px-3 py-1.5 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-lg hover:bg-blue-700 transition-colors inline-flex items-center gap-1\"\r\n                >\r\n                  <Download className=\"h-4 w-4\" />\r\n                  Export\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {showFilters && (\r\n            <div className=\"p-3\">\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-3\">\r\n                {/* Compact Search */}\r\n                <div className=\"sm:col-span-2 lg:col-span-2 xl:col-span-2\">\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    Search\r\n                  </label>\r\n                  <div className=\"relative\">\r\n                    <div className=\"flex items-center bg-white border border-gray-300 rounded-lg focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 transition-all\">\r\n                      {/* Search Icon */}\r\n                      <div className=\"pl-3 pr-2\">\r\n                        {isSearching ? (\r\n                          <div className=\"h-4 w-4 border-2 border-gray-300 border-t-blue-500 rounded-full animate-spin\"></div>\r\n                        ) : (\r\n                          <Search className=\"h-4 w-4 text-gray-400\" />\r\n                        )}\r\n                      </div>\r\n                      \r\n                      {/* Input Field */}\r\n                      <input\r\n                        type=\"text\"\r\n                        value={filters.search}\r\n                        onChange={(e) => handleFiltersChange({ search: e.target.value })}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter' && filters.search.length >= 2) {\r\n                            handleSmartSearch(filters.search);\r\n                          }\r\n                        }}\r\n                        placeholder=\"Search trips, vehicles, drivers...\"\r\n                        className=\"flex-1 py-2 px-2 text-sm bg-transparent outline-none placeholder-gray-400\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                      \r\n                      {/* Quick Search Button */}\r\n                      {filters.search.length >= 2 && (\r\n                        <button\r\n                          onClick={() => handleSmartSearch(filters.search)}\r\n                          className=\"px-3 py-1 mr-2 text-xs font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-md hover:bg-blue-100 transition-colors\"\r\n                        >\r\n                          Search\r\n                        </button>\r\n                      )}\r\n                      \r\n                      {/* Clear Button */}\r\n                      {filters.search && (\r\n                        <button\r\n                          onClick={() => {\r\n                            handleFiltersChange({ search: '' });\r\n                            setSearchResult(null);\r\n                          }}\r\n                          className=\"p-1 mr-2 text-gray-400 hover:text-gray-600 transition-colors\"\r\n                        >\r\n                          <X className=\"h-4 w-4\" />\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {/* Search Results Indicator */}\r\n                    {searchResult && (\r\n                      <div className=\"absolute top-full left-0 right-0 mt-1 px-3 py-1 bg-blue-50 border border-blue-200 rounded-md text-xs text-blue-700\">\r\n                        Found {searchResult.totalCount} results\r\n                        {searchResult.matchedFields && searchResult.matchedFields.length > 0 && (\r\n                          <span className=\"ml-2\">in: {searchResult.matchedFields.join(', ')}</span>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Date Range */}\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    From Date\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={filters.dateRange.start}\r\n                    onChange={(e) => handleFiltersChange({ \r\n                      dateRange: { ...filters.dateRange, start: e.target.value }\r\n                    })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    To Date\r\n                  </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={filters.dateRange.end}\r\n                    onChange={(e) => handleFiltersChange({ \r\n                      dateRange: { ...filters.dateRange, end: e.target.value }\r\n                    })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                \r\n                {/* Vehicle Select */}\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    Vehicle\r\n                  </label>\r\n                  <select\r\n                    value={filters.vehicleId}\r\n                    onChange={(e) => handleFiltersChange({ vehicleId: e.target.value })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"\">All Vehicles</option>\r\n                    {vehicles.map(vehicle => (\r\n                      <option key={vehicle.id} value={vehicle.id}>\r\n                        {vehicle.registration_number}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Driver Select */}\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    Driver\r\n                  </label>\r\n                  <select\r\n                    value={filters.driverId}\r\n                    onChange={(e) => handleFiltersChange({ driverId: e.target.value })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"\">All Drivers</option>\r\n                    {drivers.map(driver => (\r\n                      <option key={driver.id} value={driver.id}>\r\n                        {driver.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Warehouse Select */}\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    Warehouse\r\n                  </label>\r\n                  <select\r\n                    value={filters.warehouseId}\r\n                    onChange={(e) => handleFiltersChange({ warehouseId: e.target.value })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"\">All Warehouses</option>\r\n                    {warehouses.map(warehouse => (\r\n                      <option key={warehouse.id} value={warehouse.id}>\r\n                        {warehouse.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Trip Type Select */}\r\n                <div>\r\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\r\n                    Trip Type\r\n                  </label>\r\n                  <select\r\n                    value={filters.tripType}\r\n                    onChange={(e) => handleFiltersChange({ tripType: e.target.value })}\r\n                    className=\"w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"\">All Types</option>\r\n                    <option value=\"one_way\">One Way</option>\r\n                    <option value=\"two_way\">Two Way</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Active filters summary */}\r\n              {(filters.search || filters.vehicleId || filters.driverId || filters.warehouseId || filters.tripType) && (\r\n                <div className=\"mt-4 flex items-center gap-2 text-sm\">\r\n                  <span className=\"text-gray-500\">Active filters:</span>\r\n                  <div className=\"flex flex-wrap gap-2\">\r\n                    {filters.search && (\r\n                      <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs\">\r\n                        Search: {filters.search}\r\n                      </span>\r\n                    )}\r\n                    {filters.vehicleId && (\r\n                      <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs\">\r\n                        Vehicle: {vehicles.find(v => v.id === filters.vehicleId)?.registration_number}\r\n                      </span>\r\n                    )}\r\n                    {filters.driverId && (\r\n                      <span className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs\">\r\n                        Driver: {drivers.find(d => d.id === filters.driverId)?.name}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Summary Metrics */}\r\n      <TripsSummary\r\n        trips={trips}\r\n        vehicles={vehicles}\r\n        drivers={drivers}\r\n        loading={summaryLoading}\r\n        metrics={summaryMetrics}\r\n      />\r\n\r\n      {/* Trip Table */}\r\n      <TripsTable\r\n        trips={currentTrips}\r\n        vehicles={vehicles}\r\n        drivers={drivers}\r\n        onUpdateTrip={handleUpdateTrip}\r\n        onDeleteTrip={handleDeleteTrip}\r\n      />\r\n\r\n      {/* Pagination */}\r\n      {totalPages > 1 && (\r\n        <div className=\"flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 rounded-lg shadow-sm mt-4\">\r\n          <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\r\n            <div>\r\n              <p className=\"text-sm text-gray-700\">\r\n                Showing <span className=\"font-medium\">{indexOfFirstTrip + 1}</span> to{' '}\r\n                <span className=\"font-medium\">\r\n                  {Math.min(indexOfLastTrip, filteredTrips.length)}\r\n                </span>{' '}\r\n                of <span className=\"font-medium\">{filteredTrips.length}</span> results\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <nav className=\"isolate inline-flex -space-x-px rounded-md shadow-sm\" aria-label=\"Pagination\">\r\n                <button\r\n                  onClick={goToPreviousPage}\r\n                  className={`relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${\r\n                    currentPage === 1 ? 'cursor-not-allowed opacity-50' : ''\r\n                  }`}\r\n                  disabled={currentPage === 1}\r\n                >\r\n                  <ChevronLeft className=\"h-5 w-5\" />\r\n                </button>\r\n                \r\n                {/* Page numbers */}\r\n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n                  // Simple pagination logic that shows 5 pages at most\r\n                  let pageNum = i + 1;\r\n                  if (totalPages > 5) {\r\n                    if (currentPage <= 3) {\r\n                      pageNum = i + 1;\r\n                    } else if (currentPage >= totalPages - 2) {\r\n                      pageNum = totalPages - 4 + i;\r\n                    } else {\r\n                      pageNum = currentPage - 2 + i;\r\n                    }\r\n                  }\r\n                  \r\n                  return (\r\n                    <button\r\n                      key={pageNum}\r\n                      onClick={() => paginate(pageNum)}\r\n                      className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${\r\n                        currentPage === pageNum\r\n                          ? 'z-10 bg-primary-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'\r\n                          : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'\r\n                      }`}\r\n                    >\r\n                      {pageNum}\r\n                    </button>\r\n                  );\r\n                })}\r\n                \r\n                <button\r\n                  onClick={goToNextPage}\r\n                  className={`relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${\r\n                    currentPage === totalPages ? 'cursor-not-allowed opacity-50' : ''\r\n                  }`}\r\n                  disabled={currentPage === totalPages}\r\n                >\r\n                  <ChevronRight className=\"h-5 w-5\" />\r\n                </button>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showExportModal && (\r\n        <ExportOptionsModal\r\n          onExport={handleExport}\r\n          onClose={() => setShowExportModal(false)}\r\n          vehicles={vehicles}\r\n          drivers={drivers}\r\n          warehouses={warehouses}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AdminTripsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\AlertSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\CompanySettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompanyData'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompanyData]","fix":{"range":[3101,3103],"text":"[loadCompanyData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Building2, Upload, Save, Loader2, ArrowLeft, CheckCircle, AlertCircle, Trash2 } from 'lucide-react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { supabase } from '../../utils/supabaseClient';\r\n\r\ninterface CompanyData {\r\n  id?: string;\r\n  name: string;\r\n  tagline?: string;\r\n  logo_url?: string;\r\n  contact_email: string;\r\n  contact_phone: string;\r\n  address?: string;\r\n  city?: string;\r\n  state?: string;\r\n  pincode?: string;\r\n  gst_number?: string;\r\n  pan_number?: string;\r\n  bank_name?: string;\r\n  bank_account_number?: string;\r\n  ifsc_code?: string;\r\n}\r\n\r\nconst indianStates = [\r\n  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',\r\n  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand', 'Karnataka',\r\n  'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',\r\n  'Nagaland', 'Odisha', 'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu',\r\n  'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'\r\n];\r\n\r\nconst CompanySettings: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  \r\n  // State management\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  \r\n  // File handling\r\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\r\n  const [previewUrl, setPreviewUrl] = useState<string>('');\r\n  const [existingLogoUrl, setExistingLogoUrl] = useState<string>('');\r\n  const [oldLogoToDelete, setOldLogoToDelete] = useState<string>('');\r\n  \r\n  // Company data\r\n  const [company, setCompany] = useState<CompanyData>({\r\n    name: '',\r\n    contact_email: '',\r\n    contact_phone: '',\r\n  });\r\n\r\n  // Validation functions\r\n  const validateGST = (gst: string): boolean => {\r\n    const gstRegex = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[0-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/;\r\n    return !gst || gstRegex.test(gst);\r\n  };\r\n\r\n  const validatePAN = (pan: string): boolean => {\r\n    const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;\r\n    return !pan || panRegex.test(pan);\r\n  };\r\n\r\n  const validatePhone = (phone: string): boolean => {\r\n    const phoneRegex = /^[+91]?[6-9][0-9]{9}$/;\r\n    return !phone || phoneRegex.test(phone.replace(/[\\s-]/g, ''));\r\n  };\r\n\r\n  const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return !email || emailRegex.test(email);\r\n  };\r\n\r\n  const validatePincode = (pincode: string): boolean => {\r\n    const pincodeRegex = /^[0-9]{6}$/;\r\n    return !pincode || pincodeRegex.test(pincode);\r\n  };\r\n\r\n  const validateIFSC = (ifsc: string): boolean => {\r\n    const ifscRegex = /^[A-Z]{4}[0-9]{7}$/;\r\n    return !ifsc || ifscRegex.test(ifsc);\r\n  };\r\n\r\n  // Load existing company data\r\n  useEffect(() => {\r\n    loadCompanyData();\r\n  }, []);\r\n\r\n  const loadCompanyData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        navigate('/login');\r\n        return;\r\n      }\r\n\r\n      if (import.meta.env.MODE === 'development') {\r\n        console.log('Loading company data for user:', user.id);\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('organizations')\r\n        .select('*')\r\n        .eq('owner_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (import.meta.env.MODE === 'development') {\r\n        console.log('Company data query result:', { data, error });\r\n      }\r\n\r\n      if (error) {\r\n        console.error('Error fetching organization:', error);\r\n        return;\r\n      }\r\n\r\n      // Handle the result as an array and take the first element\r\n      const companyData = Array.isArray(data) && data.length > 0 ? data[0] : null;\r\n\r\n      if (companyData) {\r\n        if (import.meta.env.MODE === 'development') {\r\n          console.log('Setting company data:', companyData);\r\n        }\r\n        setCompany(companyData);\r\n        setIsEditMode(true);\r\n        setIsEditing(false); // Start in view mode when data exists\r\n        if (companyData.logo_url) {\r\n          setExistingLogoUrl(companyData.logo_url);\r\n          setPreviewUrl(companyData.logo_url);\r\n        }\r\n      } else {\r\n        if (import.meta.env.MODE === 'development') {\r\n          console.log('No company data found, setting up new company');\r\n        }\r\n        setIsEditMode(false);\r\n        setIsEditing(true); // Start in edit mode for new company\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading company data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle file selection (preview only)\r\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Validate file\r\n    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml'];\r\n    if (!validTypes.includes(file.type)) {\r\n      setErrors({ ...errors, logo: 'Please select a valid image file (JPG, PNG, GIF, SVG)' });\r\n      return;\r\n    }\r\n\r\n    if (file.size > 2 * 1024 * 1024) {\r\n      setErrors({ ...errors, logo: 'Image size must be less than 2MB' });\r\n      return;\r\n    }\r\n\r\n    // Clear logo errors\r\n    const newErrors = { ...errors };\r\n    delete newErrors.logo;\r\n    setErrors(newErrors);\r\n\r\n    // Set for preview\r\n    setSelectedFile(file);\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setPreviewUrl(reader.result as string);\r\n    };\r\n    reader.readAsDataURL(file);\r\n\r\n    // Mark old logo for deletion if exists\r\n    if (existingLogoUrl) {\r\n      setOldLogoToDelete(existingLogoUrl);\r\n    }\r\n\r\n    // Automatically enter edit mode when a new logo is selected\r\n    if (isEditMode && !isEditing) {\r\n      setIsEditing(true);\r\n    }\r\n  };\r\n\r\n  // Remove selected logo\r\n  const removeLogo = () => {\r\n    setSelectedFile(null);\r\n    setPreviewUrl(existingLogoUrl || '');\r\n    setOldLogoToDelete('');\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  // Validate all fields\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    // Required fields\r\n    if (!company.name?.trim()) {\r\n      newErrors.name = 'Company name is required';\r\n    }\r\n    if (company.name && (company.name.length < 3 || company.name.length > 100)) {\r\n      newErrors.name = 'Company name must be between 3 and 100 characters';\r\n    }\r\n\r\n    // Email validation\r\n    if (!validateEmail(company.contact_email)) {\r\n      newErrors.email = 'Invalid email format';\r\n    }\r\n\r\n    // Phone validation\r\n    if (!validatePhone(company.contact_phone)) {\r\n      newErrors.phone = 'Invalid phone number (10 digits, starting with 6-9)';\r\n    }\r\n\r\n    // GST validation\r\n    if (company.gst_number && !validateGST(company.gst_number)) {\r\n      newErrors.gst = 'Invalid GST format (e.g., 22AAAAA0000A1Z5)';\r\n    }\r\n\r\n    // PAN validation\r\n    if (company.pan_number && !validatePAN(company.pan_number)) {\r\n      newErrors.pan = 'Invalid PAN format (e.g., ABCDE1234F)';\r\n    }\r\n\r\n    // Pincode validation\r\n    if (company.pincode && !validatePincode(company.pincode)) {\r\n      newErrors.pincode = 'Invalid PIN code (6 digits)';\r\n    }\r\n\r\n    // IFSC validation\r\n    if (company.ifsc_code && !validateIFSC(company.ifsc_code)) {\r\n      newErrors.ifsc = 'Invalid IFSC code format';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // Upload logo to storage\r\n  const uploadLogo = async (file: File, userId: string): Promise<string | null> => {\r\n    try {\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\r\n      const filePath = `${userId}/${fileName}`;\r\n\r\n      const { error } = await supabase.storage\r\n        .from('company-logos')\r\n        .upload(filePath, file, {\r\n          cacheControl: '3600',\r\n          upsert: false\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('company-logos')\r\n        .getPublicUrl(filePath);\r\n\r\n      return publicUrl;\r\n    } catch (error) {\r\n      console.error('Error uploading logo:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Delete old logo from storage\r\n  const deleteOldLogo = async (logoUrl: string, userId: string) => {\r\n    try {\r\n      // Extract file path from URL\r\n      const urlParts = logoUrl.split('/');\r\n      const fileName = urlParts[urlParts.length - 1];\r\n      const filePath = `${userId}/${fileName}`;\r\n\r\n      await supabase.storage\r\n        .from('company-logos')\r\n        .remove([filePath]);\r\n    } catch (error) {\r\n      console.error('Error deleting old logo:', error);\r\n      // Non-critical error, continue\r\n    }\r\n  };\r\n\r\n  // Save company data\r\n  const handleSave = async () => {\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    setSuccessMessage('');\r\n\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      let finalLogoUrl = existingLogoUrl;\r\n\r\n      // Upload new logo if selected\r\n      if (selectedFile) {\r\n        finalLogoUrl = await uploadLogo(selectedFile, user.id) || '';\r\n        \r\n        // Delete old logo after successful upload\r\n        if (oldLogoToDelete) {\r\n          await deleteOldLogo(oldLogoToDelete, user.id);\r\n        }\r\n      }\r\n\r\n      // Prepare data\r\n      const companyData = {\r\n        ...company,\r\n        logo_url: finalLogoUrl,\r\n        owner_id: user.id,\r\n        updated_at: new Date().toISOString(),\r\n        logo_updated_at: selectedFile ? new Date().toISOString() : company.logo_url\r\n      };\r\n\r\n      // Save to database\r\n      if (isEditMode && company.id) {\r\n        // Update existing record\r\n        const { error } = await supabase\r\n          .from('organizations')\r\n          .update(companyData)\r\n          .eq('id', company.id);\r\n\r\n        if (error) throw error;\r\n      } else {\r\n        // Insert new record\r\n        const { data: newData, error } = await supabase\r\n          .from('organizations')\r\n          .insert([companyData])\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        \r\n        // Update local state with the new ID\r\n        if (newData) {\r\n          setCompany({ ...company, id: newData.id });\r\n          \r\n          // ✅ CRITICAL: Create organization_users record so user can access their organization\r\n          const { error: orgUserError } = await supabase\r\n            .from('organization_users')\r\n            .insert([{\r\n              user_id: user.id,\r\n              organization_id: newData.id,\r\n              role: 'owner'\r\n            }]);\r\n\r\n          if (orgUserError) {\r\n            console.error('Error creating organization_users record:', orgUserError);\r\n            // Don't throw error here as the organization was created successfully\r\n          }\r\n        }\r\n        \r\n        setIsEditMode(true);\r\n      }\r\n\r\n      // Update local state\r\n      setExistingLogoUrl(finalLogoUrl || '');\r\n      setSelectedFile(null);\r\n      setOldLogoToDelete('');\r\n      setIsEditing(false); // Exit edit mode after successful save\r\n      setSuccessMessage('Company information saved successfully!');\r\n\r\n      // Clear success message after 3 seconds\r\n      setTimeout(() => setSuccessMessage(''), 3000);\r\n    } catch (error: any) {\r\n      console.error('Error saving company data:', error);\r\n      setErrors({ save: error.message || 'Failed to save company information' });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // Handle input changes\r\n  const handleInputChange = (field: keyof CompanyData, value: string) => {\r\n    setCompany({ ...company, [field]: value });\r\n    \r\n    // Clear field error on change\r\n    if (errors[field]) {\r\n      const newErrors = { ...errors };\r\n      delete newErrors[field];\r\n      setErrors(newErrors);\r\n    }\r\n  };\r\n\r\n  // Handle edit mode toggle\r\n  const handleEditToggle = () => {\r\n    setIsEditing(!isEditing);\r\n    if (!isEditing) {\r\n      // Reset any unsaved changes\r\n      setSelectedFile(null);\r\n      setPreviewUrl(existingLogoUrl || '');\r\n      setOldLogoToDelete('');\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = '';\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-6\">\r\n      <div className=\"max-w-4xl mx-auto px-4\">\r\n        {/* Header */}\r\n        <div className=\"mb-6\">\r\n          <button\r\n            onClick={() => navigate('/admin')}\r\n            className=\"flex items-center text-gray-600 hover:text-gray-900 mb-4\"\r\n          >\r\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n            <span className=\"font-sans\">Back to Admin</span>\r\n          </button>\r\n          \r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Building2 className=\"h-8 w-8 text-primary-600\" />\r\n              <div>\r\n                <h1 className=\"text-2xl font-display font-bold tracking-tight-plus text-gray-900\">\r\n                  {isEditMode ? (isEditing ? 'Edit Company Profile' : 'Company Profile') : 'Setup Company Profile'}\r\n                </h1>\r\n                <p className=\"text-sm font-sans text-gray-500\">\r\n                  {isEditMode ? 'View and manage your organization profile' : 'Set up your organization profile and branding'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center space-x-3\">\r\n              {isEditMode && !isEditing && (\r\n                <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-sans\">\r\n                  Profile Active\r\n                </span>\r\n              )}\r\n              {isEditMode && (\r\n                <button\r\n                  onClick={handleEditToggle}\r\n                  className={`px-4 py-2 rounded-lg font-sans font-medium transition-colors ${\r\n                    isEditing \r\n                      ? 'bg-gray-100 text-gray-700 hover:bg-gray-200' \r\n                      : 'bg-primary-600 text-white hover:bg-primary-700'\r\n                  }`}\r\n                >\r\n                  {isEditing ? 'Cancel' : 'Edit Profile'}\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Success Message */}\r\n        {successMessage && (\r\n          <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center\">\r\n            <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\r\n            <span className=\"font-sans text-green-800\">{successMessage}</span>\r\n          </div>\r\n        )}\r\n\r\n        {/* Error Message */}\r\n        {errors.save && (\r\n          <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center\">\r\n            <AlertCircle className=\"h-5 w-5 text-red-600 mr-2\" />\r\n            <span className=\"font-sans text-red-800\">{errors.save}</span>\r\n          </div>\r\n        )}\r\n\r\n        {/* Main Form */}\r\n        <div className=\"bg-white rounded-lg shadow-sm\">\r\n          <div className=\"p-6 space-y-6\">\r\n            {/* Company Information Section */}\r\n            <div>\r\n              <h2 className=\"text-lg font-display font-semibold tracking-tight-plus mb-4\">Company Information</h2>\r\n              \r\n              <div className=\"grid md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-sans font-medium text-gray-700 mb-1\">\r\n                    Company Name *\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.name}\r\n                    onChange={(e) => handleInputChange('name', e.target.value)}\r\n                    readOnly={!isEditing && isEditMode}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.name ? 'border-red-500' : 'border-gray-300'\r\n                    } ${!isEditing && isEditMode ? 'bg-gray-50 cursor-not-allowed' : ''}`}\r\n                    placeholder=\"Enter company name\"\r\n                    maxLength={100}\r\n                  />\r\n                  {errors.name && (\r\n                    <p className=\"font-sans text-red-500 text-xs mt-1\">{errors.name}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-sans font-medium text-gray-700 mb-1\">\r\n                    Tagline\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.tagline || ''}\r\n                    onChange={(e) => handleInputChange('tagline', e.target.value)}\r\n                    readOnly={!isEditing && isEditMode}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.tagline ? 'border-red-500' : 'border-gray-300'\r\n                    } ${!isEditing && isEditMode ? 'bg-gray-50 cursor-not-allowed' : ''}`}\r\n                    placeholder=\"Your company slogan\"\r\n                    maxLength={100}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Logo Upload Section */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Company Logo\r\n              </label>\r\n              <div className=\"flex items-start space-x-6\">\r\n                <div className=\"flex-shrink-0\">\r\n                  {previewUrl ? (\r\n                    <img\r\n                      src={previewUrl}\r\n                      alt=\"Company Logo\"\r\n                      className=\"h-24 w-24 object-contain border-2 border-gray-200 rounded-lg\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"h-24 w-24 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center\">\r\n                      <Building2 className=\"h-8 w-8 text-gray-400\" />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"flex-grow\">\r\n                  <div className=\"flex space-x-2\">\r\n                    <label className=\"cursor-pointer\">\r\n                      <div className=\"px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center\">\r\n                        <Upload className=\"h-4 w-4 mr-2\" />\r\n                        {previewUrl && selectedFile ? 'Change Logo' : 'Upload Logo'}\r\n                      </div>\r\n                      <input\r\n                        ref={fileInputRef}\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={handleFileSelect}\r\n                        className=\"hidden\"\r\n                      />\r\n                    </label>\r\n                    {selectedFile && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={removeLogo}\r\n                        className=\"px-4 py-2 border border-red-300 text-red-600 rounded-lg hover:bg-red-50 flex items-center\"\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                        Remove\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                  <p className=\"text-xs text-gray-500 mt-2\">\r\n                    Maximum file size: 2MB. Supported formats: JPG, PNG, GIF, SVG\r\n                  </p>\r\n                  {selectedFile && (\r\n                    <p className=\"text-xs text-blue-600 mt-1\">\r\n                      New logo selected. Will be uploaded when you save.\r\n                    </p>\r\n                  )}\r\n                  {errors.logo && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.logo}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Contact Information */}\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold mb-4\">Contact Information</h2>\r\n              \r\n              <div className=\"grid md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Contact Email\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    value={company.contact_email}\r\n                    onChange={(e) => handleInputChange('contact_email', e.target.value)}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.email ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"contact@company.com\"\r\n                  />\r\n                  {errors.email && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.email}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Contact Phone\r\n                  </label>\r\n                  <input\r\n                    type=\"tel\"\r\n                    value={company.contact_phone}\r\n                    onChange={(e) => handleInputChange('contact_phone', e.target.value)}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.phone ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"+91 98765 43210\"\r\n                  />\r\n                  {errors.phone && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.phone}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Address Information */}\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold mb-4\">Address Information</h2>\r\n              \r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Address\r\n                  </label>\r\n                  <textarea\r\n                    value={company.address || ''}\r\n                    onChange={(e) => handleInputChange('address', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    rows={2}\r\n                    placeholder=\"Enter complete address\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"grid md:grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      City\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={company.city || ''}\r\n                      onChange={(e) => handleInputChange('city', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                      placeholder=\"Enter city\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      State\r\n                    </label>\r\n                    <select\r\n                      value={company.state || ''}\r\n                      onChange={(e) => handleInputChange('state', e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    >\r\n                      <option value=\"\">Select State</option>\r\n                      {indianStates.map(state => (\r\n                        <option key={state} value={state}>{state}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      PIN Code\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={company.pincode || ''}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value.replace(/\\D/g, '');\r\n                        if (value.length <= 6) {\r\n                          handleInputChange('pincode', value);\r\n                        }\r\n                      }}\r\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                        errors.pincode ? 'border-red-500' : 'border-gray-300'\r\n                      }`}\r\n                      placeholder=\"123456\"\r\n                      maxLength={6}\r\n                    />\r\n                    {errors.pincode && (\r\n                      <p className=\"text-red-500 text-xs mt-1\">{errors.pincode}</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tax Information */}\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold mb-4\">Tax Information</h2>\r\n              \r\n              <div className=\"grid md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    GST Number\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.gst_number || ''}\r\n                    onChange={(e) => handleInputChange('gst_number', e.target.value.toUpperCase())}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.gst ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"22AAAAA0000A1Z5\"\r\n                    maxLength={15}\r\n                  />\r\n                  {errors.gst && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.gst}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    PAN Number\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.pan_number || ''}\r\n                    onChange={(e) => handleInputChange('pan_number', e.target.value.toUpperCase())}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.pan ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"ABCDE1234F\"\r\n                    maxLength={10}\r\n                  />\r\n                  {errors.pan && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.pan}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Banking Information */}\r\n            <div>\r\n              <h2 className=\"text-lg font-semibold mb-4\">Banking Information</h2>\r\n              \r\n              <div className=\"grid md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Bank Name\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.bank_name || ''}\r\n                    onChange={(e) => handleInputChange('bank_name', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    placeholder=\"State Bank of India\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Account Number\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.bank_account_number || ''}\r\n                    onChange={(e) => handleInputChange('bank_account_number', e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500\"\r\n                    placeholder=\"Enter account number\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    IFSC Code\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={company.ifsc_code || ''}\r\n                    onChange={(e) => handleInputChange('ifsc_code', e.target.value.toUpperCase())}\r\n                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 ${\r\n                      errors.ifsc ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"SBIN0001234\"\r\n                    maxLength={11}\r\n                  />\r\n                  {errors.ifsc && (\r\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.ifsc}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Action Buttons - Show when editing or creating new */}\r\n          {(isEditing || !isEditMode) && (\r\n            <div className=\"px-6 py-4 bg-gray-50 border-t flex justify-between items-center rounded-b-lg\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  if (isEditing) {\r\n                    handleEditToggle(); // Cancel editing\r\n                  } else {\r\n                    navigate('/admin'); // Cancel creation\r\n                  }\r\n                }}\r\n                className=\"px-4 py-2 text-gray-700 hover:text-gray-900\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={handleSave}\r\n                disabled={saving}\r\n                className=\"px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\r\n              >\r\n                {saving ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    {isEditMode ? 'Update Company Profile' : 'Create Company Profile'}\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanySettings;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\CompleteFixedReportingDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'selectedDateRange' and 'updateDateRange'. Either include them or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDateRange, updateDateRange]","fix":{"range":[2453,2455],"text":"[selectedDateRange, updateDateRange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [dateRange, activeTab, fetchDashboardData]","fix":{"range":[2602,2624],"text":"[dateRange, activeTab, fetchDashboardData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport {\r\n  Calendar,\r\n  TrendingUp,\r\n  Users,\r\n  Truck,\r\n  DollarSign,\r\n  Package,\r\n  AlertCircle,\r\n  Download,\r\n  Filter,\r\n  RefreshCw,\r\n  FileText,\r\n  Fuel,\r\n  MapPin,\r\n  Clock,\r\n  Wrench,\r\n  BarChart3,\r\n  PieChart as PieChartIcon,\r\n  FileSpreadsheet,\r\n  Eye,\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Activity\r\n} from 'lucide-react';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport { format, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, subDays, subMonths } from 'date-fns';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport Layout from '../../components/layout/Layout';\r\n\r\n// Extend jsPDF type for autoTable\r\ndeclare module 'jspdf' {\r\n  interface jsPDF {\r\n    autoTable: (options: any) => jsPDF;\r\n  }\r\n}\r\n\r\ninterface ReportMetrics {\r\n  totalRevenue: number;\r\n  totalTrips: number;\r\n  activeVehicles: number;\r\n  activeDrivers: number;\r\n  avgTripDistance: number;\r\n  avgFuelEfficiency: number;\r\n  maintenanceCosts: number;\r\n  pendingMaintenance: number;\r\n}\r\n\r\nconst CompleteFixedReportingDashboard: React.FC = () => {\r\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'reports'>('dashboard');\r\n  const [metrics, setMetrics] = useState<ReportMetrics>({\r\n    totalRevenue: 0,\r\n    totalTrips: 0,\r\n    activeVehicles: 0,\r\n    activeDrivers: 0,\r\n    avgTripDistance: 0,\r\n    avgFuelEfficiency: 0,\r\n    maintenanceCosts: 0,\r\n    pendingMaintenance: 0\r\n  });\r\n  const [chartData, setChartData] = useState<any>({\r\n    tripTrends: [],\r\n    vehicleUtilization: [],\r\n    driverPerformance: [],\r\n    expenseBreakdown: []\r\n  });\r\n  const [dateRange, setDateRange] = useState({\r\n    startDate: startOfMonth(new Date()),\r\n    endDate: endOfMonth(new Date())\r\n  });\r\n  const [selectedDateRange, setSelectedDateRange] = useState('thisMonth');\r\n  const [customStartDate, setCustomStartDate] = useState('');\r\n  const [customEndDate, setCustomEndDate] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatingReport, setGeneratingReport] = useState<string | null>(null);\r\n  const [showAllReports, setShowAllReports] = useState(false);\r\n\r\n  // Initialize date range properly\r\n  useEffect(() => {\r\n    updateDateRange(selectedDateRange);\r\n  }, []);\r\n\r\n  // Fetch data when date range changes\r\n  useEffect(() => {\r\n    if (activeTab === 'dashboard') {\r\n      fetchDashboardData();\r\n    }\r\n  }, [dateRange, activeTab]);\r\n\r\n  const updateDateRange = (rangeType: string) => {\r\n    const now = new Date();\r\n    let start: Date, end: Date;\r\n\r\n    switch (rangeType) {\r\n      case 'today':\r\n        start = startOfDay(now);\r\n        end = endOfDay(now);\r\n        break;\r\n      case 'yesterday':\r\n        start = startOfDay(subDays(now, 1));\r\n        end = endOfDay(subDays(now, 1));\r\n        break;\r\n      case 'thisWeek':\r\n        start = startOfWeek(now, { weekStartsOn: 1 });\r\n        end = endOfWeek(now, { weekStartsOn: 1 });\r\n        break;\r\n      case 'lastWeek':\r\n        start = startOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        end = endOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        break;\r\n      case 'thisMonth':\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n        break;\r\n      case 'lastMonth':\r\n        start = startOfMonth(subMonths(now, 1));\r\n        end = endOfMonth(subMonths(now, 1));\r\n        break;\r\n      case 'last30Days':\r\n        start = subDays(now, 30);\r\n        end = now;\r\n        break;\r\n      case 'custom':\r\n        start = customStartDate ? new Date(customStartDate) : startOfMonth(now);\r\n        end = customEndDate ? new Date(customEndDate) : endOfMonth(now);\r\n        break;\r\n      default:\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n    }\r\n\r\n    setDateRange({ startDate: start, endDate: end });\r\n    setSelectedDateRange(rangeType);\r\n  };\r\n\r\n  const fetchDashboardData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch all data in parallel\r\n      const [metricsData, trends, utilization, performance, expenses] = await Promise.all([\r\n        fetchMetrics(),\r\n        fetchTripTrends(),\r\n        fetchVehicleUtilization(),\r\n        fetchDriverPerformance(),\r\n        fetchExpenseBreakdown()\r\n      ]);\r\n      console.log('Dashboard data fetched successfully');\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      // Get trips for the selected period\r\n      const { data: trips, error: tripsError } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (tripsError) {\r\n        console.error('Error fetching trips:', tripsError);\r\n      }\r\n\r\n      // Calculate revenue (using a simple formula - adjust based on your business logic)\r\n      const totalRevenue = trips?.reduce((sum, trip) => {\r\n        const distance = (trip.end_km || 0) - (trip.start_km || 0);\r\n        return sum + (distance * 10); // Example: ₹10 per km\r\n      }, 0) || 0;\r\n\r\n      const totalDistance = trips?.reduce((sum, trip) => \r\n        sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0;\r\n      const avgDistance = trips?.length ? totalDistance / trips.length : 0;\r\n\r\n      // Get active vehicles\r\n      const { count: vehicleCount } = await supabase\r\n        .from('vehicles')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      // Get active drivers\r\n      const { count: driverCount } = await supabase\r\n        .from('drivers')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      // Get maintenance data\r\n      const { data: maintenance } = await supabase\r\n        .from('maintenance_tasks')\r\n        .select('actual_cost, status')\r\n        .gte('start_date', dateRange.startDate.toISOString())\r\n        .lte('start_date', dateRange.endDate.toISOString());\r\n\r\n      const maintenanceCosts = maintenance?.reduce((sum, m) => sum + (m.actual_cost || 0), 0) || 0;\r\n      const pendingMaintenance = maintenance?.filter(m => m.status === 'open').length || 0;\r\n\r\n      setMetrics({\r\n        totalRevenue: Math.round(totalRevenue),\r\n        totalTrips: trips?.length || 0,\r\n        activeVehicles: vehicleCount || 0,\r\n        activeDrivers: driverCount || 0,\r\n        avgTripDistance: Math.round(avgDistance),\r\n        avgFuelEfficiency: 8.5,\r\n        maintenanceCosts: Math.round(maintenanceCosts),\r\n        pendingMaintenance\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchMetrics:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchTripTrends = async () => {\r\n    try {\r\n      const { data: trips, error } = await supabase\r\n        .from('trips')\r\n        .select('created_at, start_km, end_km')\r\n        .gte('created_at', subMonths(dateRange.endDate, 6).toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString())\r\n        .order('created_at');\r\n\r\n      if (error) {\r\n        console.error('Error fetching trip trends:', error);\r\n        return;\r\n      }\r\n\r\n      // Group by date\r\n      const grouped = trips?.reduce((acc: any, trip) => {\r\n        const date = format(new Date(trip.created_at), 'MMM dd');\r\n        if (!acc[date]) {\r\n          acc[date] = { date, trips: 0, revenue: 0 };\r\n        }\r\n        acc[date].trips++;\r\n        const distance = (trip.end_km || 0) - (trip.start_km || 0);\r\n        acc[date].revenue += distance * 10;\r\n        return acc;\r\n      }, {}) || {};\r\n\r\n      const trendData = Object.values(grouped).slice(-7); // Last 7 days\r\n      setChartData((prev: any) => ({ ...prev, tripTrends: trendData }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchTripTrends:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchVehicleUtilization = async () => {\r\n    try {\r\n      const { data: vehicles, error } = await supabase\r\n        .from('vehicles')\r\n        .select('id, registration_number')\r\n        .eq('status', 'active')\r\n        .limit(5);\r\n\r\n      if (error) {\r\n        console.error('Error fetching vehicles:', error);\r\n        return;\r\n      }\r\n\r\n      const utilizationData = await Promise.all(\r\n        (vehicles || []).map(async (vehicle) => {\r\n          const { count } = await supabase\r\n            .from('trips')\r\n            .select('*', { count: 'exact', head: true })\r\n            .eq('vehicle_id', vehicle.id)\r\n            .gte('created_at', dateRange.startDate.toISOString())\r\n            .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n          const utilization = Math.min(((count || 0) / 30) * 100, 100);\r\n          return {\r\n            vehicle: vehicle.registration_number.slice(0, 10),\r\n            trips: count || 0,\r\n            utilization: Math.round(utilization)\r\n          };\r\n        })\r\n      );\r\n\r\n      setChartData((prev: any) => ({ ...prev, vehicleUtilization: utilizationData }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchVehicleUtilization:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchDriverPerformance = async () => {\r\n    try {\r\n      const { data: drivers, error } = await supabase\r\n        .from('drivers')\r\n        .select('id, name')\r\n        .eq('status', 'active')\r\n        .limit(5);\r\n\r\n      if (error) {\r\n        console.error('Error fetching drivers:', error);\r\n        return;\r\n      }\r\n\r\n      const performanceData = await Promise.all(\r\n        (drivers || []).map(async (driver) => {\r\n          const { data: trips } = await supabase\r\n            .from('trips')\r\n            .select('start_km, end_km, total_fuel_cost')\r\n            .eq('driver_id', driver.id)\r\n            .gte('created_at', dateRange.startDate.toISOString())\r\n            .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n          const totalDistance = trips?.reduce((sum, trip) => \r\n            sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0;\r\n          const efficiency = trips?.length ? totalDistance / trips.length : 0;\r\n\r\n          return {\r\n            driver: driver.name?.split(' ')[0] || 'Unknown',\r\n            trips: trips?.length || 0,\r\n            efficiency: Math.round(efficiency)\r\n          };\r\n        })\r\n      );\r\n\r\n      setChartData((prev: any) => ({ ...prev, driverPerformance: performanceData }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchDriverPerformance:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchExpenseBreakdown = async () => {\r\n    try {\r\n      const { data: trips, error } = await supabase\r\n        .from('trips')\r\n        .select('total_fuel_cost, total_road_expenses, driver_expense, breakdown_expense')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (error) {\r\n        console.error('Error fetching expenses:', error);\r\n        return;\r\n      }\r\n\r\n      const expenses = {\r\n        Fuel: 0,\r\n        Road: 0,\r\n        Driver: 0,\r\n        Breakdown: 0,\r\n        Maintenance: metrics.maintenanceCosts\r\n      };\r\n\r\n      trips?.forEach(trip => {\r\n        expenses.Fuel += trip.total_fuel_cost || 0;\r\n        expenses.Road += trip.total_road_expenses || 0;\r\n        expenses.Driver += trip.driver_expense || 0;\r\n        expenses.Breakdown += trip.breakdown_expense || 0;\r\n      });\r\n\r\n      const expenseData = Object.entries(expenses)\r\n        .map(([category, amount]) => ({ category, amount: Math.round(amount) }))\r\n        .filter(item => item.amount > 0);\r\n\r\n      setChartData((prev: any) => ({ ...prev, expenseBreakdown: expenseData }));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchExpenseBreakdown:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const generatePDFReport = async (reportType: string) => {\r\n    setGeneratingReport(reportType);\r\n    \r\n    try {\r\n      const pdf = new jsPDF();\r\n      const pageWidth = pdf.internal.pageSize.getWidth();\r\n      const pageHeight = pdf.internal.pageSize.getHeight();\r\n      \r\n      // Add colorful header with gradient effect\r\n      pdf.setFillColor(59, 130, 246); // Blue background\r\n      pdf.rect(0, 0, pageWidth, 50, 'F');\r\n      \r\n      // White text on blue background\r\n      pdf.setTextColor(255, 255, 255);\r\n      pdf.setFontSize(24);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.text('AVS Fleet Management', pageWidth / 2, 20, { align: 'center' });\r\n      \r\n      pdf.setFontSize(16);\r\n      pdf.setFont('helvetica', 'normal');\r\n      pdf.text('Intelligent Fleet Solutions', pageWidth / 2, 30, { align: 'center' });\r\n      \r\n      // Report type with accent color\r\n      pdf.setFillColor(16, 185, 129); // Green accent\r\n      pdf.rect(0, 50, pageWidth, 20, 'F');\r\n      \r\n      pdf.setTextColor(255, 255, 255);\r\n      pdf.setFontSize(18);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.text(reportType.replace(/-/g, ' ').toUpperCase(), pageWidth / 2, 62, { align: 'center' });\r\n      \r\n      // Date and period info with subtle background\r\n      pdf.setFillColor(249, 250, 251); // Light gray\r\n      pdf.rect(0, 70, pageWidth, 25, 'F');\r\n      \r\n      pdf.setTextColor(75, 85, 99);\r\n      pdf.setFontSize(11);\r\n      pdf.setFont('helvetica', 'normal');\r\n      pdf.text(`Generated on: ${format(new Date(), 'dd MMM yyyy, HH:mm')}`, pageWidth / 2, 82, { align: 'center' });\r\n      pdf.text(`Period: ${format(dateRange.startDate, 'dd/MM/yyyy')} to ${format(dateRange.endDate, 'dd/MM/yyyy')}`, pageWidth / 2, 90, { align: 'center' });\r\n      \r\n      let yPosition = 110;\r\n\r\n      // Key Metrics Section with colored cards\r\n      pdf.setFontSize(16);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.setTextColor(31, 41, 55);\r\n      pdf.text('📊 Key Performance Indicators', 14, yPosition);\r\n      yPosition += 15;\r\n\r\n      // Create colored metric cards\r\n      const metricCards = [\r\n        { label: 'Total Revenue', value: `₹${metrics.totalRevenue.toLocaleString('en-IN')}`, color: [34, 197, 94] }, // Green\r\n        { label: 'Total Trips', value: metrics.totalTrips.toString(), color: [59, 130, 246] }, // Blue\r\n        { label: 'Active Vehicles', value: metrics.activeVehicles.toString(), color: [168, 85, 247] }, // Purple\r\n        { label: 'Active Drivers', value: metrics.activeDrivers.toString(), color: [245, 158, 11] } // Orange\r\n      ];\r\n\r\n      metricCards.forEach((metric, index) => {\r\n        const x = 14 + (index % 2) * 90;\r\n        const y = yPosition + Math.floor(index / 2) * 25;\r\n        \r\n        // Colored background\r\n        pdf.setFillColor(...metric.color);\r\n        pdf.roundedRect(x, y, 80, 20, 3, 3, 'F');\r\n        \r\n        // White text\r\n        pdf.setTextColor(255, 255, 255);\r\n        pdf.setFontSize(9);\r\n        pdf.setFont('helvetica', 'normal');\r\n        pdf.text(metric.label, x + 5, y + 8);\r\n        \r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text(metric.value, x + 5, y + 16);\r\n      });\r\n\r\n      yPosition += 60;\r\n\r\n      // Executive Summary Section\r\n      pdf.setFillColor(239, 246, 255); // Light blue background\r\n      pdf.rect(14, yPosition, pageWidth - 28, 40, 'F');\r\n      \r\n      pdf.setTextColor(31, 41, 55);\r\n      pdf.setFontSize(14);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.text('📋 Executive Summary', 20, yPosition + 12);\r\n      \r\n      pdf.setFontSize(10);\r\n      pdf.setFont('helvetica', 'normal');\r\n      pdf.setTextColor(75, 85, 99);\r\n      \r\n      const summaryText = [\r\n        `This comprehensive ${reportType.replace(/-/g, ' ')} report provides detailed insights into your fleet operations.`,\r\n        `During the selected period, your fleet generated ₹${metrics.totalRevenue.toLocaleString('en-IN')} in revenue through ${metrics.totalTrips} completed trips.`,\r\n        `With ${metrics.activeVehicles} active vehicles and ${metrics.activeDrivers} drivers, your fleet utilization shows strong operational efficiency.`,\r\n        `The data presented below is sourced directly from your Supabase database and reflects real-time operational metrics.`\r\n      ];\r\n      \r\n      summaryText.forEach((text, index) => {\r\n        pdf.text(text, 20, yPosition + 20 + (index * 5));\r\n      });\r\n\r\n      yPosition += 50;\r\n\r\n      // Detailed Analysis Section\r\n      pdf.setFontSize(14);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.setTextColor(31, 41, 55);\r\n      pdf.text('📈 Detailed Analysis', 14, yPosition);\r\n      yPosition += 15;\r\n\r\n      // Add specific report content based on type\r\n      switch (reportType) {\r\n        case 'trip-summary':\r\n          await addTripSummaryContent(pdf, yPosition, dateRange);\r\n          break;\r\n        case 'week-comparison':\r\n        case 'month-comparison':\r\n          await addComparisonContent(pdf, yPosition, reportType, dateRange);\r\n          break;\r\n        case 'fuel-analysis':\r\n          await addFuelAnalysisContent(pdf, yPosition, dateRange);\r\n          break;\r\n        case 'expense-report':\r\n          await addExpenseReportContent(pdf, yPosition, dateRange);\r\n          break;\r\n        default:\r\n          await addGenericReportContent(pdf, yPosition, reportType, dateRange);\r\n      }\r\n\r\n      // Add footer with company branding\r\n      const pageCount = pdf.internal.pages.length - 1;\r\n      for (let i = 1; i <= pageCount; i++) {\r\n        pdf.setPage(i);\r\n        \r\n        // Footer background\r\n        pdf.setFillColor(31, 41, 55);\r\n        pdf.rect(0, pageHeight - 20, pageWidth, 20, 'F');\r\n        \r\n        // Footer text\r\n        pdf.setTextColor(255, 255, 255);\r\n        pdf.setFontSize(8);\r\n        pdf.setFont('helvetica', 'normal');\r\n        pdf.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 8, { align: 'center' });\r\n        pdf.text('© 2024 AVS - Auto Vital Solution | Intelligent Fleet Management', 14, pageHeight - 8);\r\n        pdf.text('Generated by AVS Fleet Management System', pageWidth - 14, pageHeight - 8, { align: 'right' });\r\n      }\r\n\r\n      // Save the PDF\r\n      pdf.save(`AVS-${reportType}-${format(new Date(), 'yyyy-MM-dd')}.pdf`);\r\n      \r\n      // Show success message\r\n      alert('Enhanced report generated successfully!');\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      alert('Error generating report. Please try again.');\r\n    } finally {\r\n      setGeneratingReport(null);\r\n    }\r\n  };\r\n\r\n  // Helper function to add trip summary content\r\n  const addTripSummaryContent = async (pdf: any, yPosition: number, dateRange: any) => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select(`\r\n          *,\r\n          vehicle:vehicles(registration_number),\r\n          driver:drivers(name)\r\n        `)\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString())\r\n        .limit(50);\r\n\r\n      if (trips && trips.length > 0) {\r\n        // Summary statistics\r\n        const totalDistance = trips.reduce((sum, trip) => \r\n          sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0);\r\n        const totalFuel = trips.reduce((sum, trip) => \r\n          sum + (trip.total_fuel_cost || 0), 0);\r\n        const avgDistance = trips.length ? totalDistance / trips.length : 0;\r\n\r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.setTextColor(31, 41, 55);\r\n        pdf.text('Trip Summary Statistics', 14, yPosition);\r\n        yPosition += 10;\r\n\r\n        pdf.setFontSize(10);\r\n        pdf.setFont('helvetica', 'normal');\r\n        pdf.setTextColor(75, 85, 99);\r\n        pdf.text(`• Total Distance Covered: ${totalDistance.toFixed(0)} km`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Total Fuel Cost: ₹${totalFuel.toFixed(2)}`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Average Distance per Trip: ${avgDistance.toFixed(1)} km`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Fuel Efficiency: ${totalDistance > 0 ? (totalDistance / totalFuel).toFixed(2) : 0} km/₹`, 20, yPosition);\r\n        yPosition += 15;\r\n\r\n        // Trip details table\r\n        const tableData = trips.slice(0, 20).map(trip => [\r\n          format(new Date(trip.created_at), 'dd/MM/yy'),\r\n          trip.vehicle?.registration_number || 'N/A',\r\n          trip.driver?.name || 'N/A',\r\n          `${trip.from_location || 'N/A'} → ${trip.to_location || 'N/A'}`,\r\n          `${((trip.end_km || 0) - (trip.start_km || 0)).toFixed(0)} km`,\r\n          `₹${(trip.total_fuel_cost || 0).toFixed(2)}`\r\n        ]);\r\n\r\n        if (tableData.length > 0) {\r\n          pdf.autoTable({\r\n            head: [['Date', 'Vehicle', 'Driver', 'Route', 'Distance', 'Fuel Cost']],\r\n            body: tableData,\r\n            startY: yPosition,\r\n            theme: 'grid',\r\n            headStyles: { \r\n              fillColor: [59, 130, 246],\r\n              textColor: [255, 255, 255],\r\n              fontSize: 9\r\n            },\r\n            bodyStyles: { fontSize: 8 },\r\n            alternateRowStyles: { fillColor: [249, 250, 251] }\r\n          });\r\n        }\r\n      } else {\r\n        pdf.setFontSize(10);\r\n        pdf.setTextColor(239, 68, 68);\r\n        pdf.text('No trip data available for the selected period.', 14, yPosition);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding trip summary:', error);\r\n    }\r\n  };\r\n\r\n  // Helper function to add comparison content\r\n  const addComparisonContent = async (pdf: any, yPosition: number, reportType: string, dateRange: any) => {\r\n    try {\r\n      let currentPeriodStart, currentPeriodEnd, previousPeriodStart, previousPeriodEnd;\r\n      \r\n      if (reportType === 'week-comparison') {\r\n        currentPeriodStart = startOfWeek(new Date(), { weekStartsOn: 1 });\r\n        currentPeriodEnd = endOfWeek(new Date(), { weekStartsOn: 1 });\r\n        previousPeriodStart = startOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 });\r\n        previousPeriodEnd = endOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 });\r\n      } else {\r\n        currentPeriodStart = startOfMonth(new Date());\r\n        currentPeriodEnd = endOfMonth(new Date());\r\n        previousPeriodStart = startOfMonth(subMonths(new Date(), 1));\r\n        previousPeriodEnd = endOfMonth(subMonths(new Date(), 1));\r\n      }\r\n\r\n      const { data: currentTrips } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .gte('created_at', currentPeriodStart.toISOString())\r\n        .lte('created_at', currentPeriodEnd.toISOString());\r\n\r\n      const { data: previousTrips } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .gte('created_at', previousPeriodStart.toISOString())\r\n        .lte('created_at', previousPeriodEnd.toISOString());\r\n\r\n      const calculateMetrics = (trips: any[]) => {\r\n        return {\r\n          trips: trips?.length || 0,\r\n          distance: trips?.reduce((sum, trip) => sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0,\r\n          fuel: trips?.reduce((sum, trip) => sum + (trip.total_fuel_cost || 0), 0) || 0,\r\n          revenue: trips?.reduce((sum, trip) => sum + ((trip.end_km || 0) - (trip.start_km || 0)) * 10, 0) || 0\r\n        };\r\n      };\r\n\r\n      const current = calculateMetrics(currentTrips || []);\r\n      const previous = calculateMetrics(previousTrips || []);\r\n\r\n      const calculatePercentChange = (old: number, newVal: number) => {\r\n        if (old === 0) return newVal > 0 ? 100 : 0;\r\n        return ((newVal - old) / old) * 100;\r\n      };\r\n\r\n      pdf.setFontSize(12);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.setTextColor(31, 41, 55);\r\n      pdf.text('Period-over-Period Comparison', 14, yPosition);\r\n      yPosition += 15;\r\n\r\n      const comparisonData = [\r\n        ['Metric', reportType === 'week-comparison' ? 'This Week' : 'This Month', \r\n         reportType === 'week-comparison' ? 'Last Week' : 'Last Month', 'Change', '% Change'],\r\n        ['Total Trips', current.trips.toString(), previous.trips.toString(), \r\n         (current.trips - previous.trips).toString(),\r\n         `${calculatePercentChange(previous.trips, current.trips).toFixed(1)}%`],\r\n        ['Distance (km)', current.distance.toFixed(0), previous.distance.toFixed(0),\r\n         (current.distance - previous.distance).toFixed(0),\r\n         `${calculatePercentChange(previous.distance, current.distance).toFixed(1)}%`],\r\n        ['Revenue (₹)', current.revenue.toFixed(0), previous.revenue.toFixed(0),\r\n         (current.revenue - previous.revenue).toFixed(0),\r\n         `${calculatePercentChange(previous.revenue, current.revenue).toFixed(1)}%`],\r\n        ['Fuel Cost (₹)', current.fuel.toFixed(2), previous.fuel.toFixed(2),\r\n         (current.fuel - previous.fuel).toFixed(2),\r\n         `${calculatePercentChange(previous.fuel, current.fuel).toFixed(1)}%`]\r\n      ];\r\n\r\n      pdf.autoTable({\r\n        head: [comparisonData[0]],\r\n        body: comparisonData.slice(1),\r\n        startY: yPosition,\r\n        theme: 'striped',\r\n        headStyles: { \r\n          fillColor: [34, 197, 94],\r\n          textColor: [255, 255, 255],\r\n          fontSize: 9\r\n        },\r\n        bodyStyles: { fontSize: 8 },\r\n        alternateRowStyles: { fillColor: [249, 250, 251] }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding comparison content:', error);\r\n    }\r\n  };\r\n\r\n  // Helper function to add fuel analysis content\r\n  const addFuelAnalysisContent = async (pdf: any, yPosition: number, dateRange: any) => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select('total_fuel_cost, start_km, end_km, vehicle_id')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (trips && trips.length > 0) {\r\n        const totalFuel = trips.reduce((sum, trip) => sum + (trip.total_fuel_cost || 0), 0);\r\n        const totalDistance = trips.reduce((sum, trip) => \r\n          sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0);\r\n        const avgFuelCost = trips.length ? totalFuel / trips.length : 0;\r\n        const fuelEfficiency = totalFuel > 0 ? totalDistance / totalFuel : 0;\r\n\r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.setTextColor(31, 41, 55);\r\n        pdf.text('Fuel Analysis Summary', 14, yPosition);\r\n        yPosition += 15;\r\n\r\n        pdf.setFontSize(10);\r\n        pdf.setFont('helvetica', 'normal');\r\n        pdf.setTextColor(75, 85, 99);\r\n        pdf.text(`• Total Fuel Expenditure: ₹${totalFuel.toFixed(2)}`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Average Fuel Cost per Trip: ₹${avgFuelCost.toFixed(2)}`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Fuel Efficiency: ${fuelEfficiency.toFixed(2)} km/₹`, 20, yPosition);\r\n        yPosition += 6;\r\n        pdf.text(`• Total Distance Covered: ${totalDistance.toFixed(0)} km`, 20, yPosition);\r\n      } else {\r\n        pdf.setFontSize(10);\r\n        pdf.setTextColor(239, 68, 68);\r\n        pdf.text('No fuel data available for the selected period.', 14, yPosition);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding fuel analysis:', error);\r\n    }\r\n  };\r\n\r\n  // Helper function to add expense report content\r\n  const addExpenseReportContent = async (pdf: any, yPosition: number, dateRange: any) => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select('total_fuel_cost, total_road_expenses, driver_expense, breakdown_expense, unloading_expense, miscellaneous_expense')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (trips && trips.length > 0) {\r\n        const expenses = {\r\n          'Fuel': 0,\r\n          'Road Expenses': 0,\r\n          'Driver Expenses': 0,\r\n          'Breakdown': 0,\r\n          'Unloading': 0,\r\n          'Miscellaneous': 0\r\n        };\r\n\r\n        trips.forEach(trip => {\r\n          expenses['Fuel'] += trip.total_fuel_cost || 0;\r\n          expenses['Road Expenses'] += trip.total_road_expenses || 0;\r\n          expenses['Driver Expenses'] += trip.driver_expense || 0;\r\n          expenses['Breakdown'] += trip.breakdown_expense || 0;\r\n          expenses['Unloading'] += trip.unloading_expense || 0;\r\n          expenses['Miscellaneous'] += trip.miscellaneous_expense || 0;\r\n        });\r\n\r\n        const totalExpenses = Object.values(expenses).reduce((sum, val) => sum + val, 0);\r\n\r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.setTextColor(31, 41, 55);\r\n        pdf.text('Expense Breakdown Analysis', 14, yPosition);\r\n        yPosition += 15;\r\n\r\n        const expenseData = Object.entries(expenses)\r\n          .filter(([_, amount]) => amount > 0)\r\n          .map(([category, amount]) => [\r\n            category,\r\n            `₹${amount.toFixed(2)}`,\r\n            `${((amount / totalExpenses) * 100).toFixed(1)}%`\r\n          ]);\r\n\r\n        if (expenseData.length > 0) {\r\n          pdf.autoTable({\r\n            head: [['Expense Category', 'Amount', 'Percentage']],\r\n            body: expenseData,\r\n            startY: yPosition,\r\n            theme: 'grid',\r\n            headStyles: { \r\n              fillColor: [239, 68, 68],\r\n              textColor: [255, 255, 255],\r\n              fontSize: 9\r\n            },\r\n            bodyStyles: { fontSize: 8 },\r\n            alternateRowStyles: { fillColor: [254, 242, 242] }\r\n          });\r\n        }\r\n      } else {\r\n        pdf.setFontSize(10);\r\n        pdf.setTextColor(239, 68, 68);\r\n        pdf.text('No expense data available for the selected period.', 14, yPosition);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding expense report:', error);\r\n    }\r\n  };\r\n\r\n  // Helper function to add generic report content\r\n  const addGenericReportContent = async (pdf: any, yPosition: number, reportType: string, dateRange: any) => {\r\n    pdf.setFontSize(12);\r\n    pdf.setFont('helvetica', 'bold');\r\n    pdf.setTextColor(31, 41, 55);\r\n    pdf.text(`${reportType.replace(/-/g, ' ').toUpperCase()} Analysis`, 14, yPosition);\r\n    yPosition += 15;\r\n\r\n    pdf.setFontSize(10);\r\n    pdf.setFont('helvetica', 'normal');\r\n    pdf.setTextColor(75, 85, 99);\r\n    pdf.text('This report provides comprehensive insights into your fleet operations.', 14, yPosition);\r\n    yPosition += 6;\r\n    pdf.text('All data is sourced from your live Supabase database and reflects current operational status.', 14, yPosition);\r\n    yPosition += 6;\r\n    pdf.text('For more detailed analysis, please contact your fleet management team.', 14, yPosition);\r\n  };\r\n\r\n  const reportTypes = [\r\n    {\r\n      id: 'week-comparison',\r\n      name: 'Weekly Comparison',\r\n      description: 'This week vs last week',\r\n      icon: <TrendingUp className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'month-comparison',\r\n      name: 'Monthly Comparison',\r\n      description: 'Month-over-month analysis',\r\n      icon: <BarChart3 className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'year-comparison',\r\n      name: 'Yearly Comparison',\r\n      description: 'Year-over-year analysis',\r\n      icon: <FileSpreadsheet className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'trip-summary',\r\n      name: 'Trip Summary',\r\n      description: 'All trip details',\r\n      icon: <Package className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'vehicle-utilization',\r\n      name: 'Vehicle Utilization',\r\n      description: 'Vehicle usage patterns',\r\n      icon: <Truck className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'driver-performance',\r\n      name: 'Driver Performance',\r\n      description: 'Driver efficiency',\r\n      icon: <Users className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'fuel-analysis',\r\n      name: 'Fuel Analysis',\r\n      description: 'Fuel usage & costs',\r\n      icon: <Fuel className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'expense-report',\r\n      name: 'Expense Report',\r\n      description: 'All expenses',\r\n      icon: <DollarSign className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'maintenance',\r\n      name: 'Maintenance',\r\n      description: 'Service schedules',\r\n      icon: <Wrench className=\"h-4 w-4\" />,\r\n      category: 'maintenance'\r\n    },\r\n    {\r\n      id: 'compliance',\r\n      name: 'Compliance',\r\n      description: 'Document validity',\r\n      icon: <FileText className=\"h-4 w-4\" />,\r\n      category: 'compliance'\r\n    }\r\n  ];\r\n\r\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"p-4 sm:p-6 max-w-7xl mx-auto\">\r\n      {/* Header - Fixed to match AVS style */}\r\n      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-semibold text-gray-900 flex items-center\">\r\n              <Activity className=\"h-6 w-6 mr-2 text-primary-600\" />\r\n              Reporting & Analytics\r\n            </h1>\r\n            <p className=\"text-sm text-gray-500 mt-1\">Visual insights and downloadable reports</p>\r\n          </div>\r\n          \r\n          {/* Tab Switcher */}\r\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setActiveTab('dashboard')}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\r\n                activeTab === 'dashboard' \r\n                  ? 'bg-primary-600 text-white shadow-sm' \r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Eye className=\"h-4 w-4 inline mr-2\" />\r\n              Visual Dashboard\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('reports')}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\r\n                activeTab === 'reports' \r\n                  ? 'bg-primary-600 text-white shadow-sm' \r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Download className=\"h-4 w-4 inline mr-2\" />\r\n              Download Reports\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Date Range Selector */}\r\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n        <div className=\"flex flex-wrap items-center gap-4\">\r\n          <Calendar className=\"h-5 w-5 text-gray-400\" />\r\n          <select\r\n            value={selectedDateRange}\r\n            onChange={(e) => updateDateRange(e.target.value)}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n          >\r\n            <option value=\"today\">Today</option>\r\n            <option value=\"yesterday\">Yesterday</option>\r\n            <option value=\"thisWeek\">This Week</option>\r\n            <option value=\"lastWeek\">Last Week</option>\r\n            <option value=\"thisMonth\">This Month</option>\r\n            <option value=\"lastMonth\">Last Month</option>\r\n            <option value=\"last30Days\">Last 30 Days</option>\r\n            <option value=\"custom\">Custom Range</option>\r\n          </select>\r\n          \r\n          {selectedDateRange === 'custom' && (\r\n            <div className=\"flex items-center gap-2\">\r\n              <input\r\n                type=\"date\"\r\n                value={customStartDate}\r\n                onChange={(e) => {\r\n                  setCustomStartDate(e.target.value);\r\n                  if (e.target.value && customEndDate) {\r\n                    updateDateRange('custom');\r\n                  }\r\n                }}\r\n                className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n              />\r\n              <span className=\"text-gray-500\">to</span>\r\n              <input\r\n                type=\"date\"\r\n                value={customEndDate}\r\n                onChange={(e) => {\r\n                  setCustomEndDate(e.target.value);\r\n                  if (customStartDate && e.target.value) {\r\n                    updateDateRange('custom');\r\n                  }\r\n                }}\r\n                className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          {activeTab === 'dashboard' && (\r\n            <button\r\n              onClick={fetchDashboardData}\r\n              disabled={loading}\r\n              className=\"ml-auto px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 transition-colors flex items-center gap-2 text-sm font-medium\"\r\n            >\r\n              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n              Refresh\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Visual Dashboard Tab */}\r\n      {activeTab === 'dashboard' && (\r\n        <>\r\n          {/* Metrics Grid - Updated with Rupees */}\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Revenue</p>\r\n                  <p className=\"mt-1 text-2xl font-semibold text-gray-900\">\r\n                    ₹{metrics.totalRevenue.toLocaleString('en-IN')}\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-3 bg-green-100 rounded-lg\">\r\n                  <DollarSign className=\"h-6 w-6 text-green-600\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Trips</p>\r\n                  <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.totalTrips}</p>\r\n                </div>\r\n                <div className=\"p-3 bg-blue-100 rounded-lg\">\r\n                  <Package className=\"h-6 w-6 text-blue-600\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Active Vehicles</p>\r\n                  <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.activeVehicles}</p>\r\n                </div>\r\n                <div className=\"p-3 bg-purple-100 rounded-lg\">\r\n                  <Truck className=\"h-6 w-6 text-purple-600\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Active Drivers</p>\r\n                  <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.activeDrivers}</p>\r\n                </div>\r\n                <div className=\"p-3 bg-orange-100 rounded-lg\">\r\n                  <Users className=\"h-6 w-6 text-orange-600\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Charts Grid */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Trip Trends */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Trip Trends</h3>\r\n              {chartData.tripTrends.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <LineChart data={chartData.tripTrends}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                    <XAxis dataKey=\"date\" stroke=\"#6B7280\" fontSize={12} />\r\n                    <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                    <Tooltip formatter={(value: any, name: string) => \r\n                      name === 'Revenue' ? `₹${value}` : value\r\n                    } />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"trips\" stroke=\"#3B82F6\" name=\"Trips\" strokeWidth={2} />\r\n                    <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#10B981\" name=\"Revenue\" strokeWidth={2} />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                  No data available for the selected period\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Vehicle Utilization */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Vehicle Utilization</h3>\r\n              {chartData.vehicleUtilization.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <BarChart data={chartData.vehicleUtilization}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                    <XAxis dataKey=\"vehicle\" stroke=\"#6B7280\" fontSize={12} />\r\n                    <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                    <Tooltip formatter={(value: any) => `${value}%`} />\r\n                    <Bar dataKey=\"utilization\" fill=\"#3B82F6\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                  No vehicle data available\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Driver Performance */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Driver Performance</h3>\r\n              {chartData.driverPerformance.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <BarChart data={chartData.driverPerformance}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                    <XAxis dataKey=\"driver\" stroke=\"#6B7280\" fontSize={12} />\r\n                    <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                    <Tooltip formatter={(value: any) => `${value} km/₹`} />\r\n                    <Bar dataKey=\"efficiency\" fill=\"#10B981\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                  No driver data available\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Expense Breakdown */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Expense Breakdown</h3>\r\n              {chartData.expenseBreakdown.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={chartData.expenseBreakdown}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      labelLine={false}\r\n                      label={(entry: any) => `${entry.category}: ₹${entry.amount}`}\r\n                      outerRadius={80}\r\n                      fill=\"#8884d8\"\r\n                      dataKey=\"amount\"\r\n                    >\r\n                      {chartData.expenseBreakdown.map((entry: any, index: number) => (\r\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value: any) => `₹${value}`} />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                  No expense data available\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Download Reports Tab */}\r\n      {activeTab === 'reports' && (\r\n        <div>\r\n          {/* Quick Downloads */}\r\n          <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Downloads</h3>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\r\n              {reportTypes.slice(0, showAllReports ? reportTypes.length : 5).map((report) => (\r\n                <button\r\n                  key={report.id}\r\n                  onClick={() => generatePDFReport(report.id)}\r\n                  disabled={generatingReport === report.id}\r\n                  className=\"flex flex-col items-center p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-all hover:shadow-md disabled:opacity-50\"\r\n                >\r\n                  <div className={`p-3 rounded-lg mb-2 ${\r\n                    report.category === 'comparison' ? 'bg-green-100 text-green-600' :\r\n                    report.category === 'financial' ? 'bg-blue-100 text-blue-600' :\r\n                    report.category === 'operations' ? 'bg-purple-100 text-purple-600' :\r\n                    report.category === 'maintenance' ? 'bg-orange-100 text-orange-600' :\r\n                    'bg-gray-100 text-gray-600'\r\n                  }`}>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-5 w-5 animate-spin\" />\r\n                    ) : (\r\n                      report.icon\r\n                    )}\r\n                  </div>\r\n                  <span className=\"text-sm font-medium text-gray-900\">{report.name}</span>\r\n                  <span className=\"text-xs text-gray-500 mt-1 text-center\">{report.description}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n            \r\n            {!showAllReports && reportTypes.length > 5 && (\r\n              <button\r\n                onClick={() => setShowAllReports(true)}\r\n                className=\"mt-4 flex items-center justify-center w-full py-2 text-primary-600 hover:text-primary-700 font-medium\"\r\n              >\r\n                <ChevronDown className=\"h-4 w-4 mr-1\" />\r\n                Show All Reports ({reportTypes.length - 5} more)\r\n              </button>\r\n            )}\r\n            \r\n            {showAllReports && (\r\n              <button\r\n                onClick={() => setShowAllReports(false)}\r\n                className=\"mt-4 flex items-center justify-center w-full py-2 text-primary-600 hover:text-primary-700 font-medium\"\r\n              >\r\n                <ChevronUp className=\"h-4 w-4 mr-1\" />\r\n                Show Less\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Categorized Reports */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {/* Smart Comparisons */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                <TrendingUp className=\"h-5 w-5 mr-2 text-green-600\" />\r\n                Smart Comparisons\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'comparison').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generatePDFReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                  >\r\n                    <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Financial Reports */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                <DollarSign className=\"h-5 w-5 mr-2 text-blue-600\" />\r\n                Financial Reports\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'financial').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generatePDFReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                  >\r\n                    <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Operations Reports */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                <Package className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                Operations Reports\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'operations').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generatePDFReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                  >\r\n                    <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CompleteFixedReportingDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\DriverRankingSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\FixedUnifiedReportingDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'selectedDateRange' and 'updateDateRange'. Either include them or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [selectedDateRange, updateDateRange]","fix":{"range":[2404,2406],"text":"[selectedDateRange, updateDateRange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [dateRange, activeTab, fetchDashboardData]","fix":{"range":[2553,2575],"text":"[dateRange, activeTab, fetchDashboardData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport {\r\n  Calendar,\r\n  TrendingUp,\r\n  Users,\r\n  Truck,\r\n  DollarSign,\r\n  Package,\r\n  AlertCircle,\r\n  Download,\r\n  Filter,\r\n  RefreshCw,\r\n  FileText,\r\n  Fuel,\r\n  MapPin,\r\n  Clock,\r\n  Wrench,\r\n  BarChart3,\r\n  PieChart as PieChartIcon,\r\n  FileSpreadsheet,\r\n  Eye,\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Activity\r\n} from 'lucide-react';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport { format, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, subDays, subMonths } from 'date-fns';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\n// Extend jsPDF type for autoTable\r\ndeclare module 'jspdf' {\r\n  interface jsPDF {\r\n    autoTable: (options: any) => jsPDF;\r\n  }\r\n}\r\n\r\ninterface ReportMetrics {\r\n  totalRevenue: number;\r\n  totalTrips: number;\r\n  activeVehicles: number;\r\n  activeDrivers: number;\r\n  avgTripDistance: number;\r\n  avgFuelEfficiency: number;\r\n  maintenanceCosts: number;\r\n  pendingMaintenance: number;\r\n}\r\n\r\nconst FixedUnifiedReportingDashboard: React.FC = () => {\r\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'reports'>('dashboard');\r\n  const [metrics, setMetrics] = useState<ReportMetrics>({\r\n    totalRevenue: 0,\r\n    totalTrips: 0,\r\n    activeVehicles: 0,\r\n    activeDrivers: 0,\r\n    avgTripDistance: 0,\r\n    avgFuelEfficiency: 0,\r\n    maintenanceCosts: 0,\r\n    pendingMaintenance: 0\r\n  });\r\n\r\n  const [chartData, setChartData] = useState<any>({\r\n    tripTrends: [],\r\n    vehicleUtilization: [],\r\n    driverPerformance: [],\r\n    expenseBreakdown: []\r\n  });\r\n\r\n  const [dateRange, setDateRange] = useState({\r\n    startDate: startOfMonth(new Date()),\r\n    endDate: endOfMonth(new Date())\r\n  });\r\n\r\n  const [selectedDateRange, setSelectedDateRange] = useState('thisMonth');\r\n  const [customStartDate, setCustomStartDate] = useState('');\r\n  const [customEndDate, setCustomEndDate] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [generatingReport, setGeneratingReport] = useState<string | null>(null);\r\n  const [showAllReports, setShowAllReports] = useState(false);\r\n\r\n  // Initialize date range properly\r\n  useEffect(() => {\r\n    updateDateRange(selectedDateRange);\r\n  }, []);\r\n\r\n  // Fetch data when date range changes\r\n  useEffect(() => {\r\n    if (activeTab === 'dashboard') {\r\n      fetchDashboardData();\r\n    }\r\n  }, [dateRange, activeTab]);\r\n\r\n  const updateDateRange = (rangeType: string) => {\r\n    const now = new Date();\r\n    let start: Date, end: Date;\r\n\r\n    switch (rangeType) {\r\n      case 'today':\r\n        start = startOfDay(now);\r\n        end = endOfDay(now);\r\n        break;\r\n      case 'yesterday':\r\n        start = startOfDay(subDays(now, 1));\r\n        end = endOfDay(subDays(now, 1));\r\n        break;\r\n      case 'thisWeek':\r\n        start = startOfWeek(now, { weekStartsOn: 1 });\r\n        end = endOfWeek(now, { weekStartsOn: 1 });\r\n        break;\r\n      case 'lastWeek':\r\n        start = startOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        end = endOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        break;\r\n      case 'thisMonth':\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n        break;\r\n      case 'lastMonth':\r\n        start = startOfMonth(subMonths(now, 1));\r\n        end = endOfMonth(subMonths(now, 1));\r\n        break;\r\n      case 'last30Days':\r\n        start = subDays(now, 30);\r\n        end = now;\r\n        break;\r\n      case 'custom':\r\n        start = customStartDate ? new Date(customStartDate) : startOfMonth(now);\r\n        end = customEndDate ? new Date(customEndDate) : endOfMonth(now);\r\n        break;\r\n      default:\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n    }\r\n\r\n    setDateRange({ startDate: start, endDate: end });\r\n    setSelectedDateRange(rangeType);\r\n  };\r\n\r\n  const fetchDashboardData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch all data in parallel\r\n      const [metricsData, trends, utilization, performance, expenses] = await Promise.all([\r\n        fetchMetrics(),\r\n        fetchTripTrends(),\r\n        fetchVehicleUtilization(),\r\n        fetchDriverPerformance(),\r\n        fetchExpenseBreakdown()\r\n      ]);\r\n\r\n      console.log('Dashboard data fetched successfully');\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      // Get trips for the selected period\r\n      const { data: trips, error: tripsError } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (tripsError) {\r\n        console.error('Error fetching trips:', tripsError);\r\n      }\r\n\r\n      // Calculate revenue (using a simple formula - adjust based on your business logic)\r\n      const totalRevenue = trips?.reduce((sum, trip) => {\r\n        const distance = (trip.end_km || 0) - (trip.start_km || 0);\r\n        return sum + (distance * 10); // Example: $10 per km\r\n      }, 0) || 0;\r\n\r\n      const totalDistance = trips?.reduce((sum, trip) => \r\n        sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0;\r\n\r\n      const avgDistance = trips?.length ? totalDistance / trips.length : 0;\r\n\r\n      // Get active vehicles\r\n      const { count: vehicleCount } = await supabase\r\n        .from('vehicles')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      // Get active drivers\r\n      const { count: driverCount } = await supabase\r\n        .from('drivers')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      // Get maintenance data\r\n      const { data: maintenance } = await supabase\r\n        .from('maintenance')\r\n        .select('cost, status')\r\n        .gte('scheduled_date', dateRange.startDate.toISOString())\r\n        .lte('scheduled_date', dateRange.endDate.toISOString());\r\n\r\n      const maintenanceCosts = maintenance?.reduce((sum, m) => sum + (m.cost || 0), 0) || 0;\r\n      const pendingMaintenance = maintenance?.filter(m => m.status === 'scheduled').length || 0;\r\n\r\n      setMetrics({\r\n        totalRevenue: Math.round(totalRevenue),\r\n        totalTrips: trips?.length || 0,\r\n        activeVehicles: vehicleCount || 0,\r\n        activeDrivers: driverCount || 0,\r\n        avgTripDistance: Math.round(avgDistance),\r\n        avgFuelEfficiency: 8.5,\r\n        maintenanceCosts: Math.round(maintenanceCosts),\r\n        pendingMaintenance\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchMetrics:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchTripTrends = async () => {\r\n    try {\r\n      const { data: trips, error } = await supabase\r\n        .from('trips')\r\n        .select('created_at, start_km, end_km')\r\n        .gte('created_at', subMonths(dateRange.endDate, 6).toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString())\r\n        .order('created_at');\r\n\r\n      if (error) {\r\n        console.error('Error fetching trip trends:', error);\r\n        return;\r\n      }\r\n\r\n      // Group by date\r\n      const grouped = trips?.reduce((acc: any, trip) => {\r\n        const date = format(new Date(trip.created_at), 'MMM dd');\r\n        if (!acc[date]) {\r\n          acc[date] = { date, trips: 0, revenue: 0 };\r\n        }\r\n        acc[date].trips++;\r\n        const distance = (trip.end_km || 0) - (trip.start_km || 0);\r\n        acc[date].revenue += distance * 10;\r\n        return acc;\r\n      }, {}) || {};\r\n\r\n      const trendData = Object.values(grouped).slice(-7); // Last 7 days\r\n      setChartData((prev: any) => ({\r\n        ...prev,\r\n        tripTrends: trendData\r\n      }));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchTripTrends:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchVehicleUtilization = async () => {\r\n    try {\r\n      const { data: vehicles, error } = await supabase\r\n        .from('vehicles')\r\n        .select('id, registration_number')\r\n        .eq('status', 'active')\r\n        .limit(5);\r\n\r\n      if (error) {\r\n        console.error('Error fetching vehicles:', error);\r\n        return;\r\n      }\r\n\r\n      const utilizationData = await Promise.all(\r\n        (vehicles || []).map(async (vehicle) => {\r\n          const { count } = await supabase\r\n            .from('trips')\r\n            .select('*', { count: 'exact', head: true })\r\n            .eq('vehicle_id', vehicle.id)\r\n            .gte('created_at', dateRange.startDate.toISOString())\r\n            .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n          const utilization = Math.min(((count || 0) / 30) * 100, 100);\r\n          return {\r\n            vehicle: vehicle.registration_number.slice(0, 10),\r\n            trips: count || 0,\r\n            utilization: Math.round(utilization)\r\n          };\r\n        })\r\n      );\r\n\r\n      setChartData((prev: any) => ({\r\n        ...prev,\r\n        vehicleUtilization: utilizationData\r\n      }));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchVehicleUtilization:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchDriverPerformance = async () => {\r\n    try {\r\n      const { data: drivers, error } = await supabase\r\n        .from('drivers')\r\n        .select('id, name')\r\n        .eq('status', 'active')\r\n        .limit(5);\r\n\r\n      if (error) {\r\n        console.error('Error fetching drivers:', error);\r\n        return;\r\n      }\r\n\r\n      const performanceData = await Promise.all(\r\n        (drivers || []).map(async (driver) => {\r\n          const { data: trips } = await supabase\r\n            .from('trips')\r\n            .select('start_km, end_km, total_fuel_cost')\r\n            .eq('driver_id', driver.id)\r\n            .gte('created_at', dateRange.startDate.toISOString())\r\n            .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n          const totalDistance = trips?.reduce((sum, trip) => \r\n            sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0;\r\n\r\n          const efficiency = trips?.length ? totalDistance / trips.length : 0;\r\n\r\n          return {\r\n            driver: driver.name?.split(' ')[0] || 'Unknown',\r\n            trips: trips?.length || 0,\r\n            efficiency: Math.round(efficiency)\r\n          };\r\n        })\r\n      );\r\n\r\n      setChartData((prev: any) => ({\r\n        ...prev,\r\n        driverPerformance: performanceData\r\n      }));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchDriverPerformance:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchExpenseBreakdown = async () => {\r\n    try {\r\n      const { data: trips, error } = await supabase\r\n        .from('trips')\r\n        .select('total_fuel_cost, total_road_expenses, driver_expense, breakdown_expense')\r\n        .gte('created_at', dateRange.startDate.toISOString())\r\n        .lte('created_at', dateRange.endDate.toISOString());\r\n\r\n      if (error) {\r\n        console.error('Error fetching expenses:', error);\r\n        return;\r\n      }\r\n\r\n      const expenses = {\r\n        Fuel: 0,\r\n        Road: 0,\r\n        Driver: 0,\r\n        Breakdown: 0,\r\n        Maintenance: metrics.maintenanceCosts\r\n      };\r\n\r\n      trips?.forEach(trip => {\r\n        expenses.Fuel += trip.total_fuel_cost || 0;\r\n        expenses.Road += trip.total_road_expenses || 0;\r\n        expenses.Driver += trip.driver_expense || 0;\r\n        expenses.Breakdown += trip.breakdown_expense || 0;\r\n      });\r\n\r\n      const expenseData = Object.entries(expenses).map(([category, amount]) => ({\r\n        category,\r\n        amount: Math.round(amount)\r\n      })).filter(item => item.amount > 0);\r\n\r\n      setChartData((prev: any) => ({\r\n        ...prev,\r\n        expenseBreakdown: expenseData\r\n      }));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in fetchExpenseBreakdown:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const generatePDFReport = async (reportType: string) => {\r\n    setGeneratingReport(reportType);\r\n    \r\n    try {\r\n      const pdf = new jsPDF();\r\n      const pageWidth = pdf.internal.pageSize.getWidth();\r\n      \r\n      // Add header\r\n      pdf.setFontSize(20);\r\n      pdf.setTextColor(31, 41, 55); // gray-800\r\n      pdf.text('AVS Fleet Management Report', pageWidth / 2, 20, { align: 'center' });\r\n      \r\n      pdf.setFontSize(14);\r\n      pdf.setTextColor(75, 85, 99); // gray-600\r\n      pdf.text(reportType.replace(/-/g, ' ').toUpperCase(), pageWidth / 2, 30, { align: 'center' });\r\n      \r\n      pdf.setFontSize(10);\r\n      pdf.text(`Generated on: ${format(new Date(), 'dd MMM yyyy, HH:mm')}`, pageWidth / 2, 38, { align: 'center' });\r\n      pdf.text(`Period: ${format(dateRange.startDate, 'dd/MM/yyyy')} to ${format(dateRange.endDate, 'dd/MM/yyyy')}`, pageWidth / 2, 45, { align: 'center' });\r\n      \r\n      let yPosition = 60;\r\n\r\n      switch (reportType) {\r\n        case 'trip-summary': {\r\n          const { data: trips } = await supabase\r\n            .from('trips')\r\n            .select(`\r\n              *,\r\n              vehicle:vehicles(registration_number),\r\n              driver:drivers(name)\r\n            `)\r\n            .gte('created_at', dateRange.startDate.toISOString())\r\n            .lte('created_at', dateRange.endDate.toISOString())\r\n            .limit(100);\r\n\r\n          // Summary section\r\n          pdf.setFontSize(12);\r\n          pdf.setTextColor(31, 41, 55);\r\n          pdf.text('Summary', 14, yPosition);\r\n          yPosition += 10;\r\n\r\n          const totalTrips = trips?.length || 0;\r\n          const totalDistance = trips?.reduce((sum, trip) => \r\n            sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0;\r\n          const totalFuel = trips?.reduce((sum, trip) => \r\n            sum + (trip.total_fuel_cost || 0), 0) || 0;\r\n\r\n          pdf.setFontSize(10);\r\n          pdf.setTextColor(75, 85, 99);\r\n          pdf.text(`Total Trips: ${totalTrips}`, 14, yPosition);\r\n          yPosition += 6;\r\n          pdf.text(`Total Distance: ${totalDistance.toFixed(0)} km`, 14, yPosition);\r\n          yPosition += 6;\r\n          pdf.text(`Total Fuel Cost: $${totalFuel.toFixed(2)}`, 14, yPosition);\r\n          yPosition += 6;\r\n          pdf.text(`Average Distance per Trip: ${totalTrips ? (totalDistance / totalTrips).toFixed(1) : 0} km`, 14, yPosition);\r\n          yPosition += 15;\r\n\r\n          // Table\r\n          const tableData = trips?.map(trip => [\r\n            format(new Date(trip.created_at), 'dd/MM/yyyy'),\r\n            trip.vehicle?.registration_number || 'N/A',\r\n            trip.driver?.name || 'N/A',\r\n            `${trip.from_location || 'N/A'} → ${trip.to_location || 'N/A'}`,\r\n            `${((trip.end_km || 0) - (trip.start_km || 0)).toFixed(0)} km`,\r\n            `$${(trip.total_fuel_cost || 0).toFixed(2)}`\r\n          ]) || [];\r\n\r\n          if (tableData.length > 0) {\r\n            pdf.autoTable({\r\n              head: [['Date', 'Vehicle', 'Driver', 'Route', 'Distance', 'Fuel Cost']],\r\n              body: tableData.slice(0, 20), // First 20 rows\r\n              startY: yPosition,\r\n              theme: 'grid',\r\n              headStyles: { fillColor: [59, 130, 246] }, // blue-600\r\n              styles: { fontSize: 8 }\r\n            });\r\n          }\r\n          break;\r\n        }\r\n\r\n        case 'week-comparison':\r\n        case 'month-comparison': {\r\n          // Comparison logic\r\n          let currentPeriodStart, currentPeriodEnd, previousPeriodStart, previousPeriodEnd;\r\n          \r\n          if (reportType === 'week-comparison') {\r\n            currentPeriodStart = startOfWeek(new Date(), { weekStartsOn: 1 });\r\n            currentPeriodEnd = endOfWeek(new Date(), { weekStartsOn: 1 });\r\n            previousPeriodStart = startOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 });\r\n            previousPeriodEnd = endOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 });\r\n          } else {\r\n            currentPeriodStart = startOfMonth(new Date());\r\n            currentPeriodEnd = endOfMonth(new Date());\r\n            previousPeriodStart = startOfMonth(subMonths(new Date(), 1));\r\n            previousPeriodEnd = endOfMonth(subMonths(new Date(), 1));\r\n          }\r\n\r\n          const { data: currentTrips } = await supabase\r\n            .from('trips')\r\n            .select('*')\r\n            .gte('created_at', currentPeriodStart.toISOString())\r\n            .lte('created_at', currentPeriodEnd.toISOString());\r\n\r\n          const { data: previousTrips } = await supabase\r\n            .from('trips')\r\n            .select('*')\r\n            .gte('created_at', previousPeriodStart.toISOString())\r\n            .lte('created_at', previousPeriodEnd.toISOString());\r\n\r\n          const calculateMetrics = (trips: any[]) => {\r\n            return {\r\n              trips: trips?.length || 0,\r\n              distance: trips?.reduce((sum, trip) => sum + ((trip.end_km || 0) - (trip.start_km || 0)), 0) || 0,\r\n              fuel: trips?.reduce((sum, trip) => sum + (trip.total_fuel_cost || 0), 0) || 0,\r\n              expenses: trips?.reduce((sum, trip) => sum + \r\n                (trip.total_fuel_cost || 0) + \r\n                (trip.total_road_expenses || 0) + \r\n                (trip.driver_expense || 0), 0) || 0\r\n            };\r\n          };\r\n\r\n          const current = calculateMetrics(currentTrips || []);\r\n          const previous = calculateMetrics(previousTrips || []);\r\n\r\n          pdf.setFontSize(12);\r\n          pdf.text('Comparison Analysis', 14, yPosition);\r\n          yPosition += 10;\r\n\r\n          const comparisonData = [\r\n            ['Metric', reportType === 'week-comparison' ? 'This Week' : 'This Month', \r\n             reportType === 'week-comparison' ? 'Last Week' : 'Last Month', 'Change', '% Change'],\r\n            ['Total Trips', current.trips.toString(), previous.trips.toString(), \r\n             (current.trips - previous.trips).toString(),\r\n             previous.trips ? `${(((current.trips - previous.trips) / previous.trips) * 100).toFixed(1)}%` : 'N/A'],\r\n            ['Distance (km)', current.distance.toFixed(0), previous.distance.toFixed(0),\r\n             (current.distance - previous.distance).toFixed(0),\r\n             previous.distance ? `${(((current.distance - previous.distance) / previous.distance) * 100).toFixed(1)}%` : 'N/A'],\r\n            ['Fuel Cost', `$${current.fuel.toFixed(2)}`, `$${previous.fuel.toFixed(2)}`,\r\n             `$${(current.fuel - previous.fuel).toFixed(2)}`,\r\n             previous.fuel ? `${(((current.fuel - previous.fuel) / previous.fuel) * 100).toFixed(1)}%` : 'N/A'],\r\n            ['Total Expenses', `$${current.expenses.toFixed(2)}`, `$${previous.expenses.toFixed(2)}`,\r\n             `$${(current.expenses - previous.expenses).toFixed(2)}`,\r\n             previous.expenses ? `${(((current.expenses - previous.expenses) / previous.expenses) * 100).toFixed(1)}%` : 'N/A']\r\n          ];\r\n\r\n          pdf.autoTable({\r\n            head: [comparisonData[0]],\r\n            body: comparisonData.slice(1),\r\n            startY: yPosition,\r\n            theme: 'striped',\r\n            headStyles: { fillColor: [34, 197, 94] }, // green-500\r\n            styles: { fontSize: 9 }\r\n          });\r\n          break;\r\n        }\r\n\r\n        default:\r\n          pdf.text('Report generation in progress...', 14, yPosition);\r\n      }\r\n\r\n      // Add footer\r\n      const pageCount = pdf.internal.pages.length - 1;\r\n      for (let i = 1; i <= pageCount; i++) {\r\n        pdf.setPage(i);\r\n        pdf.setFontSize(8);\r\n        pdf.setTextColor(156, 163, 175); // gray-400\r\n        pdf.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pdf.internal.pageSize.getHeight() - 10, { align: 'center' });\r\n        pdf.text('© 2024 AVS - Auto Vital Solution', 14, pdf.internal.pageSize.getHeight() - 10);\r\n      }\r\n\r\n      // Save the PDF\r\n      pdf.save(`AVS-${reportType}-${format(new Date(), 'yyyy-MM-dd')}.pdf`);\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      alert('Error generating report. Please try again.');\r\n    } finally {\r\n      setGeneratingReport(null);\r\n    }\r\n  };\r\n\r\n  const reportTypes = [\r\n    {\r\n      id: 'week-comparison',\r\n      name: 'Weekly Comparison',\r\n      description: 'This week vs last week',\r\n      icon: <TrendingUp className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'month-comparison',\r\n      name: 'Monthly Comparison',\r\n      description: 'Month-over-month analysis',\r\n      icon: <BarChart3 className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'year-comparison',\r\n      name: 'Yearly Comparison',\r\n      description: 'Year-over-year analysis',\r\n      icon: <FileSpreadsheet className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'trip-summary',\r\n      name: 'Trip Summary',\r\n      description: 'All trip details',\r\n      icon: <Package className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'vehicle-utilization',\r\n      name: 'Vehicle Utilization',\r\n      description: 'Vehicle usage patterns',\r\n      icon: <Truck className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'driver-performance',\r\n      name: 'Driver Performance',\r\n      description: 'Driver efficiency',\r\n      icon: <Users className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'fuel-analysis',\r\n      name: 'Fuel Analysis',\r\n      description: 'Fuel usage & costs',\r\n      icon: <Fuel className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'expense-report',\r\n      name: 'Expense Report',\r\n      description: 'All expenses',\r\n      icon: <DollarSign className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'maintenance',\r\n      name: 'Maintenance',\r\n      description: 'Service schedules',\r\n      icon: <Wrench className=\"h-4 w-4\" />,\r\n      category: 'maintenance'\r\n    },\r\n    {\r\n      id: 'compliance',\r\n      name: 'Compliance',\r\n      description: 'Document validity',\r\n      icon: <FileText className=\"h-4 w-4\" />,\r\n      category: 'compliance'\r\n    }\r\n  ];\r\n\r\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"p-4 sm:p-6 max-w-7xl mx-auto\">\r\n        {/* Header - AVS Style */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-semibold text-gray-900 flex items-center\">\r\n                <Activity className=\"h-6 w-6 mr-2 text-primary-600\" />\r\n                Reporting & Analytics\r\n              </h1>\r\n              <p className=\"text-sm text-gray-500 mt-1\">Visual insights and downloadable reports</p>\r\n            </div>\r\n            \r\n            {/* Tab Switcher */}\r\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\r\n              <button\r\n                onClick={() => setActiveTab('dashboard')}\r\n                className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\r\n                  activeTab === 'dashboard' \r\n                    ? 'bg-primary-600 text-white shadow-sm' \r\n                    : 'text-gray-600 hover:text-gray-900'\r\n                }`}\r\n              >\r\n                <Eye className=\"h-4 w-4 inline mr-2\" />\r\n                Visual Dashboard\r\n              </button>\r\n              <button\r\n                onClick={() => setActiveTab('reports')}\r\n                className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\r\n                  activeTab === 'reports' \r\n                    ? 'bg-primary-600 text-white shadow-sm' \r\n                    : 'text-gray-600 hover:text-gray-900'\r\n                }`}\r\n              >\r\n                <Download className=\"h-4 w-4 inline mr-2\" />\r\n                Download Reports\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Date Range Selector */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n          <div className=\"flex flex-wrap items-center gap-4\">\r\n            <Calendar className=\"h-5 w-5 text-gray-400\" />\r\n            <select\r\n              value={selectedDateRange}\r\n              onChange={(e) => updateDateRange(e.target.value)}\r\n              className=\"px-4 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n            >\r\n              <option value=\"today\">Today</option>\r\n              <option value=\"yesterday\">Yesterday</option>\r\n              <option value=\"thisWeek\">This Week</option>\r\n              <option value=\"lastWeek\">Last Week</option>\r\n              <option value=\"thisMonth\">This Month</option>\r\n              <option value=\"lastMonth\">Last Month</option>\r\n              <option value=\"last30Days\">Last 30 Days</option>\r\n              <option value=\"custom\">Custom Range</option>\r\n            </select>\r\n            \r\n            {selectedDateRange === 'custom' && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <input\r\n                  type=\"date\"\r\n                  value={customStartDate}\r\n                  onChange={(e) => {\r\n                    setCustomStartDate(e.target.value);\r\n                    if (e.target.value && customEndDate) {\r\n                      updateDateRange('custom');\r\n                    }\r\n                  }}\r\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                />\r\n                <span className=\"text-gray-500\">to</span>\r\n                <input\r\n                  type=\"date\"\r\n                  value={customEndDate}\r\n                  onChange={(e) => {\r\n                    setCustomEndDate(e.target.value);\r\n                    if (customStartDate && e.target.value) {\r\n                      updateDateRange('custom');\r\n                    }\r\n                  }}\r\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                />\r\n              </div>\r\n            )}\r\n            \r\n            {activeTab === 'dashboard' && (\r\n              <button\r\n                onClick={fetchDashboardData}\r\n                disabled={loading}\r\n                className=\"ml-auto px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 transition-colors flex items-center gap-2 text-sm font-medium\"\r\n              >\r\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n                Refresh\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Visual Dashboard Tab */}\r\n        {activeTab === 'dashboard' && (\r\n          <>\r\n            {/* Metrics Grid */}\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n              <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Revenue</p>\r\n                    <p className=\"mt-1 text-2xl font-semibold text-gray-900\">\r\n                      ${metrics.totalRevenue.toLocaleString()}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-green-100 rounded-lg\">\r\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Trips</p>\r\n                    <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.totalTrips}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-blue-100 rounded-lg\">\r\n                    <Package className=\"h-6 w-6 text-blue-600\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Active Vehicles</p>\r\n                    <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.activeVehicles}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-purple-100 rounded-lg\">\r\n                    <Truck className=\"h-6 w-6 text-purple-600\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-white rounded-lg shadow-sm p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">Active Drivers</p>\r\n                    <p className=\"mt-1 text-2xl font-semibold text-gray-900\">{metrics.activeDrivers}</p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-orange-100 rounded-lg\">\r\n                    <Users className=\"h-6 w-6 text-orange-600\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Charts Grid */}\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Trip Trends */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Trip Trends</h3>\r\n                {chartData.tripTrends.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <LineChart data={chartData.tripTrends}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                      <XAxis dataKey=\"date\" stroke=\"#6B7280\" fontSize={12} />\r\n                      <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                      <Tooltip />\r\n                      <Legend />\r\n                      <Line type=\"monotone\" dataKey=\"trips\" stroke=\"#3B82F6\" name=\"Trips\" strokeWidth={2} />\r\n                      <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#10B981\" name=\"Revenue\" strokeWidth={2} />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                    No data available for the selected period\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Vehicle Utilization */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Vehicle Utilization</h3>\r\n                {chartData.vehicleUtilization.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={chartData.vehicleUtilization}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                      <XAxis dataKey=\"vehicle\" stroke=\"#6B7280\" fontSize={12} />\r\n                      <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                      <Tooltip formatter={(value: any) => `${value}%`} />\r\n                      <Bar dataKey=\"utilization\" fill=\"#3B82F6\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                    No vehicle data available\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Driver Performance */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Driver Performance</h3>\r\n                {chartData.driverPerformance.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={chartData.driverPerformance}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n                      <XAxis dataKey=\"driver\" stroke=\"#6B7280\" fontSize={12} />\r\n                      <YAxis stroke=\"#6B7280\" fontSize={12} />\r\n                      <Tooltip />\r\n                      <Bar dataKey=\"efficiency\" fill=\"#10B981\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                    No driver data available\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Expense Breakdown */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Expense Breakdown</h3>\r\n                {chartData.expenseBreakdown.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={chartData.expenseBreakdown}\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        labelLine={false}\r\n                        label={(entry: any) => `${entry.category}: $${entry.amount}`}\r\n                        outerRadius={80}\r\n                        fill=\"#8884d8\"\r\n                        dataKey=\"amount\"\r\n                      >\r\n                        {chartData.expenseBreakdown.map((entry: any, index: number) => (\r\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value: any) => `$${value}`} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-gray-500\">\r\n                    No expense data available\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Download Reports Tab */}\r\n        {activeTab === 'reports' && (\r\n          <div>\r\n            {/* Quick Downloads */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Downloads</h3>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\r\n                {reportTypes.slice(0, showAllReports ? reportTypes.length : 5).map((report) => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generatePDFReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"flex flex-col items-center p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-all hover:shadow-md disabled:opacity-50\"\r\n                  >\r\n                    <div className={`p-3 rounded-lg mb-2 ${\r\n                      report.category === 'comparison' ? 'bg-green-100 text-green-600' :\r\n                      report.category === 'financial' ? 'bg-blue-100 text-blue-600' :\r\n                      report.category === 'operations' ? 'bg-purple-100 text-purple-600' :\r\n                      report.category === 'maintenance' ? 'bg-orange-100 text-orange-600' :\r\n                      'bg-gray-100 text-gray-600'\r\n                    }`}>\r\n                      {generatingReport === report.id ? (\r\n                        <RefreshCw className=\"h-5 w-5 animate-spin\" />\r\n                      ) : (\r\n                        report.icon\r\n                      )}\r\n                    </div>\r\n                    <span className=\"text-sm font-medium text-gray-900\">{report.name}</span>\r\n                    <span className=\"text-xs text-gray-500 mt-1 text-center\">{report.description}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              \r\n              {!showAllReports && reportTypes.length > 5 && (\r\n                <button\r\n                  onClick={() => setShowAllReports(true)}\r\n                  className=\"mt-4 flex items-center justify-center w-full py-2 text-primary-600 hover:text-primary-700 font-medium\"\r\n                >\r\n                  <ChevronDown className=\"h-4 w-4 mr-1\" />\r\n                  Show All Reports ({reportTypes.length - 5} more)\r\n                </button>\r\n              )}\r\n              \r\n              {showAllReports && (\r\n                <button\r\n                  onClick={() => setShowAllReports(false)}\r\n                  className=\"mt-4 flex items-center justify-center w-full py-2 text-primary-600 hover:text-primary-700 font-medium\"\r\n                >\r\n                  <ChevronUp className=\"h-4 w-4 mr-1\" />\r\n                  Show Less\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            {/* Categorized Reports */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {/* Smart Comparisons */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                  <TrendingUp className=\"h-5 w-5 mr-2 text-green-600\" />\r\n                  Smart Comparisons\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {reportTypes.filter(r => r.category === 'comparison').map(report => (\r\n                    <button\r\n                      key={report.id}\r\n                      onClick={() => generatePDFReport(report.id)}\r\n                      disabled={generatingReport === report.id}\r\n                      className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                    >\r\n                      <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                      {generatingReport === report.id ? (\r\n                        <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                      ) : (\r\n                        <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                      )}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Financial Reports */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                  <DollarSign className=\"h-5 w-5 mr-2 text-blue-600\" />\r\n                  Financial Reports\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {reportTypes.filter(r => r.category === 'financial').map(report => (\r\n                    <button\r\n                      key={report.id}\r\n                      onClick={() => generatePDFReport(report.id)}\r\n                      disabled={generatingReport === report.id}\r\n                      className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                    >\r\n                      <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                      {generatingReport === report.id ? (\r\n                        <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                      ) : (\r\n                        <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                      )}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Operations Reports */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                  <Package className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                  Operations Reports\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {reportTypes.filter(r => r.category === 'operations').map(report => (\r\n                    <button\r\n                      key={report.id}\r\n                      onClick={() => generatePDFReport(report.id)}\r\n                      disabled={generatingReport === report.id}\r\n                      className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center group\"\r\n                    >\r\n                      <span className=\"text-sm text-gray-700\">{report.name}</span>\r\n                      {generatingReport === report.id ? (\r\n                        <RefreshCw className=\"h-4 w-4 animate-spin text-primary-600\" />\r\n                      ) : (\r\n                        <Download className=\"h-4 w-4 text-gray-400 group-hover:text-primary-600\" />\r\n                      )}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FixedUnifiedReportingDashboard;\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\MaintenanceTasksAdmin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\MessageTemplatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\RemindersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\TripLocationsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'destinationsPerPage'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [showInactive, currentPage, destinationFilters, destinationsPerPage]","fix":{"range":[4135,4182],"text":"[showInactive, currentPage, destinationFilters, destinationsPerPage]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Layout from '../../components/layout/Layout'; \r\nimport { MapPin, Building2, ChevronLeft, Plus, Package, Settings, Loader, Edit, Trash2 } from 'lucide-react';\r\nimport { Archive, ArchiveRestore } from 'lucide-react';\r\nimport Button from '../../components/ui/Button';\r\nimport WarehouseForm from '../../components/admin/WarehouseForm';\r\nimport DestinationForm from '../../components/admin/DestinationForm';\r\nimport ConfirmationModal from '../../components/admin/ConfirmationModal';\r\nimport { toast } from 'react-toastify';\r\nimport MaterialTypeManager from '../../components/admin/MaterialTypeManager';\r\nimport { getDestinations, createDestination, hardDeleteDestination } from '../../utils/storage';\r\nimport { getDestinationsWithAnalytics, DestinationUsageStats, PaginatedDestinations, DestinationFilters } from '../../utils/destinationAnalytics';\r\nimport { listWarehouses, createWarehouse, updateWarehouse, deleteWarehouse, hardDeleteWarehouse, archiveWarehouse, restoreWarehouse } from '../../utils/warehouseService';\r\nimport { getMaterialTypes, MaterialType } from '../../utils/materialTypes'; // Added MaterialType import\r\nimport { Warehouse, Destination } from '@/types'; // Added Warehouse and Destination imports\r\nimport Checkbox from '../../components/ui/Checkbox'; // Import Checkbox\r\n\r\nconst TripLocationsPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [activeTab, setActiveTab] = useState<'warehouses' | 'destinations'>('warehouses');\r\n  const [isAddingWarehouse, setIsAddingWarehouse] = useState(false);\r\n  const [isAddingDestination, setIsAddingDestination] = useState(false);\r\n  const [editingWarehouse, setEditingWarehouse] = useState<Warehouse | null>(null);\r\n  const [deletingWarehouse, setDeletingWarehouse] = useState<Warehouse | null>(null); // Used for archive confirmation\r\n  const [hardDeletingWarehouse, setHardDeletingWarehouse] = useState<Warehouse | null>(null); // New state for hard delete confirmation\r\n  const [deletingDestination, setDeletingDestination] = useState<Destination | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isManagingMaterialTypes, setIsManagingMaterialTypes] = useState(false);\r\n  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);\r\n  const [destinations, setDestinations] = useState<Destination[]>([]);\r\n  const [destinationsWithAnalytics, setDestinationsWithAnalytics] = useState<PaginatedDestinations | null>(null);\r\n  const [materialTypes, setMaterialTypes] = useState<MaterialType[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showInactive, setShowInactive] = useState(false); // New state for showing inactive warehouses\r\n  \r\n  // Destination pagination and filtering\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [destinationsPerPage] = useState(25);\r\n  const [destinationFilters, setDestinationFilters] = useState<DestinationFilters>({\r\n    search: '',\r\n    sortBy: 'usage_count',\r\n    sortOrder: 'desc',\r\n    active: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const [warehousesData, destinationsData, destinationsAnalyticsData, materialTypesData] = await Promise.all([\r\n          listWarehouses({ includeInactive: showInactive }), // Use showInactive filter\r\n          getDestinations(),\r\n          getDestinationsWithAnalytics(currentPage, destinationsPerPage, destinationFilters),\r\n          getMaterialTypes()\r\n        ]);\r\n        \r\n        setWarehouses(Array.isArray(warehousesData) ? warehousesData : []);\r\n        setDestinations(Array.isArray(destinationsData) ? destinationsData : []);\r\n        setDestinationsWithAnalytics(destinationsAnalyticsData);\r\n        setMaterialTypes(Array.isArray(materialTypesData) ? materialTypesData : []);\r\n      } catch (error) {\r\n        console.error('Error fetching location data:', error);\r\n        toast.error('Failed to load location data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [showInactive, currentPage, destinationFilters]); // Add pagination and filter dependencies\r\n\r\n  // Separate effect for fetching destinations analytics when filters change\r\n  useEffect(() => {\r\n    const fetchDestinationsAnalytics = async () => {\r\n      if (activeTab === 'destinations') {\r\n        try {\r\n          const analyticsData = await getDestinationsWithAnalytics(currentPage, destinationsPerPage, destinationFilters);\r\n          setDestinationsWithAnalytics(analyticsData);\r\n        } catch (error) {\r\n          console.error('Error fetching destinations analytics:', error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    fetchDestinationsAnalytics();\r\n  }, [activeTab, currentPage, destinationFilters, destinationsPerPage]);\r\n\r\n  const handleAddWarehouse = async (data: any) => {\r\n    setIsSubmitting(true);\r\n    try {\r\n      const newWarehouse = await createWarehouse(data);\r\n      \r\n      setWarehouses(prev => [...prev, newWarehouse]);\r\n      setIsAddingWarehouse(false);\r\n      toast.success('Warehouse added successfully');\r\n    } catch (error) {\r\n      console.error('Error adding warehouse:', error);\r\n      toast.error('Failed to add warehouse');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateWarehouse = async (data: any) => {\r\n    if (!editingWarehouse) return;\r\n    \r\n    setIsSubmitting(true);\r\n    try {\r\n      const updatedWarehouse = await updateWarehouse(editingWarehouse.id, data);\r\n      \r\n      setWarehouses(prev => \r\n        prev.map(w => w.id === editingWarehouse.id ? updatedWarehouse : w)\r\n      );\r\n      setEditingWarehouse(null);\r\n      toast.success('Warehouse updated successfully');\r\n    } catch (error) {\r\n      console.error('Error updating warehouse:', error);\r\n      toast.error('Failed to update warehouse');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // New function for soft-delete (archive)\r\n  const handleArchiveWarehouse = async () => {\r\n    if (!deletingWarehouse) return;\r\n    setIsSubmitting(true);\r\n    try {\r\n      await archiveWarehouse(deletingWarehouse.id);\r\n      setWarehouses(prev => prev.map(w => w.id === deletingWarehouse.id ? { ...w, is_active: false } : w));\r\n      setDeletingWarehouse(null);\r\n      toast.success('Warehouse archived successfully');\r\n    } catch (error) {\r\n      console.error('Error archiving warehouse:', error);\r\n      toast.error('Failed to archive warehouse');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // New function for restoring soft-deleted\r\n  const handleRestoreWarehouse = async (warehouseId: string) => {\r\n    setIsSubmitting(true);\r\n    try {\r\n      await restoreWarehouse(warehouseId);\r\n      setWarehouses(prev => prev.map(w => w.id === warehouseId ? { ...w, is_active: true } : w));\r\n      toast.success('Warehouse restored successfully');\r\n    } catch (error) {\r\n      console.error('Error restoring warehouse:', error);\r\n      toast.error('Failed to restore warehouse');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // New function for hard delete (admin maintenance only)\r\n  const handleHardDeleteWarehouse = async () => {\r\n    if (!hardDeletingWarehouse) return;\r\n    setIsSubmitting(true);\r\n    try {\r\n      await hardDeleteWarehouse(hardDeletingWarehouse.id);\r\n      setWarehouses(prev => prev.filter(w => w.id !== hardDeletingWarehouse.id));\r\n      setHardDeletingWarehouse(null);\r\n      toast.success('Warehouse permanently deleted');\r\n    } catch (error) {\r\n      console.error('Error hard deleting warehouse:', error);\r\n      const errorMessage = (error as any)?.message || '';\r\n      if (errorMessage.includes('23503') || errorMessage.includes('foreign key constraint')) {\r\n        toast.error('Cannot delete warehouse: It is linked to existing trips. Consider archiving instead.');\r\n      } else {\r\n        toast.error('Failed to permanently delete warehouse');\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleAddDestination = async (data: any) => {\r\n    try {\r\n      const destinationDataForSupabase = {\r\n        ...data,\r\n        historical_deviation: data.historical_deviation === undefined ? 0 : data.historical_deviation,\r\n        active: data.active === undefined ? true : data.active,\r\n      };\r\n      const newDestination = await createDestination(destinationDataForSupabase);\r\n      if (!newDestination) {\r\n        throw new Error('Failed to create destination');\r\n      }\r\n      \r\n      // Fetch updated destination list to ensure UI is in sync with DB\r\n      const updatedDestinations = await getDestinations();\r\n      setDestinations(Array.isArray(updatedDestinations) ? updatedDestinations : []);\r\n      setIsAddingDestination(false);\r\n      toast.success('Destination added successfully');\r\n    } catch (error) {\r\n      console.error('Error adding destination:', error);\r\n      toast.error('Failed to add destination. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {/* Page Header */}\r\n      <div className=\"rounded-xl border bg-white dark:bg-white px-4 py-3 shadow-sm mb-6\">\r\n        <div className=\"flex items-center group\">\r\n          <MapPin className=\"h-5 w-5 mr-2 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 transition\" />\r\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">Trip Locations</h1>\r\n        </div>\r\n        <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1 ml-7\">Manage warehouses and delivery destinations</p>\r\n        <div className=\"mt-4 flex flex-wrap gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => navigate('/admin')}\r\n            icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n          >\r\n            Back to Admin\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-6\">\r\n        {/* Tabs */}\r\n        <div className=\"bg-white rounded-lg shadow-sm\">\r\n          <div className=\"border-b border-gray-200 flex justify-between items-center\">\r\n            <div className=\"flex space-x-4 p-4\">\r\n              <button\r\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\r\n                  activeTab === 'warehouses'\r\n                    ? 'bg-primary-50 text-primary-700 font-medium'\r\n                    : 'text-gray-600 hover:bg-gray-50'\r\n                }`}\r\n                onClick={() => setActiveTab('warehouses')}\r\n              >\r\n                <Building2 className=\"h-5 w-5\" />\r\n                <span>Warehouses</span>\r\n              </button>\r\n              <button\r\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\r\n                  activeTab === 'destinations'\r\n                    ? 'bg-primary-50 text-primary-700 font-medium'\r\n                    : 'text-gray-600 hover:bg-gray-50'\r\n                }`}\r\n                onClick={() => setActiveTab('destinations')}\r\n              >\r\n                <MapPin className=\"h-5 w-5\" />\r\n                <span>Destinations</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"p-4\">\r\n              <Button\r\n                variant=\"outline\"\r\n                inputSize=\"sm\"\r\n                onClick={() => setIsManagingMaterialTypes(true)}\r\n                icon={<Settings className=\"h-4 w-4\" />}\r\n              >\r\n                Manage Material Types\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"p-6\">\r\n            {activeTab === 'warehouses' ? (\r\n              <div className=\"space-y-6\">\r\n                {loading ? (\r\n                  <div className=\"flex justify-center items-center h-64\">\r\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n                    <p className=\"ml-3 text-gray-600\">Loading warehouses...</p>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <div className=\"border-l-2 border-blue-500 pl-2\">\r\n                        <h2 className=\"text-lg font-medium text-gray-900\">Origin Warehouses</h2>\r\n                        <p className=\"text-sm text-gray-500\">Manage warehouse locations</p>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Checkbox\r\n                          label=\"Show Inactive\"\r\n                          checked={showInactive}\r\n                          onChange={(e) => setShowInactive(e.target.checked)}\r\n                        />\r\n                        {!editingWarehouse && (\r\n                          <Button\r\n                            onClick={() => setIsAddingWarehouse(true)}\r\n                            icon={<Plus className=\"h-4 w-4\" />}\r\n                          >\r\n                            Add Warehouse\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {(isAddingWarehouse || editingWarehouse) ? (\r\n                      <WarehouseForm\r\n                        initialData={editingWarehouse || undefined}\r\n                        onSubmit={editingWarehouse ? handleUpdateWarehouse : handleAddWarehouse}\r\n                        onCancel={() => {\r\n                          setIsAddingWarehouse(false);\r\n                          setEditingWarehouse(null);\r\n                        }}\r\n                        isSubmitting={isSubmitting}\r\n                      />\r\n                    ) : (\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                        {warehouses.length === 0 ? (\r\n                          <div className=\"col-span-3 text-center py-8 text-gray-500 bg-gray-50 rounded-lg border border-gray-200\">\r\n                            No warehouses found. Add your first warehouse to get started.\r\n                          </div>\r\n                        ) : (\r\n                          warehouses.map(warehouse => (\r\n                            <div\r\n                              key={warehouse.id}\r\n                              className={`bg-white rounded-lg border p-4 hover:shadow-md transition-shadow relative ${warehouse.is_active ? '' : 'opacity-50'}`}\r\n                            >\r\n                              {/* Action buttons */}\r\n                              <div className=\"absolute top-2 right-2 flex space-x-1\">\r\n                                <button\r\n                                  onClick={() => setEditingWarehouse(warehouse)}\r\n                                  className=\"p-1 text-gray-400 hover:text-primary-600 rounded\"\r\n                                  title=\"Edit warehouse\"\r\n                                >\r\n                                  <Edit className=\"h-4 w-4\" />\r\n                                </button>\r\n                                {warehouse.is_active ? (\r\n                                  <button\r\n                                    onClick={() => setDeletingWarehouse(warehouse)} // Use setDeletingWarehouse for archive\r\n                                    className=\"p-1 text-gray-400 hover:text-warning-600 rounded\"\r\n                                    title=\"Archive warehouse\"\r\n                                  >\r\n                                    <Archive className=\"h-4 w-4\" />\r\n                                  </button>\r\n                                ) : (\r\n                                  <button\r\n                                    onClick={() => handleRestoreWarehouse(warehouse.id)} // Direct call for restore\r\n                                    className=\"p-1 text-gray-400 hover:text-success-600 rounded\"\r\n                                    title=\"Restore warehouse\"\r\n                                  >\r\n                                    <ArchiveRestore className=\"h-4 w-4\" />\r\n                                  </button>\r\n                                )}\r\n                                {/* Hard delete option */}\r\n                                <button\r\n                                  onClick={() => setHardDeletingWarehouse(warehouse)} // New state for hard delete\r\n                                  className=\"p-1 text-gray-400 hover:text-error-600 rounded\"\r\n                                  title=\"Permanently delete warehouse (admin only)\"\r\n                                >\r\n                                  <Trash2 className=\"h-4 w-4\" />\r\n                                </button>\r\n                              </div>\r\n\r\n                              {/* Inactive badge */}\r\n                              {!warehouse.is_active && (\r\n                                <span className=\"absolute top-2 left-2 px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full\">\r\n                                  Inactive\r\n                                </span>\r\n                              )}\r\n                              \r\n                              <div className=\"flex items-center space-x-3\">\r\n                                <Building2 className=\"h-5 w-5 text-gray-400\" />\r\n                                <div>\r\n                                  <h3 className=\"font-medium text-gray-900\">{warehouse.name}</h3>\r\n                                  <div className=\"flex items-center space-x-2\">\r\n                                    <p className=\"text-sm text-gray-500\">{warehouse.pincode}</p>\r\n                                  </div>\r\n                                  <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                                    {warehouse.material_type_ids.map(typeId => (\r\n                                      <span key={typeId} className=\"px-2 py-0.5 bg-primary-100 text-primary-700 text-xs rounded-full\">\r\n                                        {materialTypes.find(t => t.id === typeId)?.name || 'Unknown'}\r\n                                      </span>\r\n                                    ))}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              {warehouse.latitude !== undefined && warehouse.longitude !== undefined && \r\n                               warehouse.latitude !== null && warehouse.longitude !== null &&\r\n                               warehouse.latitude !== 0 && warehouse.longitude !== 0 ? (\r\n                                <div className=\"mt-3 text-sm text-gray-500\">\r\n                                  Coordinates: {warehouse.latitude.toFixed(6)}, {warehouse.longitude.toFixed(6)}\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"mt-3 text-sm text-red-500\">\r\n                                  Coordinates: Invalid or missing\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          ))\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-6\">\r\n                {loading ? (\r\n                  <div className=\"flex justify-center items-center h-64\">\r\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\r\n                    <p className=\"ml-3 text-gray-600\">Loading destinations...</p>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <div className=\"border-l-2 border-blue-500 pl-2\">\r\n                        <h2 className=\"text-lg font-medium text-gray-900\">Delivery Destinations</h2>\r\n                        <p className=\"text-sm text-gray-500\">Manage delivery points</p>\r\n                      </div>\r\n                      <Button\r\n                        onClick={() => setIsAddingDestination(true)}\r\n                        icon={<Plus className=\"h-4 w-4\" />}\r\n                      >\r\n                        Add Destination\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {isAddingDestination ? (\r\n                      <DestinationForm\r\n                        onSubmit={handleAddDestination}\r\n                        onCancel={() => setIsAddingDestination(false)}\r\n                      />\r\n                    ) : (\r\n                      <>\r\n                        {/* Search and Filter Controls */}\r\n                        <div className=\"mb-4 flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\r\n                          <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Search destinations...\"\r\n                              value={destinationFilters.search || ''}\r\n                              onChange={(e) => setDestinationFilters(prev => ({ ...prev, search: e.target.value }))}\r\n                              className=\"px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                            />\r\n                            <select\r\n                              value={destinationFilters.sortBy || 'usage_count'}\r\n                              onChange={(e) => setDestinationFilters(prev => ({ ...prev, sortBy: e.target.value as any }))}\r\n                              className=\"px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                            >\r\n                              <option value=\"name\">Sort by Name</option>\r\n                              <option value=\"usage_count\">Sort by Usage</option>\r\n                              <option value=\"last_used\">Sort by Last Used</option>\r\n                              <option value=\"created_at\">Sort by Created</option>\r\n                            </select>\r\n                            <select\r\n                              value={destinationFilters.sortOrder || 'desc'}\r\n                              onChange={(e) => setDestinationFilters(prev => ({ ...prev, sortOrder: e.target.value as any }))}\r\n                              className=\"px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                            >\r\n                              <option value=\"desc\">Descending</option>\r\n                              <option value=\"asc\">Ascending</option>\r\n                            </select>\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {destinationsWithAnalytics ? (\r\n                              `Showing ${destinationsWithAnalytics.destinations.length} of ${destinationsWithAnalytics.totalCount} destinations`\r\n                            ) : (\r\n                              `Total: ${destinations.length} destinations`\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Destinations Grid */}\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                          {destinationsWithAnalytics?.destinations.length === 0 ? (\r\n                            <div className=\"col-span-3 text-center py-8 text-gray-500 bg-gray-50 rounded-lg border border-gray-200\">\r\n                              No destinations found. Add your first destination to get started.\r\n                            </div>\r\n                          ) : (\r\n                            destinationsWithAnalytics?.destinations.map(destination => (\r\n                              <div\r\n                                key={destination.id}\r\n                                className=\"bg-white rounded-lg border p-4 hover:shadow-md transition-shadow relative\"\r\n                              >\r\n                                {/* Action buttons */}\r\n                                <div className=\"absolute top-2 right-2 flex space-x-1\">\r\n                                  <button\r\n                                    onClick={() => setDeletingDestination(destination)}\r\n                                    className=\"p-1 text-gray-400 hover:text-error-600 rounded\"\r\n                                    title=\"Delete destination\"\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4\" />\r\n                                  </button>\r\n                                </div>\r\n                                \r\n                                <div className=\"flex items-center space-x-3\">\r\n                                  <MapPin className=\"h-5 w-5 text-gray-400\" />\r\n                                  <div className=\"flex-1\">\r\n                                    <h3 className=\"font-medium text-gray-900\">{destination.name}</h3>\r\n                                    <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\r\n                                      <span>{destination.standard_distance} km</span>\r\n                                      <span>·</span>\r\n                                      <span>{destination.estimated_time}</span>\r\n                                    </div>\r\n                                    {/* Usage Analytics */}\r\n                                    <div className=\"mt-2 flex items-center space-x-4 text-xs text-gray-400\">\r\n                                      <span className=\"flex items-center\">\r\n                                        <span className=\"w-2 h-2 bg-blue-500 rounded-full mr-1\"></span>\r\n                                        Used {destination.usage_count} times\r\n                                      </span>\r\n                                      {destination.last_used && (\r\n                                        <span>\r\n                                          Last: {new Date(destination.last_used).toLocaleDateString()}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                                {destination.latitude !== null && destination.longitude !== null && \r\n                                 destination.latitude !== 0 && destination.longitude !== 0 ? (\r\n                                  <div className=\"mt-3 text-sm text-gray-500\">\r\n                                    Coordinates: {destination.latitude.toFixed(6)}, {destination.longitude.toFixed(6)}\r\n                                  </div>\r\n                                ) : (\r\n                                  <div className=\"mt-3 text-sm text-red-500\">\r\n                                    Coordinates: Invalid or missing\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            ))\r\n                          )}\r\n                        </div>\r\n\r\n                        {/* Pagination */}\r\n                        {destinationsWithAnalytics && destinationsWithAnalytics.totalPages > 1 && (\r\n                          <div className=\"mt-6 flex items-center justify-between\">\r\n                            <div className=\"text-sm text-gray-500\">\r\n                              Page {destinationsWithAnalytics.currentPage} of {destinationsWithAnalytics.totalPages}\r\n                            </div>\r\n                            <div className=\"flex space-x-2\">\r\n                              <button\r\n                                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\r\n                                disabled={!destinationsWithAnalytics.hasPreviousPage}\r\n                                className=\"px-3 py-1 text-sm border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50\"\r\n                              >\r\n                                Previous\r\n                              </button>\r\n                              <button\r\n                                onClick={() => setCurrentPage(prev => Math.min(destinationsWithAnalytics.totalPages, prev + 1))}\r\n                                disabled={!destinationsWithAnalytics.hasNextPage}\r\n                                className=\"px-3 py-1 text-sm border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50\"\r\n                              >\r\n                                Next\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Destination Delete Confirmation Modal */}\r\n        <ConfirmationModal\r\n          isOpen={!!deletingDestination}\r\n          title=\"Delete Destination\"\r\n          message={`Are you sure you want to delete \"${deletingDestination?.name}\"? This action cannot be undone.`}\r\n          confirmText=\"Delete\"\r\n          cancelText=\"Cancel\"\r\n          type=\"delete\"\r\n          isLoading={isSubmitting}\r\n          onCancel={() => setDeletingDestination(null)}\r\n          onConfirm={async () => {\r\n            if (!deletingDestination) return;\r\n            setIsSubmitting(true);\r\n            try {\r\n              await hardDeleteDestination(deletingDestination.id);\r\n              setDestinations(prev => prev.filter(d => d.id !== deletingDestination.id));\r\n              toast.success('Destination deleted successfully');\r\n              setDeletingDestination(null);\r\n            } catch (err: any) {\r\n              const msg = String(err?.message || '');\r\n              if (msg.includes('23503') || msg.toLowerCase().includes('foreign key')) {\r\n                toast.error('Cannot delete destination: it is linked to existing trips.');\r\n              } else {\r\n                toast.error('Failed to delete destination.');\r\n              }\r\n            } finally {\r\n              setIsSubmitting(false);\r\n            }\r\n          }}\r\n        />\r\n        \r\n        {/* Archive Confirmation Modal */}\r\n        <ConfirmationModal\r\n          isOpen={!!deletingWarehouse}\r\n          title={deletingWarehouse?.is_active ? \"Archive Warehouse\" : \"Restore Warehouse\"}\r\n          message={deletingWarehouse?.is_active ?\r\n            `Are you sure you want to archive warehouse \"${deletingWarehouse?.name}\"? It will be hidden from most views but can be restored later.` :\r\n            `Are you sure you want to restore warehouse \"${deletingWarehouse?.name}\"? It will become active again.`\r\n          }\r\n          confirmText={deletingWarehouse?.is_active ? \"Archive\" : \"Restore\"}\r\n          cancelText=\"Cancel\"\r\n          onConfirm={deletingWarehouse?.is_active ? handleArchiveWarehouse : () => handleRestoreWarehouse(deletingWarehouse!.id)}\r\n          onCancel={() => setDeletingWarehouse(null)}\r\n          type={deletingWarehouse?.is_active ? \"archive\" : \"info\"}\r\n          isLoading={isSubmitting}\r\n        />\r\n        \r\n        {/* Hard Delete Confirmation Modal */}\r\n        <ConfirmationModal\r\n          isOpen={!!hardDeletingWarehouse}\r\n          title=\"Permanently Delete Warehouse\"\r\n          message={`WARNING: Are you sure you want to permanently delete warehouse \"${hardDeletingWarehouse?.name}\"? This action cannot be undone and may break existing trip records if this warehouse is referenced.`}\r\n          confirmText=\"Delete Permanently\"\r\n          cancelText=\"Cancel\"\r\n          onConfirm={handleHardDeleteWarehouse}\r\n          onCancel={() => setHardDeletingWarehouse(null)}\r\n          type=\"delete\"\r\n          isLoading={isSubmitting}\r\n        />\r\n        \r\n        {isManagingMaterialTypes && (\r\n          <MaterialTypeManager onClose={() => setIsManagingMaterialTypes(false)} />\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TripLocationsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\UnifiedReportingDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [dateRange, activeTab, fetchDashboardData]","fix":{"range":[6237,6259],"text":"[dateRange, activeTab, fetchDashboardData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  Line,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport {\r\n  Calendar,\r\n  TrendingUp,\r\n  Users,\r\n  Truck,\r\n  DollarSign,\r\n  Package,\r\n  AlertCircle,\r\n  Download,\r\n  Filter,\r\n  RefreshCw,\r\n  FileText,\r\n  Fuel,\r\n  MapPin,\r\n  Clock,\r\n  Wrench,\r\n  BarChart3,\r\n  PieChart as PieChartIcon,\r\n  FileSpreadsheet,\r\n  Eye,\r\n  ChevronDown,\r\n  ChevronUp\r\n} from 'lucide-react';\r\nimport { supabase } from '../../utils/supabaseClient';\r\nimport { format, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, subDays, subMonths } from 'date-fns';\r\n\r\ninterface ReportMetrics {\r\n  totalRevenue: number;\r\n  totalTrips: number;\r\n  activeVehicles: number;\r\n  activeDrivers: number;\r\n  avgTripDistance: number;\r\n  avgFuelEfficiency: number;\r\n  maintenanceCosts: number;\r\n  pendingMaintenance: number;\r\n}\r\n\r\ninterface ChartData {\r\n  tripTrends: Array<{ date: string; trips: number; revenue: number }>;\r\n  vehicleUtilization: Array<{ vehicle: string; trips: number; utilization: number }>;\r\n  driverPerformance: Array<{ driver: string; trips: number; efficiency: number }>;\r\n  expenseBreakdown: Array<{ category: string; amount: number }>;\r\n}\r\n\r\ninterface ReportType {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  category: 'operations' | 'financial' | 'maintenance' | 'compliance' | 'comparison';\r\n}\r\n\r\nconst UnifiedReportingDashboard: React.FC = () => {\r\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'reports'>('dashboard');\r\n  const [metrics, setMetrics] = useState<ReportMetrics>({\r\n    totalRevenue: 0,\r\n    totalTrips: 0,\r\n    activeVehicles: 0,\r\n    activeDrivers: 0,\r\n    avgTripDistance: 0,\r\n    avgFuelEfficiency: 0,\r\n    maintenanceCosts: 0,\r\n    pendingMaintenance: 0\r\n  });\r\n\r\n  const [chartData, setChartData] = useState<ChartData>({\r\n    tripTrends: [],\r\n    vehicleUtilization: [],\r\n    driverPerformance: [],\r\n    expenseBreakdown: []\r\n  });\r\n\r\n  const [dateRange, setDateRange] = useState({\r\n    startDate: startOfMonth(new Date()),\r\n    endDate: endOfMonth(new Date())\r\n  });\r\n\r\n  const [selectedDateRange, setSelectedDateRange] = useState('thisMonth');\r\n  const [customStartDate, setCustomStartDate] = useState('');\r\n  const [customEndDate, setCustomEndDate] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [generatingReport, setGeneratingReport] = useState<string | null>(null);\r\n  const [showAllReports, setShowAllReports] = useState(false);\r\n\r\n  // Helper functions for comparison reports\r\n  const calculateMetrics = (trips: any[]) => {\r\n    const totalTrips = trips.length;\r\n    const totalDistance = trips.reduce((sum, trip) => sum + (trip.end_km - trip.start_km || 0), 0);\r\n    const totalRevenue = trips.reduce((sum, trip) => sum + ((trip.end_km - trip.start_km || 0) * 10), 0);\r\n    const totalExpenses = trips.reduce((sum, trip) => \r\n      sum + (trip.total_fuel_cost || 0) + \r\n      (trip.total_road_expenses || 0) + \r\n      (trip.driver_expense || 0) +\r\n      (trip.unloading_expense || 0) +\r\n      (trip.breakdown_expense || 0) +\r\n      (trip.miscellaneous_expense || 0), 0\r\n    );\r\n    const fuelCosts = trips.reduce((sum, trip) => sum + (trip.total_fuel_cost || 0), 0);\r\n    const avgTripDistance = totalTrips > 0 ? totalDistance / totalTrips : 0;\r\n    \r\n    return {\r\n      totalTrips,\r\n      totalDistance: Math.round(totalDistance),\r\n      totalRevenue: Math.round(totalRevenue),\r\n      totalExpenses: Math.round(totalExpenses),\r\n      fuelCosts: Math.round(fuelCosts),\r\n      avgTripDistance: Math.round(avgTripDistance)\r\n    };\r\n  };\r\n\r\n  const calculatePercentChange = (oldValue: number, newValue: number): string => {\r\n    if (oldValue === 0) return newValue > 0 ? '+100%' : '0%';\r\n    const change = ((newValue - oldValue) / oldValue) * 100;\r\n    return `${change >= 0 ? '+' : ''}${change.toFixed(1)}%`;\r\n  };\r\n\r\n  const reportTypes: ReportType[] = [\r\n    // Smart Comparison Reports\r\n    {\r\n      id: 'week-comparison',\r\n      name: 'Weekly Comparison',\r\n      description: 'This week vs last week',\r\n      icon: <TrendingUp className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'month-comparison',\r\n      name: 'Monthly Comparison',\r\n      description: 'Month-over-month analysis',\r\n      icon: <BarChart3 className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    {\r\n      id: 'year-comparison',\r\n      name: 'Yearly Comparison',\r\n      description: 'Year-over-year analysis',\r\n      icon: <FileSpreadsheet className=\"h-4 w-4\" />,\r\n      category: 'comparison'\r\n    },\r\n    // Standard Reports\r\n    {\r\n      id: 'trip-summary',\r\n      name: 'Trip Summary',\r\n      description: 'All trip details',\r\n      icon: <Package className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'vehicle-utilization',\r\n      name: 'Vehicle Utilization',\r\n      description: 'Vehicle usage patterns',\r\n      icon: <Truck className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'driver-performance',\r\n      name: 'Driver Performance',\r\n      description: 'Driver efficiency',\r\n      icon: <Users className=\"h-4 w-4\" />,\r\n      category: 'operations'\r\n    },\r\n    {\r\n      id: 'fuel-consumption',\r\n      name: 'Fuel Analysis',\r\n      description: 'Fuel usage & costs',\r\n      icon: <Fuel className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'expense-analysis',\r\n      name: 'Expense Report',\r\n      description: 'All expenses',\r\n      icon: <DollarSign className=\"h-4 w-4\" />,\r\n      category: 'financial'\r\n    },\r\n    {\r\n      id: 'maintenance-schedule',\r\n      name: 'Maintenance',\r\n      description: 'Service schedules',\r\n      icon: <Wrench className=\"h-4 w-4\" />,\r\n      category: 'maintenance'\r\n    },\r\n    {\r\n      id: 'compliance-audit',\r\n      name: 'Compliance',\r\n      description: 'Document validity',\r\n      icon: <FileText className=\"h-4 w-4\" />,\r\n      category: 'compliance'\r\n    }\r\n  ];\r\n\r\n  // Fetch all metrics and data\r\n  useEffect(() => {\r\n    if (activeTab === 'dashboard') {\r\n      fetchDashboardData();\r\n    }\r\n  }, [dateRange, activeTab]);\r\n\r\n  const fetchDashboardData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await Promise.all([\r\n        fetchMetrics(),\r\n        fetchTripTrends(),\r\n        fetchVehicleUtilization(),\r\n        fetchDriverPerformance(),\r\n        fetchExpenseBreakdown()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select('*')\r\n        .gte('start_time', dateRange.startDate.toISOString())\r\n        .lte('start_time', dateRange.endDate.toISOString());\r\n\r\n      const totalRevenue = trips?.reduce((sum, trip) => {\r\n        const revenue = (trip.end_km - trip.start_km) * 10;\r\n        return sum + revenue;\r\n      }, 0) || 0;\r\n\r\n      const avgDistance = trips?.length ? \r\n        trips.reduce((sum, trip) => sum + (trip.end_km - trip.start_km), 0) / trips.length : 0;\r\n\r\n      const { count: vehicleCount } = await supabase\r\n        .from('vehicles')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      const { count: driverCount } = await supabase\r\n        .from('drivers')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('status', 'active');\r\n\r\n      const { data: maintenance } = await supabase\r\n        .from('maintenance')\r\n        .select('*')\r\n        .gte('scheduled_date', dateRange.startDate.toISOString())\r\n        .lte('scheduled_date', dateRange.endDate.toISOString());\r\n\r\n      const maintenanceCosts = maintenance?.reduce((sum, m) => sum + (m.cost || 0), 0) || 0;\r\n      const pendingMaintenance = maintenance?.filter(m => m.status === 'scheduled').length || 0;\r\n\r\n      setMetrics({\r\n        totalRevenue,\r\n        totalTrips: trips?.length || 0,\r\n        activeVehicles: vehicleCount || 0,\r\n        activeDrivers: driverCount || 0,\r\n        avgTripDistance: Math.round(avgDistance),\r\n        avgFuelEfficiency: 8.5,\r\n        maintenanceCosts,\r\n        pendingMaintenance\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching metrics:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTripTrends = async () => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select('start_time, end_km, start_km')\r\n        .gte('start_time', subMonths(dateRange.endDate, 6).toISOString())\r\n        .lte('start_time', dateRange.endDate.toISOString())\r\n        .order('start_time');\r\n\r\n      const grouped = trips?.reduce((acc: any, trip) => {\r\n        const date = format(new Date(trip.start_time), 'MMM dd');\r\n        if (!acc[date]) {\r\n          acc[date] = { date, trips: 0, revenue: 0 };\r\n        }\r\n        acc[date].trips++;\r\n        acc[date].revenue += (trip.end_km - trip.start_km) * 10;\r\n        return acc;\r\n      }, {});\r\n\r\n      setChartData(prev => ({\r\n        ...prev,\r\n        tripTrends: Object.values(grouped || {})\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching trip trends:', error);\r\n    }\r\n  };\r\n\r\n  const fetchVehicleUtilization = async () => {\r\n    try {\r\n      const { data: vehicles } = await supabase\r\n        .from('vehicles')\r\n        .select('id, registration_number')\r\n        .eq('status', 'active')\r\n        .limit(10);\r\n\r\n      const utilizationData = await Promise.all(\r\n        vehicles?.map(async (vehicle) => {\r\n          const { count } = await supabase\r\n            .from('trips')\r\n            .select('*', { count: 'exact', head: true })\r\n            .eq('vehicle_id', vehicle.id)\r\n            .gte('start_time', dateRange.startDate.toISOString())\r\n            .lte('start_time', dateRange.endDate.toISOString());\r\n\r\n          return {\r\n            vehicle: vehicle.registration_number,\r\n            trips: count || 0,\r\n            utilization: Math.min(((count || 0) / 30) * 100, 100)\r\n          };\r\n        }) || []\r\n      );\r\n\r\n      setChartData(prev => ({\r\n        ...prev,\r\n        vehicleUtilization: utilizationData.sort((a, b) => b.utilization - a.utilization)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching vehicle utilization:', error);\r\n    }\r\n  };\r\n\r\n  const fetchDriverPerformance = async () => {\r\n    try {\r\n      const { data: drivers } = await supabase\r\n        .from('drivers')\r\n        .select('id, name')\r\n        .eq('status', 'active')\r\n        .limit(10);\r\n\r\n      const performanceData = await Promise.all(\r\n        drivers?.map(async (driver) => {\r\n          const { data: trips } = await supabase\r\n            .from('trips')\r\n            .select('*')\r\n            .eq('driver_id', driver.id)\r\n            .gte('start_time', dateRange.startDate.toISOString())\r\n            .lte('start_time', dateRange.endDate.toISOString());\r\n\r\n          const efficiency = trips?.length ? \r\n            trips.reduce((sum, trip) => {\r\n              const fuelEfficiency = (trip.end_km - trip.start_km) / (trip.total_fuel_cost || 1);\r\n              return sum + fuelEfficiency;\r\n            }, 0) / trips.length : 0;\r\n\r\n          return {\r\n            driver: driver.name,\r\n            trips: trips?.length || 0,\r\n            efficiency: Math.round(efficiency * 10) / 10\r\n          };\r\n        }) || []\r\n      );\r\n\r\n      setChartData(prev => ({\r\n        ...prev,\r\n        driverPerformance: performanceData.sort((a, b) => b.efficiency - a.efficiency)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching driver performance:', error);\r\n    }\r\n  };\r\n\r\n  const fetchExpenseBreakdown = async () => {\r\n    try {\r\n      const { data: trips } = await supabase\r\n        .from('trips')\r\n        .select('total_fuel_cost, total_road_expenses, driver_expense, breakdown_expense')\r\n        .gte('start_time', dateRange.startDate.toISOString())\r\n        .lte('start_time', dateRange.endDate.toISOString());\r\n\r\n      const expenses = {\r\n        Fuel: 0,\r\n        'Road Expenses': 0,\r\n        'Driver Expenses': 0,\r\n        'Breakdown': 0,\r\n        'Maintenance': metrics.maintenanceCosts\r\n      };\r\n\r\n      trips?.forEach(trip => {\r\n        expenses.Fuel += trip.total_fuel_cost || 0;\r\n        expenses['Road Expenses'] += trip.total_road_expenses || 0;\r\n        expenses['Driver Expenses'] += trip.driver_expense || 0;\r\n        expenses['Breakdown'] += trip.breakdown_expense || 0;\r\n      });\r\n\r\n      setChartData(prev => ({\r\n        ...prev,\r\n        expenseBreakdown: Object.entries(expenses).map(([category, amount]) => ({\r\n          category,\r\n          amount\r\n        }))\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching expense breakdown:', error);\r\n    }\r\n  };\r\n\r\n  const getDateRange = () => {\r\n    const now = new Date();\r\n    let start: Date, end: Date;\r\n\r\n    switch (selectedDateRange) {\r\n      case 'today':\r\n        start = startOfDay(now);\r\n        end = endOfDay(now);\r\n        break;\r\n      case 'yesterday':\r\n        start = startOfDay(subDays(now, 1));\r\n        end = endOfDay(subDays(now, 1));\r\n        break;\r\n      case 'thisWeek':\r\n        start = startOfWeek(now, { weekStartsOn: 1 });\r\n        end = endOfWeek(now, { weekStartsOn: 1 });\r\n        break;\r\n      case 'lastWeek':\r\n        start = startOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        end = endOfWeek(subDays(now, 7), { weekStartsOn: 1 });\r\n        break;\r\n      case 'thisMonth':\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n        break;\r\n      case 'lastMonth':\r\n        start = startOfMonth(subMonths(now, 1));\r\n        end = endOfMonth(subMonths(now, 1));\r\n        break;\r\n      case 'last30Days':\r\n        start = subDays(now, 30);\r\n        end = now;\r\n        break;\r\n      case 'custom':\r\n        start = customStartDate ? new Date(customStartDate) : now;\r\n        end = customEndDate ? new Date(customEndDate) : now;\r\n        break;\r\n      default:\r\n        start = startOfMonth(now);\r\n        end = endOfMonth(now);\r\n    }\r\n\r\n    return { start, end };\r\n  };\r\n\r\n  const generateReport = async (reportId: string) => {\r\n    setGeneratingReport(reportId);\r\n    const { start, end } = getDateRange();\r\n    \r\n    try {\r\n      let fileName = '';\r\n      let headers: string[] = [];\r\n      let rows: any[][] = [];\r\n\r\n      switch (reportId) {\r\n        case 'week-comparison': {\r\n          const thisWeekStart = startOfWeek(new Date(), { weekStartsOn: 1 });\r\n          const lastWeekStart = startOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 });\r\n\r\n          const { data: thisWeekTrips } = await supabase\r\n            .from('trips')\r\n            .select('*')\r\n            .gte('start_time', thisWeekStart.toISOString())\r\n            .lte('start_time', new Date().toISOString());\r\n\r\n          const { data: lastWeekTrips } = await supabase\r\n            .from('trips')\r\n            .select('*')\r\n            .gte('start_time', lastWeekStart.toISOString())\r\n            .lte('start_time', endOfWeek(subDays(new Date(), 7), { weekStartsOn: 1 }).toISOString());\r\n\r\n          const thisWeekMetrics = calculateMetrics(thisWeekTrips || []);\r\n          const lastWeekMetrics = calculateMetrics(lastWeekTrips || []);\r\n\r\n          fileName = `week-comparison-${format(new Date(), 'yyyy-MM-dd')}.csv`;\r\n          headers = ['Metric', 'This Week', 'Last Week', 'Change', '% Change'];\r\n          rows = [\r\n            ['Total Trips', thisWeekMetrics.totalTrips, lastWeekMetrics.totalTrips, \r\n             thisWeekMetrics.totalTrips - lastWeekMetrics.totalTrips,\r\n             calculatePercentChange(lastWeekMetrics.totalTrips, thisWeekMetrics.totalTrips)],\r\n            ['Total Distance (km)', thisWeekMetrics.totalDistance, lastWeekMetrics.totalDistance,\r\n             thisWeekMetrics.totalDistance - lastWeekMetrics.totalDistance,\r\n             calculatePercentChange(lastWeekMetrics.totalDistance, thisWeekMetrics.totalDistance)],\r\n            ['Total Revenue', thisWeekMetrics.totalRevenue, lastWeekMetrics.totalRevenue,\r\n             thisWeekMetrics.totalRevenue - lastWeekMetrics.totalRevenue,\r\n             calculatePercentChange(lastWeekMetrics.totalRevenue, thisWeekMetrics.totalRevenue)]\r\n          ];\r\n          break;\r\n        }\r\n\r\n        case 'trip-summary': {\r\n          const { data: trips } = await supabase\r\n            .from('trips')\r\n            .select(`\r\n              *,\r\n              vehicle:vehicles(registration_number),\r\n              driver:drivers(name)\r\n            `)\r\n            .gte('start_time', start.toISOString())\r\n            .lte('start_time', end.toISOString());\r\n          \r\n          fileName = `trip-summary-${format(start, 'yyyy-MM-dd')}.csv`;\r\n          headers = ['Date', 'Vehicle', 'Driver', 'From', 'To', 'Distance', 'Status'];\r\n          rows = trips?.map(trip => [\r\n            format(new Date(trip.start_time), 'yyyy-MM-dd'),\r\n            trip.vehicle?.registration_number || '',\r\n            trip.driver?.name || '',\r\n            trip.from_location || '',\r\n            trip.to_location || '',\r\n            (trip.end_km - trip.start_km) || 0,\r\n            trip.status || ''\r\n          ]) || [];\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Create CSV content\r\n      const csvContent = [\r\n        headers.join(','),\r\n        ...rows.map(row => row.join(','))\r\n      ].join('\\n');\r\n\r\n      // Download CSV\r\n      const blob = new Blob([csvContent], { type: 'text/csv' });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = fileName;\r\n      a.click();\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n    } finally {\r\n      setGeneratingReport(null);\r\n    }\r\n  };\r\n\r\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-7xl mx-auto\">\r\n      {/* Header */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900\">Reporting & Analytics</h1>\r\n            <p className=\"text-gray-600\">Visual insights and downloadable reports</p>\r\n          </div>\r\n          \r\n          {/* Tab Switcher */}\r\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setActiveTab('dashboard')}\r\n              className={`px-4 py-2 rounded-md transition-colors ${\r\n                activeTab === 'dashboard' \r\n                  ? 'bg-white text-blue-600 shadow' \r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Eye className=\"h-4 w-4 inline mr-2\" />\r\n              Visual Dashboard\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('reports')}\r\n              className={`px-4 py-2 rounded-md transition-colors ${\r\n                activeTab === 'reports' \r\n                  ? 'bg-white text-blue-600 shadow' \r\n                  : 'text-gray-600 hover:text-gray-900'\r\n              }`}\r\n            >\r\n              <Download className=\"h-4 w-4 inline mr-2\" />\r\n              Download Reports\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Date Range Selector (Common for both tabs) */}\r\n      <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <Calendar className=\"h-5 w-5 text-gray-500\" />\r\n          <select\r\n            value={selectedDateRange}\r\n            onChange={(e) => {\r\n              setSelectedDateRange(e.target.value);\r\n              if (e.target.value !== 'custom') {\r\n                const { start, end } = getDateRange();\r\n                setDateRange({ startDate: start, endDate: end });\r\n              }\r\n            }}\r\n            className=\"px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          >\r\n            <option value=\"today\">Today</option>\r\n            <option value=\"yesterday\">Yesterday</option>\r\n            <option value=\"thisWeek\">This Week</option>\r\n            <option value=\"lastWeek\">Last Week</option>\r\n            <option value=\"thisMonth\">This Month</option>\r\n            <option value=\"lastMonth\">Last Month</option>\r\n            <option value=\"last30Days\">Last 30 Days</option>\r\n            <option value=\"custom\">Custom Range</option>\r\n          </select>\r\n          \r\n          {selectedDateRange === 'custom' && (\r\n            <div className=\"flex space-x-3\">\r\n              <input\r\n                type=\"date\"\r\n                value={customStartDate}\r\n                onChange={(e) => {\r\n                  setCustomStartDate(e.target.value);\r\n                  if (e.target.value && customEndDate) {\r\n                    setDateRange({\r\n                      startDate: new Date(e.target.value),\r\n                      endDate: new Date(customEndDate)\r\n                    });\r\n                  }\r\n                }}\r\n                className=\"px-3 py-2 border rounded\"\r\n              />\r\n              <span className=\"self-center\">to</span>\r\n              <input\r\n                type=\"date\"\r\n                value={customEndDate}\r\n                onChange={(e) => {\r\n                  setCustomEndDate(e.target.value);\r\n                  if (customStartDate && e.target.value) {\r\n                    setDateRange({\r\n                      startDate: new Date(customStartDate),\r\n                      endDate: new Date(e.target.value)\r\n                    });\r\n                  }\r\n                }}\r\n                className=\"px-3 py-2 border rounded\"\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          {activeTab === 'dashboard' && (\r\n            <button\r\n              onClick={fetchDashboardData}\r\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n            >\r\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n              Refresh\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Visual Dashboard Tab */}\r\n      {activeTab === 'dashboard' && (\r\n        <>\r\n          {/* Metrics Grid */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n            <div className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Total Revenue</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">\r\n                    ${metrics.totalRevenue.toLocaleString()}\r\n                  </p>\r\n                </div>\r\n                <DollarSign className=\"h-8 w-8 text-green-500\" />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Total Trips</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.totalTrips}</p>\r\n                </div>\r\n                <Package className=\"h-8 w-8 text-blue-500\" />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Active Vehicles</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.activeVehicles}</p>\r\n                </div>\r\n                <Truck className=\"h-8 w-8 text-purple-500\" />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Active Drivers</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{metrics.activeDrivers}</p>\r\n                </div>\r\n                <Users className=\"h-8 w-8 text-orange-500\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Charts Grid */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Trip Trends */}\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Trip Trends</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData.tripTrends}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Legend />\r\n                  <Line type=\"monotone\" dataKey=\"trips\" stroke=\"#3B82F6\" name=\"Trips\" />\r\n                  <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#10B981\" name=\"Revenue\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            {/* Vehicle Utilization */}\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Vehicle Utilization</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={chartData.vehicleUtilization.slice(0, 5)}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"vehicle\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"utilization\" fill=\"#3B82F6\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            {/* Driver Performance */}\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Top Driver Performance</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={chartData.driverPerformance.slice(0, 5)}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"driver\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"efficiency\" fill=\"#10B981\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            {/* Expense Breakdown */}\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Expense Breakdown</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={chartData.expenseBreakdown}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    labelLine={false}\r\n                    label={(entry) => `${entry.category}: $${entry.amount.toFixed(0)}`}\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    dataKey=\"amount\"\r\n                  >\r\n                    {chartData.expenseBreakdown.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Download Reports Tab */}\r\n      {activeTab === 'reports' && (\r\n        <div>\r\n          {/* Quick Download Section */}\r\n          <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n            <h3 className=\"text-lg font-semibold mb-4\">Quick Downloads</h3>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\r\n              {reportTypes.slice(0, showAllReports ? reportTypes.length : 5).map((report) => (\r\n                <button\r\n                  key={report.id}\r\n                  onClick={() => generateReport(report.id)}\r\n                  disabled={generatingReport === report.id}\r\n                  className=\"flex flex-col items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50\"\r\n                >\r\n                  <div className={`p-2 rounded-lg mb-2 ${\r\n                    report.category === 'comparison' ? 'bg-green-100 text-green-600' :\r\n                    report.category === 'financial' ? 'bg-blue-100 text-blue-600' :\r\n                    report.category === 'operations' ? 'bg-purple-100 text-purple-600' :\r\n                    report.category === 'maintenance' ? 'bg-orange-100 text-orange-600' :\r\n                    'bg-gray-100 text-gray-600'\r\n                  }`}>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-5 w-5 animate-spin\" />\r\n                    ) : (\r\n                      report.icon\r\n                    )}\r\n                  </div>\r\n                  <span className=\"text-sm font-medium text-gray-900\">{report.name}</span>\r\n                  <span className=\"text-xs text-gray-500 mt-1\">{report.description}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n            {!showAllReports && reportTypes.length > 5 && (\r\n              <button\r\n                onClick={() => setShowAllReports(true)}\r\n                className=\"mt-4 flex items-center justify-center w-full py-2 text-blue-600 hover:text-blue-700\"\r\n              >\r\n                <ChevronDown className=\"h-4 w-4 mr-1\" />\r\n                Show All Reports ({reportTypes.length - 5} more)\r\n              </button>\r\n            )}\r\n            {showAllReports && (\r\n              <button\r\n                onClick={() => setShowAllReports(false)}\r\n                className=\"mt-4 flex items-center justify-center w-full py-2 text-blue-600 hover:text-blue-700\"\r\n              >\r\n                <ChevronUp className=\"h-4 w-4 mr-1\" />\r\n                Show Less\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Comparison Reports Section */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\r\n                <TrendingUp className=\"h-5 w-5 mr-2 text-green-600\" />\r\n                Smart Comparisons\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'comparison').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generateReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center\"\r\n                  >\r\n                    <span className=\"text-sm\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-blue-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\r\n                <DollarSign className=\"h-5 w-5 mr-2 text-blue-600\" />\r\n                Financial Reports\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'financial').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generateReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center\"\r\n                  >\r\n                    <span className=\"text-sm\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-blue-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\r\n                <Package className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                Operations Reports\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {reportTypes.filter(r => r.category === 'operations').map(report => (\r\n                  <button\r\n                    key={report.id}\r\n                    onClick={() => generateReport(report.id)}\r\n                    disabled={generatingReport === report.id}\r\n                    className=\"w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex justify-between items-center\"\r\n                  >\r\n                    <span className=\"text-sm\">{report.name}</span>\r\n                    {generatingReport === report.id ? (\r\n                      <RefreshCw className=\"h-4 w-4 animate-spin text-blue-600\" />\r\n                    ) : (\r\n                      <Download className=\"h-4 w-4 text-gray-400\" />\r\n                    )}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnifiedReportingDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\admin\\VehicleManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\pages\\drivers\\DriverInsightsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'effectiveDateRange.end' and 'effectiveDateRange.start'. Either include them or remove the dependency array.","line":283,"column":6,"nodeType":"ArrayExpression","endLine":283,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [drivers, effectiveDateRange.end, effectiveDateRange.start, filteredTrips, searchTerm]","fix":{"range":[8370,8406],"text":"[drivers, effectiveDateRange.end, effectiveDateRange.start, filteredTrips, searchTerm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  format,\r\n  parseISO,\r\n  isValid,\r\n  startOfMonth,\r\n  subMonths,\r\n  differenceInDays,\r\n} from \"date-fns\";\r\nimport {\r\n  ChevronLeft,\r\n  Users,\r\n  Calendar,\r\n  IndianRupee,\r\n  Package,\r\n  Gauge,\r\n  TrendingUp,\r\n  BarChart2,\r\n  BarChart3,\r\n  Filter,\r\n  Search,\r\n  Download,\r\n  RefreshCw,\r\n  User,\r\n} from \"lucide-react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Cell,\r\n  LineChart,\r\n  Line,\r\n} from \"recharts\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport LoadingScreen from \"../../components/LoadingScreen\";\r\nimport Button from \"../../components/ui/Button\";\r\nimport DriverSummaryModal from \"../../components/drivers/DriverSummaryModal\";\r\nimport Input from \"../../components/ui/Input\";\r\nimport Select from \"../../components/ui/Select\";\r\nimport StatCard from \"../../components/ui/StatCard\";\r\nimport { cn } from \"../../utils/cn\";\r\nimport { getTrips, getVehicles } from \"../../utils/storage\";\r\nimport { getDrivers } from \"../../utils/api/drivers\";\r\nimport type { Driver, Trip, Vehicle } from \"@/types\";\r\n\r\n// Interface for driver performance metrics\r\ninterface DriverPerformance {\r\n  driverId: string;\r\n  name: string;\r\n  totalTrips: number;\r\n  totalDistance: number;\r\n  totalFuel: number;\r\n  avgMileage: number;\r\n  totalExpenses: number;\r\n  costPerKm: number;\r\n  totalGrossWeight: number;\r\n  tripDays: Set<string>;\r\n  avgLoadPerTrip: number;\r\n  driverUtilizationPercentage: number;\r\n  lastTripDate: string | null;\r\n}\r\n\r\nconst DriverInsightsPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [drivers, setDrivers] = useState<Driver[]>([]);\r\n  const [trips, setTrips] = useState<Trip[]>([]);\r\n  const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [exportLoading, setExportLoading] = useState(false);\r\n\r\n  // Filters\r\n  const [dateRange, setDateRange] = useState<\r\n    \"thisMonth\" | \"lastThreeMonths\" | \"lastSixMonths\" | \"lastYear\" | \"allTime\"\r\n  >(\"allTime\");\r\n  const [selectedDriver, setSelectedDriver] = useState<string>(\"all\");\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n  const [showFilters, setShowFilters] = useState(true);\r\n  const [selectedDriverForModal, setSelectedDriverForModal] = useState<Driver | null>(null);\r\n  const [showDriverModal, setShowDriverModal] = useState(false);\r\n\r\n  // Handle opening driver summary modal\r\n  const handleViewDriverDetails = (driverId: string) => {\r\n    const driver = drivers.find(d => d.id === driverId);\r\n    if (driver) {\r\n      setSelectedDriverForModal(driver);\r\n      setShowDriverModal(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const [driversData, tripsData, vehiclesData] = await Promise.all([\r\n          getDrivers(),\r\n          getTrips(),\r\n          getVehicles(),\r\n        ]);\r\n\r\n        setDrivers(driversData);\r\n        setTrips(tripsData);\r\n        setVehicles(vehiclesData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        toast.error(\"Failed to load driver analytics data\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Calculate date range based on filter\r\n  const effectiveDateRange = useMemo(() => {\r\n    const now = new Date();\r\n\r\n    switch (dateRange) {\r\n      case \"thisMonth\":\r\n        return {\r\n          start: startOfMonth(now),\r\n          end: now,\r\n        };\r\n      case \"lastThreeMonths\":\r\n        return {\r\n          start: subMonths(now, 3),\r\n          end: now,\r\n        };\r\n      case \"lastSixMonths\":\r\n        return {\r\n          start: subMonths(now, 6),\r\n          end: now,\r\n        };\r\n      case \"lastYear\":\r\n        return {\r\n          start: subMonths(now, 12),\r\n          end: now,\r\n        };\r\n      case \"allTime\":\r\n        return {\r\n          start: new Date(0), // January 1, 1970\r\n          end: now,\r\n        };\r\n    }\r\n  }, [dateRange]);\r\n\r\n  // Filter trips based on date range and driver selection\r\n  const filteredTrips = useMemo(() => {\r\n    return trips.filter((trip) => {\r\n      // Filter by date\r\n      const tripDate = parseISO(trip.trip_start_date);\r\n      if (\r\n        !isValid(tripDate) ||\r\n        tripDate < effectiveDateRange.start ||\r\n        tripDate > effectiveDateRange.end\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      // Filter by driver if selected\r\n      if (selectedDriver !== \"all\" && trip.driver_id !== selectedDriver) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }, [trips, effectiveDateRange, selectedDriver]);\r\n\r\n  // Calculate driver performance metrics\r\n  const driverPerformance = useMemo(() => {\r\n    const performanceMap = new Map<string, DriverPerformance>();\r\n\r\n    // Initialize with all drivers (even those with no trips)\r\n    drivers.forEach((driver) => {\r\n      performanceMap.set(driver.id || \"\", {\r\n        driverId: driver.id || \"\",\r\n        name: driver.name,\r\n        totalTrips: 0,\r\n        totalDistance: 0,\r\n        totalFuel: 0,\r\n        avgMileage: 0,\r\n        totalExpenses: 0,\r\n        costPerKm: 0,\r\n        totalGrossWeight: 0,\r\n        tripDays: new Set<string>(),\r\n        avgLoadPerTrip: 0,\r\n        driverUtilizationPercentage: 0,\r\n        lastTripDate: null,\r\n      });\r\n    });\r\n\r\n    // Process filtered trips\r\n    filteredTrips.forEach((trip) => {\r\n      const driverId = trip.driver_id;\r\n      if (!driverId) return;\r\n\r\n      const performance = performanceMap.get(driverId) || {\r\n        driverId,\r\n        name: drivers.find((d) => d.id === driverId)?.name || \"Unknown\",\r\n        totalTrips: 0,\r\n        totalDistance: 0,\r\n        totalFuel: 0,\r\n        avgMileage: 0,\r\n        totalExpenses: 0,\r\n        costPerKm: 0,\r\n        totalGrossWeight: 0,\r\n        tripDays: new Set<string>(),\r\n        avgLoadPerTrip: 0,\r\n        driverUtilizationPercentage: 0,\r\n        lastTripDate: null,\r\n      };\r\n\r\n      const distance = trip.end_km - trip.start_km;\r\n      const fuel = trip.fuel_quantity || 0;\r\n      const expenses =\r\n        (trip.total_fuel_cost || 0) + (trip.total_road_expenses || 0);\r\n      const grossWeight = trip.gross_weight || 0;\r\n      const tripStart = trip.trip_start_date\r\n        ? trip.trip_start_date.slice(0, 10)\r\n        : null;\r\n\r\n      // Update metrics\r\n      performance.totalTrips++;\r\n      performance.totalDistance += distance;\r\n      performance.totalFuel += fuel;\r\n      performance.totalExpenses += expenses;\r\n      performance.totalGrossWeight += grossWeight;\r\n      if (tripStart) {\r\n        performance.tripDays.add(tripStart);\r\n      }\r\n\r\n      // Update last trip date if newer\r\n      const tripDate = trip.trip_end_date;\r\n      if (\r\n        tripDate &&\r\n        (!performance.lastTripDate || tripDate > performance.lastTripDate)\r\n      ) {\r\n        performance.lastTripDate = tripDate;\r\n      }\r\n\r\n      performanceMap.set(driverId, performance);\r\n    });\r\n\r\n    // Calculate derived metrics\r\n    performanceMap.forEach((performance) => {\r\n      if (performance.totalFuel > 0) {\r\n        performance.avgMileage =\r\n          performance.totalDistance / performance.totalFuel;\r\n      }\r\n\r\n      if (performance.totalDistance > 0) {\r\n        performance.costPerKm =\r\n          performance.totalExpenses / performance.totalDistance;\r\n      }\r\n\r\n      performance.avgLoadPerTrip =\r\n        performance.totalTrips > 0\r\n          ? performance.totalGrossWeight / performance.totalTrips\r\n          : 0;\r\n      const totalDaysInPeriod =\r\n        differenceInDays(effectiveDateRange.end, effectiveDateRange.start) + 1;\r\n      performance.driverUtilizationPercentage =\r\n        totalDaysInPeriod > 0\r\n          ? (performance.tripDays.size / totalDaysInPeriod) * 100\r\n          : 0;\r\n    });\r\n\r\n    // Convert to array and filter by search term\r\n    return Array.from(performanceMap.values())\r\n      .filter((performance) => {\r\n        if (!searchTerm) return true;\r\n        const lowerSearch = searchTerm.toLowerCase();\r\n        return performance.name.toLowerCase().includes(lowerSearch);\r\n      })\r\n      .sort((a, b) => b.totalTrips - a.totalTrips);\r\n  }, [drivers, filteredTrips, searchTerm]);\r\n\r\n  // Calculate summary metrics\r\n  const summaryMetrics = useMemo(() => {\r\n    const totalDrivers = drivers.length;\r\n    const activeDrivers = driverPerformance.filter(\r\n      (p) => p.totalTrips > 0,\r\n    ).length;\r\n\r\n    let totalDistance = 0;\r\n    let totalFuel = 0;\r\n    let totalExpenses = 0;\r\n    let avgLoadPerTripSum = 0;\r\n    let utilizationSum = 0;\r\n\r\n    driverPerformance.forEach((p) => {\r\n      totalDistance += p.totalDistance;\r\n      totalFuel += p.totalFuel;\r\n      totalExpenses += p.totalExpenses;\r\n      avgLoadPerTripSum += p.avgLoadPerTrip || 0;\r\n      utilizationSum += p.driverUtilizationPercentage || 0;\r\n    });\r\n\r\n    const avgKmPerDay =\r\n      totalDistance /\r\n      Math.max(\r\n        1,\r\n        Math.round(\r\n          (effectiveDateRange.end.getTime() -\r\n            effectiveDateRange.start.getTime()) /\r\n            (1000 * 60 * 60 * 24),\r\n        ),\r\n      );\r\n\r\n    const avgCostPerKm = totalDistance > 0 ? totalExpenses / totalDistance : 0;\r\n\r\n    const avgLoadPerTrip =\r\n      driverPerformance.length > 0\r\n        ? avgLoadPerTripSum / driverPerformance.length\r\n        : 0;\r\n    const avgDriverUtilization =\r\n      driverPerformance.length > 0\r\n        ? utilizationSum / driverPerformance.length\r\n        : 0;\r\n\r\n    // Find top performing driver\r\n    const topDriver =\r\n      driverPerformance.length > 0\r\n        ? [...driverPerformance]\r\n            .filter((p) => p.totalTrips > 0)\r\n            .sort((a, b) => a.costPerKm - b.costPerKm)[0]\r\n        : null;\r\n\r\n    return {\r\n      totalDrivers,\r\n      activeDrivers,\r\n      avgKmPerDay,\r\n      avgCostPerKm,\r\n      avgLoadPerTrip,\r\n      avgDriverUtilization,\r\n      topDriver,\r\n    };\r\n  }, [drivers, driverPerformance, effectiveDateRange]);\r\n\r\n  // Monthly performance data for charts\r\n  const monthlyPerformanceData = useMemo(() => {\r\n    const monthlyData: Record<\r\n      string,\r\n      {\r\n        month: string;\r\n        totalDistance: number;\r\n        totalFuel: number;\r\n        driverCount: number;\r\n      }\r\n    > = {};\r\n\r\n    filteredTrips.forEach((trip) => {\r\n      const tripDate = parseISO(trip.trip_start_date);\r\n      if (!isValid(tripDate)) return;\r\n\r\n      const monthKey = format(tripDate, \"MMM yyyy\");\r\n\r\n      if (!monthlyData[monthKey]) {\r\n        monthlyData[monthKey] = {\r\n          month: monthKey,\r\n          totalDistance: 0,\r\n          totalFuel: 0,\r\n          driverCount: 0,\r\n        };\r\n      }\r\n\r\n      monthlyData[monthKey].totalDistance += trip.end_km - trip.start_km;\r\n      monthlyData[monthKey].totalFuel += trip.fuel_quantity || 0;\r\n\r\n      // Count unique drivers\r\n      const uniqueDrivers = new Set<string>();\r\n      Object.values(monthlyData).forEach((data) => {\r\n        filteredTrips.forEach((trip) => {\r\n          if (trip.driver_id) {\r\n            uniqueDrivers.add(trip.driver_id);\r\n          }\r\n        });\r\n      });\r\n      monthlyData[monthKey].driverCount = uniqueDrivers.size;\r\n    });\r\n\r\n    // Convert to array and sort by date\r\n    return Object.values(monthlyData).sort((a, b) => {\r\n      return new Date(a.month).getTime() - new Date(b.month).getTime();\r\n    });\r\n  }, [filteredTrips]);\r\n\r\n  // Export data to Excel\r\n  const handleExport = () => {\r\n    setExportLoading(true);\r\n    try {\r\n      const exportData = driverPerformance.map((driver) => ({\r\n        \"Driver Name\": driver.name,\r\n        \"Total Trips\": driver.totalTrips,\r\n        \"Total Distance (km)\": driver.totalDistance.toFixed(0),\r\n        \"Total Fuel (L)\": driver.totalFuel.toFixed(2),\r\n        \"Avg Mileage (km/L)\": driver.avgMileage.toFixed(2),\r\n        \"Total Expenses (₹)\": driver.totalExpenses.toFixed(2),\r\n        \"Cost per KM (₹)\": driver.costPerKm.toFixed(2),\r\n        \"Last Trip Date\": driver.lastTripDate\r\n          ? new Date(driver.lastTripDate).toLocaleDateString()\r\n          : \"N/A\",\r\n      }));\r\n\r\n      const worksheet = XLSX.utils.json_to_sheet(exportData);\r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Driver Performance\");\r\n\r\n      const excelBuffer = XLSX.write(workbook, {\r\n        bookType: \"xlsx\",\r\n        type: \"array\",\r\n      });\r\n      const blob = new Blob([excelBuffer], {\r\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n\r\n      saveAs(\r\n        blob,\r\n        `Driver_Performance_${format(new Date(), \"yyyy-MM-dd\")}.xlsx`,\r\n      );\r\n      toast.success(\"Export successful\");\r\n    } catch (error) {\r\n      console.error(\"Export error:\", error);\r\n      toast.error(\"Failed to export data\");\r\n    } finally {\r\n      setExportLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoadingScreen isLoading={loading} />\r\n      <Layout>\r\n        {/* Page Header */}\r\n        <div className=\"rounded-xl border bg-white dark:bg-white px-4 py-3 shadow-sm mb-6\">\r\n          <div className=\"flex items-center group\">\r\n            <BarChart3 className=\"h-5 w-5 mr-2 text-gray-500 dark:text-gray-400 group-hover:text-primary-600 transition\" />\r\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">Driver Insights</h1>\r\n          </div>\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1 ml-7\">Analytics and performance metrics for your drivers</p>\r\n          <div className=\"mt-4 flex flex-wrap gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => navigate(\"/drivers\")}\r\n              icon={<ChevronLeft className=\"h-4 w-4\" />}\r\n            >\r\n              Back to Drivers\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleExport}\r\n              icon={<Download className=\"h-4 w-4\" />}\r\n              isLoading={exportLoading}\r\n              disabled={driverPerformance.length === 0}\r\n            >\r\n              Export Data\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={cn('space-y-6', loading && 'opacity-50 pointer-events-none')}>\r\n          {/* Summary Cards */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\r\n            <StatCard\r\n              title=\"Total Drivers\"\r\n              value={summaryMetrics.totalDrivers}\r\n              icon={<Users className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n\r\n            <StatCard\r\n              title=\"Average KM/Day\"\r\n              value={Math.round(summaryMetrics.avgKmPerDay)}\r\n              subtitle=\"km\"\r\n              icon={<Calendar className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n\r\n            <StatCard\r\n              title=\"Average Cost/KM\"\r\n              value={`₹${summaryMetrics.avgCostPerKm.toFixed(2)}`}\r\n              icon={<IndianRupee className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n\r\n            <StatCard\r\n              title=\"Avg Load/Trip\"\r\n              value={\r\n                summaryMetrics.avgLoadPerTrip\r\n                  ? summaryMetrics.avgLoadPerTrip.toFixed(1)\r\n                  : \"0\"\r\n              }\r\n              subtitle=\"tons\"\r\n              icon={<Package className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n\r\n            <StatCard\r\n              title=\"Driver Utilization\"\r\n              value={\r\n                summaryMetrics.avgDriverUtilization\r\n                  ? `${summaryMetrics.avgDriverUtilization.toFixed(1)}%`\r\n                  : \"0%\"\r\n              }\r\n              icon={<Gauge className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n\r\n            <StatCard\r\n              title=\"Top Performing Driver\"\r\n              value={summaryMetrics.topDriver?.name || \"N/A\"}\r\n              subtitle={\r\n                summaryMetrics.topDriver\r\n                  ? `₹${summaryMetrics.topDriver.costPerKm.toFixed(2)}/km`\r\n                  : undefined\r\n              }\r\n              icon={<User className=\"h-5 w-5 text-primary-600\" />}\r\n            />\r\n          </div>\r\n\r\n          {/* Filters */}\r\n          <div className=\"bg-white p-4 rounded-lg shadow-sm\">\r\n            <div className=\"flex flex-wrap gap-4 justify-between\">\r\n              <div className=\"flex items-center border-l-2 border-blue-500 pl-2\">\r\n                <h2 className=\"text-lg font-medium text-gray-900 flex items-center\">\r\n                  <Filter className=\"h-5 w-5 mr-2 text-primary-500\" />\r\n                  Filters\r\n                </h2>\r\n              </div>\r\n\r\n              <Button\r\n                variant=\"outline\"\r\n                inputSize=\"sm\"\r\n                onClick={() => setShowFilters(!showFilters)}\r\n              >\r\n                {showFilters ? \"Hide Filters\" : \"Show Filters\"}\r\n              </Button>\r\n            </div>\r\n\r\n            {showFilters && (\r\n              <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <Select\r\n                  label=\"Time Period\"\r\n                  options={[\r\n                    { value: \"thisMonth\", label: \"This Month\" },\r\n                    { value: \"lastThreeMonths\", label: \"Last 3 Months\" },\r\n                    { value: \"lastSixMonths\", label: \"Last 6 Months\" },\r\n                    { value: \"lastYear\", label: \"Last 12 Months\" },\r\n                    { value: \"allTime\", label: \"All Time\" },\r\n                  ]}\r\n                  value={dateRange}\r\n                  onChange={(e) => setDateRange(e.target.value as any)}\r\n                />\r\n\r\n                <Select\r\n                  label=\"Driver\"\r\n                  options={[\r\n                    { value: \"all\", label: \"All Drivers\" },\r\n                    ...drivers.map((driver) => ({\r\n                      value: driver.id || \"\",\r\n                      label: driver.name,\r\n                    })),\r\n                  ]}\r\n                  value={selectedDriver}\r\n                  onChange={(e) => setSelectedDriver(e.target.value)}\r\n                />\r\n\r\n                <Input\r\n                  label=\"Search\"\r\n                  placeholder=\"Search drivers...\"\r\n                  icon={<Search className=\"h-4 w-4\" />}\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Driver Performance Table */}\r\n          <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n            <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex items-center justify-between\">\r\n              <div>\r\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\r\n                  Driver Performance\r\n                </h3>\r\n                <p className=\"mt-1 text-sm text-gray-500\">\r\n                  Showing{\" \"}\r\n                  {driverPerformance.filter((d) => d.totalTrips > 0).length}{\" \"}\r\n                  active drivers\r\n                </p>\r\n              </div>\r\n\r\n              <Button\r\n                variant=\"outline\"\r\n                inputSize=\"sm\"\r\n                onClick={() => {\r\n                  setDateRange(\"allTime\");\r\n                  setSelectedDriver(\"all\");\r\n                  setSearchTerm(\"\");\r\n                }}\r\n                icon={<RefreshCw className=\"h-4 w-4\" />}\r\n              >\r\n                Reset Filters\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"overflow-x-auto\">\r\n              {driverPerformance.filter((d) => d.totalTrips > 0).length > 0 ? (\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Driver\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Total Trips\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Distance\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Fuel\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Mileage\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Total Expenses\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Cost per KM\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\r\n                      >\r\n                        Last Trip\r\n                      </th>\r\n                      <th\r\n                        scope=\"col\"\r\n                        className=\"px-6 py-4 whitespace-nowrap text-sm text-center\"\r\n                      >\r\n                        Actions\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                    {driverPerformance\r\n                      .filter((driver) => driver.totalTrips > 0)\r\n                      .map((driver) => (\r\n                        <tr\r\n                          key={driver.driverId}\r\n                          className=\"hover:bg-gray-50 cursor-pointer\"\r\n                        >\r\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                            <div className=\"flex items-center\">\r\n                              <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center\">\r\n                                <User className=\"h-6 w-6 text-gray-400\" />\r\n                              </div>\r\n                              <div className=\"ml-4\">\r\n                                <div className=\"text-sm font-medium text-gray-900\">\r\n                                  {driver.name}\r\n                                </div>\r\n                                <div className=\"text-xs text-gray-500\">\r\n                                  ID: {driver.driverId.slice(0, 8)}...\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            {driver.totalTrips}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            {driver.totalDistance.toLocaleString()} km\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            {driver.totalFuel.toFixed(2)} L\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            {driver.avgMileage > 0\r\n                              ? `${driver.avgMileage.toFixed(2)} km/L`\r\n                              : \"-\"}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            ₹\r\n                            {driver.totalExpenses.toLocaleString(undefined, {\r\n                              maximumFractionDigits: 0,\r\n                            })}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center font-medium\">\r\n                            <span\r\n                              className={\r\n                                driver.costPerKm < 10\r\n                                  ? \"text-green-600\"\r\n                                  : driver.costPerKm < 15\r\n                                    ? \"text-amber-600\"\r\n                                    : \"text-red-600\"\r\n                              }\r\n                            >\r\n                              ₹{driver.costPerKm.toFixed(2)}\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\r\n                            {driver.lastTripDate\r\n                              ? format(\r\n                                  new Date(driver.lastTripDate),\r\n                                  \"dd MMM yyyy\",\r\n                                )\r\n                              : \"-\"}\r\n                          </td>\r\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-center\">\r\n                            <div className=\"flex justify-center space-x-2\">\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                inputSize=\"sm\"\r\n                                onClick={() => navigate(`/drivers/${driver.driverId}`)}\r\n                              >\r\n                                View Profile\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                inputSize=\"sm\"\r\n                                onClick={() => handleViewDriverDetails(driver.driverId)}\r\n                              >\r\n                                View Details\r\n                              </Button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              ) : (\r\n                <div className=\"text-center py-16 bg-gray-50\">\r\n                  <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n                  <h3 className=\"text-lg font-medium text-gray-900\">\r\n                    No driver activity found\r\n                  </h3>\r\n                  <p className=\"mt-2 text-gray-500\">\r\n                    {searchTerm\r\n                      ? `No drivers matching \"${searchTerm}\" have recorded trips.`\r\n                      : \"No drivers have recorded trips in the selected time period.\"}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Charts */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4 border-l-2 border-blue-500 pl-2\">\r\n                Distance Trend\r\n              </h3>\r\n              <div className=\"h-80\">\r\n                {monthlyPerformanceData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <LineChart\r\n                      data={monthlyPerformanceData}\r\n                      margin={{ top: 5, right: 30, left: 20, bottom: 25 }}\r\n                    >\r\n                      <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n                      <XAxis\r\n                        dataKey=\"month\"\r\n                        tick={{ angle: -45, textAnchor: \"end\", fontSize: 12 }}\r\n                        height={60}\r\n                        tickMargin={10}\r\n                      />\r\n                      <YAxis\r\n                        yAxisId=\"left\"\r\n                        tickFormatter={(value) =>\r\n                          `${value.toLocaleString()} km`\r\n                        }\r\n                      />\r\n                      <Tooltip />\r\n                      <Line\r\n                        yAxisId=\"left\"\r\n                        type=\"monotone\"\r\n                        dataKey=\"totalDistance\"\r\n                        name=\"Distance\"\r\n                        stroke=\"#4CAF50\"\r\n                        strokeWidth={2}\r\n                        activeDot={{ r: 8 }}\r\n                      />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"flex flex-col items-center justify-center h-full\">\r\n                    <TrendingUp className=\"h-12 w-12 text-gray-300 mb-4\" />\r\n                    <p className=\"text-gray-500\">No data available</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4 border-l-2 border-blue-500 pl-2\">\r\n                Driver Performance Comparison\r\n              </h3>\r\n              <div className=\"h-80\">\r\n                {driverPerformance.filter((d) => d.totalTrips > 0).length >\r\n                0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart\r\n                      data={driverPerformance\r\n                        .filter((d) => d.totalTrips > 0)\r\n                        .slice(0, 10)}\r\n                      margin={{ top: 5, right: 30, left: 20, bottom: 25 }}\r\n                      layout=\"vertical\"\r\n                    >\r\n                      <CartesianGrid\r\n                        strokeDasharray=\"3 3\"\r\n                        horizontal={true}\r\n                        vertical={false}\r\n                      />\r\n                      <XAxis\r\n                        type=\"number\"\r\n                        tickFormatter={(value) => `₹${value}`}\r\n                      />\r\n                      <YAxis\r\n                        type=\"category\"\r\n                        dataKey=\"name\"\r\n                        width={100}\r\n                        tick={{ fontSize: 12 }}\r\n                      />\r\n                      <Tooltip\r\n                        formatter={(value: number) => [\r\n                          `₹${value.toFixed(2)}`,\r\n                          \"Cost per KM\",\r\n                        ]}\r\n                        labelFormatter={(label) => `Driver: ${label}`}\r\n                      />\r\n                      <Bar\r\n                        dataKey=\"costPerKm\"\r\n                        name=\"Cost per KM\"\r\n                        fill=\"#8884d8\"\r\n                        minPointSize={2}\r\n                        label={{\r\n                          position: \"right\",\r\n                          formatter: (value: number) => `₹${value.toFixed(2)}`,\r\n                        }}\r\n                      >\r\n                        {driverPerformance\r\n                          .filter((d) => d.totalTrips > 0)\r\n                          .slice(0, 10)\r\n                          .map((driver, index) => (\r\n                            <Cell\r\n                              key={`cell-${index}`}\r\n                              fill={\r\n                                driver.costPerKm < 10\r\n                                  ? \"#4CAF50\"\r\n                                  : driver.costPerKm < 15\r\n                                    ? \"#FFC107\"\r\n                                    : \"#EF5350\"\r\n                              }\r\n                            />\r\n                          ))}\r\n                      </Bar>\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"flex flex-col items-center justify-center h-full\">\r\n                    <BarChart2 className=\"h-12 w-12 text-gray-300 mb-4\" />\r\n                    <p className=\"text-gray-500\">No data available</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Driver of the Month */}\r\n          {summaryMetrics.topDriver && (\r\n            <div className=\"fixed bottom-6 right-6 bg-white p-4 rounded-lg shadow-lg border-l-4 border-primary-500 max-w-xs animate-slide-up z-10\">\r\n              <div className=\"flex items-start space-x-3\">\r\n                <div className=\"flex-shrink-0 bg-primary-100 p-2 rounded-full\">\r\n                  <User className=\"h-6 w-6 text-primary-600\" />\r\n                </div>\r\n                <div>\r\n                  <h3 className=\"font-medium text-gray-900\">\r\n                    Driver of the Month\r\n                  </h3>\r\n                  <p className=\"text-lg font-bold text-primary-600\">\r\n                    {summaryMetrics.topDriver.name}\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    ₹{summaryMetrics.topDriver.costPerKm.toFixed(2)}/km •{\" \"}\r\n                    {summaryMetrics.topDriver.totalTrips} trips\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Layout>\r\n      \r\n      {/* Driver Summary Modal */}\r\n      {showDriverModal && selectedDriverForModal && (\r\n        <DriverSummaryModal\r\n          isOpen={showDriverModal}\r\n          onClose={() => {\r\n            setShowDriverModal(false);\r\n            setSelectedDriverForModal(null);\r\n          }}\r\n          driver={selectedDriverForModal}\r\n          trips={trips}\r\n          vehicles={vehicles}\r\n          maintenanceTasks={[]} // Add maintenance tasks if available\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriverInsightsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\driver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\logs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\maintenance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\reminders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\trip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\types\\vehicle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\__tests__\\dateFmt.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\__tests__\\scannerService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\activityLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\aiAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\alertSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\alertThresholds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\api\\activityLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\api\\drivers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\api\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\api\\trips.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\api\\vehicles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\auditTrailLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\correctionCascadeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\csvParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\dataIntegrityValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\dateFmt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\dateValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\destinationAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\documentExpiry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\documentShare.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\documentUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\driverAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\edgeCaseHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\exportUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\fixExistingMileage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\forceDataRefresh.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\fuelEfficiencyBaselineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\googleMapsLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\indianValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\maintenanceAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\maintenanceCatalog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\maintenancePredictor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\maintenanceStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\materialTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\mileageCalculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\mileageRecalculation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\mobileUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\numberFormatter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\partsAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\partsAnalyticsV2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\pdfUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\reminderService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\reminderTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\reminders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\reportDataFetchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\reportGenerators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\returnTripValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\scannerService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\searchHighlighting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\serialSequenceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\serviceDue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\serviceWorker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\shareUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\supaHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\supaSignedUrl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\supabaseStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\supabase\\mockClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\testI18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\themeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    // Check for saved theme preference only - no system preference check\r\n    const savedTheme = localStorage.getItem('theme') as Theme;\r\n    // Only use 'dark' if explicitly saved, otherwise always default to 'light'\r\n    return savedTheme === 'dark' ? 'dark' : 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update localStorage when theme changes\r\n    localStorage.setItem('theme', theme);\r\n    \r\n    // Update document class for Tailwind dark mode\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\tripSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\tripSerialGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\urgency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\urlShortener.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\vehicleActivity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\vehicleColors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\vehicleFormatter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\vehicleWarehouseRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\vendorHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\utils\\warehouseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\supabase\\functions\\fetch-challan-info\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\supabase\\functions\\fetch-rc-details\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\nishi\\OneDrive\\Desktop\\Fleet-Management-System---Trip-Sheet-Module3-main (2)\\Fleet-Management-System---Trip-Sheet-Module3\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]