{
  "database_migration": {
    "description": "Run this SQL in Supabase SQL Editor",
    "sql": [
      "-- Add destination_names column to trips table",
      "ALTER TABLE public.trips ADD COLUMN IF NOT EXISTS destination_names text[];",
      "",
      "-- Populate existing data for UUID-based destinations",
      "UPDATE trips t",
      "SET destination_names = (",
      "  SELECT ARRAY_AGG(COALESCE(d.name, d.formatted_address, 'Unknown'))",
      "  FROM unnest(t.destinations) AS dest_id",
      "  LEFT JOIN destinations d ON d.id::text = dest_id",
      "  WHERE d.id IS NOT NULL",
      ")",
      "WHERE EXISTS (",
      "  SELECT 1 FROM unnest(t.destinations) AS dest_id",
      "  WHERE dest_id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'",
      ");",
      "",
      "-- Populate for Google Place IDs",
      "UPDATE trips t",
      "SET destination_names = (",
      "  SELECT ARRAY_AGG(COALESCE(d.name, d.place_name, d.formatted_address, 'Unknown'))",
      "  FROM unnest(t.destinations) AS dest_id",
      "  LEFT JOIN destinations d ON d.place_id = dest_id",
      "  WHERE d.place_id IS NOT NULL",
      ")",
      "WHERE EXISTS (",
      "  SELECT 1 FROM unnest(t.destinations) AS dest_id",
      "  WHERE dest_id LIKE 'ChIJ%' OR dest_id LIKE 'EhIJ%'",
      ") AND destination_names IS NULL;",
      "",
      "-- Handle any remaining nulls",
      "UPDATE trips t",
      "SET destination_names = (",
      "  SELECT ARRAY_AGG(",
      "    COALESCE(",
      "      (SELECT name FROM destinations WHERE id::text = dest_id OR place_id = dest_id LIMIT 1),",
      "      'Location: ' || dest_id",
      "    )",
      "  )",
      "  FROM unnest(t.destinations) AS dest_id",
      ")",
      "WHERE destination_names IS NULL OR destination_names = '{null}';"
    ]
  },
  "file_changes": {
    "src/types/index.ts": {
      "description": "Add destination_names field to Trip interface",
      "find": "export interface Trip {",
      "add_after_destinations": "  destination_names?: string[];  // Display names for destinations"
    },
    "src/utils/api/trips.ts": {
      "description": "Update createTrip to save destination names",
      "location": "Inside createTrip function, after sanitizing tripData",
      "add_before_payload": [
        "    // Extract destination names if not provided",
        "    if (!sanitizedTripData.destination_names && sanitizedTripData.destinations) {",
        "      const { getDestination } = await import('../storage');",
        "      const destinationNames = await Promise.all(",
        "        sanitizedTripData.destinations.map(async (destId: string) => {",
        "          try {",
        "            const dest = await getDestination(destId);",
        "            return dest?.name || destId;",
        "          } catch {",
        "            return destId;",
        "          }",
        "        })",
        "      );",
        "      sanitizedTripData.destination_names = destinationNames;",
        "    }"
      ],
      "update_payload": "Add 'destination_names: sanitizedTripData.destination_names,' to the payload object"
    },
    "src/pages/TripsPage.tsx": {
      "description": "Extract destination names when adding a trip",
      "location": "In handleAddTrip function, before createTrip call",
      "add_code": [
        "      // Extract destination names from selected destinations",
        "      let destinationNames: string[] = [];",
        "      if (data.destinations && data.destinations.length > 0) {",
        "        const { getDestination } = await import('../utils/storage');",
        "        destinationNames = await Promise.all(",
        "          data.destinations.map(async (destId) => {",
        "            try {",
        "              const dest = await getDestination(destId);",
        "              return dest?.name || 'Unknown';",
        "            } catch {",
        "              return 'Unknown';",
        "            }",
        "          })",
        "        );",
        "      }"
      ],
      "update_createTrip": "Add 'destination_names: destinationNames,' to the createTrip call"
    },
    "src/components/trips/TripCard.tsx": {
      "description": "Update display logic to use destination_names",
      "location": "Replace the destination display section (around line 120-150)",
      "new_code": [
        "{trip.destination_names && trip.destination_names.length > 0 && trip.destination_names[0] !== null ? (",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {warehouseData?.name || 'Origin'}",
        "      </span>",
        "      <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {trip.destination_names[0]}",
        "      </span>",
        "      {trip.destination_names.length > 1 && (",
        "        <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">",
        "          +{trip.destination_names.length - 1}",
        "        </span>",
        "      )}",
        "    </div>",
        "  </div>",
        ") : loadingError ? (",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <span className=\"text-gray-500 italic\">{loadingError}</span>",
        "  </div>",
        ") : warehouseData && destinationData.length > 0 ? (",
        "  // Existing fallback logic here",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">",
        "      <span className=\"truncate max-w-[100px]\">{warehouseData.name}</span>",
        "      <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {truncateString(destinationData[0]?.name, 4)}",
        "      </span>",
        "      {destinationData.length > 1 && (",
        "        <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">",
        "          +{destinationData.length - 1}",
        "        </span>",
        "      )}",
        "    </div>",
        "  </div>",
        ") : (",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <span className=\"text-gray-500 italic\">No trip locations found</span>",
        "  </div>",
        ")}"
      ]
    }
  },
  "implementation_steps": [
    "1. Run the SQL migration in Supabase SQL Editor first",
    "2. Update src/types/index.ts - Add destination_names field to Trip interface",
    "3. Update src/utils/api/trips.ts - Modify createTrip function",
    "4. Update src/pages/TripsPage.tsx - Modify handleAddTrip function",
    "5. Update src/components/trips/TripCard.tsx - Replace destination display logic",
    "6. Test by creating a new trip and verifying destinations display correctly"
  ],
  "notes": [
    "This fix stores destination names at save time instead of looking them up on display",
    "The SQL migration will fix existing trips in your database",
    "New trips will automatically save destination names",
    "This eliminates the 'No trip locations found' error"
  ]
}