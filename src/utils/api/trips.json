{
  "name": "Fix Trip Destinations Display",
  "description": "Complete solution to fix 'No trip locations found' error by storing destination names directly",
  "timestamp": "2024-01-09",
  "changes": [
    {
      "step": 1,
      "type": "database",
      "file": "supabase_migration.sql",
      "description": "Run this in Supabase SQL Editor",
      "code": [
        "-- Add destination_names column to trips table",
        "ALTER TABLE public.trips ",
        "ADD COLUMN IF NOT EXISTS destination_names text[];",
        "",
        "-- Update existing trips with UUID-based destinations",
        "UPDATE trips t",
        "SET destination_names = (",
        "  SELECT ARRAY_AGG(COALESCE(d.name, d.formatted_address, 'Unknown'))",
        "  FROM unnest(t.destinations) AS dest_id",
        "  LEFT JOIN destinations d ON d.id::text = dest_id",
        "  WHERE d.id IS NOT NULL",
        ")",
        "WHERE EXISTS (",
        "  SELECT 1 FROM unnest(t.destinations) AS dest_id",
        "  WHERE dest_id ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'",
        ");",
        "",
        "-- Update trips with Google Place IDs",
        "UPDATE trips t",
        "SET destination_names = (",
        "  SELECT ARRAY_AGG(COALESCE(d.name, d.place_name, d.formatted_address, 'Unknown'))",
        "  FROM unnest(t.destinations) AS dest_id",
        "  LEFT JOIN destinations d ON d.place_id = dest_id",
        "  WHERE d.place_id IS NOT NULL",
        ")",
        "WHERE EXISTS (",
        "  SELECT 1 FROM unnest(t.destinations) AS dest_id",
        "  WHERE dest_id LIKE 'ChIJ%' OR dest_id LIKE 'EhIJ%'",
        ") AND (destination_names IS NULL OR destination_names = '{null}');",
        "",
        "-- Handle remaining nulls",
        "UPDATE trips t",
        "SET destination_names = (",
        "  SELECT ARRAY_AGG(",
        "    COALESCE(",
        "      (SELECT name FROM destinations WHERE id::text = dest_id OR place_id = dest_id LIMIT 1),",
        "      dest_id",
        "    )",
        "  )",
        "  FROM unnest(t.destinations) AS dest_id",
        ")",
        "WHERE destination_names IS NULL OR destination_names = '{null}';"
      ]
    },
    {
      "step": 2,
      "type": "code",
      "file": "src/types/index.ts",
      "description": "Add destination_names to Trip interface",
      "location": "In the Trip interface definition",
      "code": [
        "export interface Trip {",
        "  id: string;",
        "  trip_serial_number: string;",
        "  vehicle_id: string;",
        "  driver_id: string;",
        "  warehouse_id: string;",
        "  destinations: string[];",
        "  destination_names?: string[];  // ADD THIS LINE",
        "  trip_start_date: string;",
        "  trip_end_date: string;",
        "  // ... rest of existing fields",
        "}"
      ]
    },
    {
      "step": 3,
      "type": "code",
      "file": "src/utils/api/trips.ts",
      "description": "Update createTrip function to save destination names",
      "location": "Replace the entire createTrip function",
      "code": [
        "export const createTrip = async (tripData: Omit<Trip, 'id'>): Promise<Trip | null> => {",
        "  try {",
        "    const userId = await getCurrentUserId();",
        "    if (!userId) {",
        "      throw new Error('User not authenticated');",
        "    }",
        "",
        "    const sanitizedTripData = { ...tripData } as any;",
        "    if (sanitizedTripData.fuel_station_id === '') {",
        "      sanitizedTripData.fuel_station_id = null;",
        "    }",
        "    if (sanitizedTripData.station === '') {",
        "      sanitizedTripData.station = null;",
        "    }",
        "    if (sanitizedTripData.vehicle_id === '') {",
        "      sanitizedTripData.vehicle_id = null;",
        "    }",
        "    if (sanitizedTripData.driver_id === '') {",
        "      sanitizedTripData.driver_id = null;",
        "    }",
        "    if (sanitizedTripData.warehouse_id === '') {",
        "      sanitizedTripData.warehouse_id = null;",
        "    }",
        "",
        "    // Extract destination names if not provided",
        "    if (!sanitizedTripData.destination_names && sanitizedTripData.destinations) {",
        "      const { getDestination } = await import('../storage');",
        "      const destinationNames = await Promise.all(",
        "        sanitizedTripData.destinations.map(async (destId: string) => {",
        "          try {",
        "            const dest = await getDestination(destId);",
        "            return dest?.name || destId;",
        "          } catch {",
        "            return destId;",
        "          }",
        "        })",
        "      );",
        "      sanitizedTripData.destination_names = destinationNames;",
        "    }",
        "",
        "    const payload = withOwner({",
        "      ...sanitizedTripData,",
        "      destination_names: sanitizedTripData.destination_names,",
        "      station: sanitizedTripData.station ?? null,",
        "      fuel_station_id: sanitizedTripData.fuel_station_id ?? null,",
        "    }, userId);",
        "",
        "    const { data, error } = await supabase",
        "      .from('trips')",
        "      .insert(payload)",
        "      .select('*')",
        "      .single();",
        "",
        "    if (error) {",
        "      handleSupabaseError('create trip', error);",
        "      throw error;",
        "    }",
        "",
        "    return data;",
        "  } catch (error) {",
        "    handleSupabaseError('create trip', error);",
        "    throw error;",
        "  }",
        "};"
      ]
    },
    {
      "step": 4,
      "type": "code", 
      "file": "src/pages/TripsPage.tsx",
      "description": "Update handleAddTrip to include destination names",
      "location": "In handleAddTrip function, after destinations validation and before createTrip call",
      "code": [
        "// After validating destinations exist",
        "if (!data.destinations || data.destinations.length === 0) {",
        "  throw new Error('At least one destination is required');",
        "}",
        "",
        "// ADD THIS: Extract destination names",
        "let destinationNames: string[] = [];",
        "if (data.destinations && data.destinations.length > 0) {",
        "  const { getDestination } = await import('../utils/storage');",
        "  destinationNames = await Promise.all(",
        "    data.destinations.map(async (destId) => {",
        "      try {",
        "        const dest = await getDestination(destId);",
        "        return dest?.name || 'Unknown';",
        "      } catch {",
        "        return 'Unknown';",
        "      }",
        "    })",
        "  );",
        "}",
        "",
        "// Update the createTrip call",
        "const newTrip = await createTrip({",
        "  ...tripData,",
        "  destination_names: destinationNames,  // ADD THIS LINE",
        "  fuel_bill_url: fuelBillUrl",
        "});"
      ]
    },
    {
      "step": 5,
      "type": "code",
      "file": "src/components/trips/TripCard.tsx",
      "description": "Update destination display to use destination_names",
      "location": "Replace the destination display section (around line 120-150)",
      "code": [
        "// Replace the entire destination display section with:",
        "{trip.destination_names && trip.destination_names.length > 0 && trip.destination_names[0] !== null ? (",
        "  // Use destination_names if available",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {warehouseData?.name || 'Origin'}",
        "      </span>",
        "      <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {trip.destination_names[0]}",
        "      </span>",
        "      {trip.destination_names.length > 1 && (",
        "        <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">",
        "          +{trip.destination_names.length - 1}",
        "        </span>",
        "      )}",
        "    </div>",
        "  </div>",
        ") : loadingError ? (",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <span className=\"text-gray-500 italic\">{loadingError}</span>",
        "  </div>",
        ") : warehouseData && destinationData.length > 0 ? (",
        "  // Fallback to existing logic",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <div className=\"flex items-center gap-1 text-gray-600 overflow-hidden\">",
        "      <span className=\"truncate max-w-[100px]\">{warehouseData.name}</span>",
        "      <ArrowRight className=\"h-3 w-3 flex-shrink-0\" />",
        "      <span className=\"truncate max-w-[100px]\">",
        "        {truncateString(destinationData[0]?.name, 4)}",
        "      </span>",
        "      {destinationData.length > 1 && (",
        "        <span className=\"text-xs bg-gray-100 px-1.5 py-0.5 rounded\">",
        "          +{destinationData.length - 1}",
        "        </span>",
        "      )}",
        "    </div>",
        "  </div>",
        ") : (",
        "  <div className=\"flex items-center gap-2 text-sm\">",
        "    <MapPin className=\"h-4 w-4 text-gray-400\" />",
        "    <span className=\"text-gray-500 italic\">No trip locations found</span>",
        "  </div>",
        ")}"
      ]
    }
  ],
  "testing": {
    "steps": [
      "1. Run the SQL migration in Supabase first",
      "2. Apply all code changes",
      "3. Create a new trip and verify destinations display correctly",
      "4. Check existing trips to confirm they now show destinations"
    ]
  },
  "git_commands": [
    "git add -A",
    "git commit -m 'fix: add destination_names to trips for direct display without API lookups'",
    "git push origin main"
  ]
}